syntax = "proto3";

package admin.v1;

import "api/v1/cluster.proto";
import "api/v1/common.proto";
import "validate/validate.proto";

service ClusterService {
  rpc Get(ClusterServiceGetRequest) returns (ClusterServiceGetResponse) {
    option (api.v1.admin_roles) = ADMIN_ROLE_EDITOR;
    option (api.v1.admin_roles) = ADMIN_ROLE_VIEWER;
  }
  rpc Logs(ClusterServiceLogsRequest) returns (ClusterServiceLogsResponse) {
    option (api.v1.admin_roles) = ADMIN_ROLE_EDITOR;
    option (api.v1.admin_roles) = ADMIN_ROLE_VIEWER;
  }
  rpc List(ClusterServiceListRequest) returns (ClusterServiceListResponse) {
    option (api.v1.admin_roles) = ADMIN_ROLE_EDITOR;
    option (api.v1.admin_roles) = ADMIN_ROLE_VIEWER;
  }
  rpc GetCredentials(ClusterServiceGetCredentialsRequest) returns (ClusterServiceGetCredentialsResponse) {
    option (api.v1.admin_roles) = ADMIN_ROLE_EDITOR;
  }
  rpc Operate(ClusterServiceOperateRequest) returns (ClusterServiceOperateResponse) {
    option (api.v1.admin_roles) = ADMIN_ROLE_EDITOR;
  }
}

message ClusterServiceGetRequest {
  string uuid = 1 [(validate.rules).string.uuid = true];
}
message ClusterServiceLogsRequest {
  string uuid = 1 [(validate.rules).string.uuid = true];
}
message ClusterServiceListRequest {
  optional string uuid = 1;
  optional string project = 2;
  optional string tenant = 3;
  optional string partition = 4;
  optional string seed = 5;
  optional string name = 6;
  optional string purpose = 7;
  map<string, string> labels = 8;
}

message ClusterServiceGetCredentialsRequest {
  string uuid = 1 [(validate.rules).string.uuid = true];
}
message ClusterServiceOperateRequest {
  string uuid = 1 [(validate.rules).string.uuid = true];
  Operate operate = 2;
}

message ClusterServiceGetResponse {
  api.v1.Cluster cluster = 1;
}
message ClusterServiceLogsResponse {
  repeated string log = 1;
}
message ClusterServiceListResponse {
  repeated api.v1.Cluster clusters = 1;
}
message ClusterServiceGetCredentialsResponse {
  string kubeconfig = 1;
}
message ClusterServiceOperateResponse {
  api.v1.Cluster cluster = 1;
}
enum Operate {
  OPERATE_UNSPECIFIED = 0;
  OPERATE_RECONCILE = 1;
  OPERATE_MAINTAIN = 2;
  OPERATE_RETRY = 3;
  OPERATE_RESTART_KUBELET = 4;
  OPERATE_RESTART_CONTAINERD = 5;
}
