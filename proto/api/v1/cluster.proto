syntax = "proto3";

package api.v1;

import "api/v1/common.proto";
import "buf/validate/validate.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// ClusterService serves kubernetes cluster related functions
service ClusterService {
  // Create a cluster
  rpc Create(ClusterServiceCreateRequest) returns (ClusterServiceCreateResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
    option (chargeable) = CHARGEABLE_TRUE;
  }
  // Get a cluster
  rpc Get(ClusterServiceGetRequest) returns (ClusterServiceGetResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
    option (project_roles) = PROJECT_ROLE_VIEWER;
    option (auditing) = AUDITING_EXCLUDED;
  }
  // List clusters
  rpc List(ClusterServiceListRequest) returns (ClusterServiceListResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
    option (project_roles) = PROJECT_ROLE_VIEWER;
    option (auditing) = AUDITING_EXCLUDED;
  }
  // WatchStatus of a cluster
  rpc WatchStatus(ClusterServiceWatchStatusRequest) returns (stream ClusterServiceWatchStatusResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
    option (project_roles) = PROJECT_ROLE_VIEWER;
    option (auditing) = AUDITING_EXCLUDED;
  }
  // Delete a cluster
  rpc Delete(ClusterServiceDeleteRequest) returns (ClusterServiceDeleteResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
  }
  // Update a cluster
  rpc Update(ClusterServiceUpdateRequest) returns (ClusterServiceUpdateResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
    option (chargeable) = CHARGEABLE_TRUE;
  }
  // GetCredentials of a cluster
  rpc GetCredentials(ClusterServiceGetCredentialsRequest) returns (ClusterServiceGetCredentialsResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
  }
  // Operate on a cluster
  rpc Operate(ClusterServiceOperateRequest) returns (ClusterServiceOperateResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
  }
}

// Cluster describes a kubernetes cluster
message Cluster {
  // Uuid of the cluster
  string uuid = 1 [(buf.validate.field).string.uuid = true];
  // Name of the cluster
  string name = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 12
  }];
  // Project where this cluster belongs to
  string project = 3 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Partition where this cluster was created
  string partition = 4;
  // Kubernetes defines the kubernetes specifications of this cluster
  KubernetesSpec kubernetes = 5;
  // Workers defines the list of worker groups with their specification
  repeated Worker workers = 6;
  // Maintenance defines when automated actions on this cluster should be scheduled
  Maintenance maintenance = 7;
  // Tenant where this cluster belongs to
  string tenant = 8;
  // CreatedAt defines the date when this cluster was created
  google.protobuf.Timestamp created_at = 10;
  // UpdatedAt defines the date when this cluster was updated
  google.protobuf.Timestamp updated_at = 11;
  // DeletedAt defines the date when this cluster was deleted
  google.protobuf.Timestamp deleted_at = 12;
  // Status of this cluster
  ClusterStatus status = 20;
  // Purpose of this cluster, can be for example production, development or evaluation
  optional string purpose = 21;
  // Monitoring details for this cluster
  ClusterMonitoring monitoring = 22;
}

// KubernetesSpec details of kubernetes this cluster
message KubernetesSpec {
  // Version of kubernetes
  string version = 1 [(buf.validate.field).string = {
    pattern: "[0-9]+.[0-9]+.[0-9]"
    max_bytes: 8
  }];
}

// Maintenance defines when automatic actions should be scheduled on this cluster
message Maintenance {
  // KubernetesAutoupdate if set to true, kubernetes patch version updates will be done in the maintenance window
  optional bool kubernetes_autoupdate = 1;
  // MachineimageAutoupdate if set to true, machine images will be automatically update by rolling nodes in the maintenance window
  optional bool machineimage_autoupdate = 2;
  // TimeWindow defines the start time and duration during which automatic actions will be performed
  MaintenanceTimeWindow time_window = 3;
}

// MaintenanceTimeWindow defines the start time and duration during which automatic actions will be performed
message MaintenanceTimeWindow {
  // Begin of the MaintenanceTimeWindow
  Time begin = 1;
  // Duration of the MaintenanceTimeWindow
  google.protobuf.Duration duration = 2 [(buf.validate.field).duration = {
    gte: {seconds: 3600}
    lt: {seconds: 14400} /* 4 hours maximum */
  }];
}

// Time of day
message Time {
  // hour begin of the maintenance window, specified in 24 hour format.
  uint32 hour = 1 [(buf.validate.field).uint32.lte = 24];
  // hour:minute begin of the maintenance window.
  uint32 minute = 2 [(buf.validate.field).uint32.lte = 60];
  // timezone specifies for which region in the world the given hour:minute should apply.
  string timezone = 3;
}

// Worker defines a set of worker nodes with identical properties
message Worker {
  // Name of this worker group
  string name = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // MachineType of machines which should be used for the worker nodes in this group
  string machine_type = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Minsize defines the minimum amount of machines present in this worker group
  uint32 minsize = 3 [(buf.validate.field).uint32.lte = 32];
  // Maxsize defines the maximum amount of machines present in this worker group
  uint32 maxsize = 4 [(buf.validate.field).uint32.lte = 64];
  // Maxsurge defines the maximum amount of machines which are spun up in this worker group during a rolling upgrade
  uint32 maxsurge = 5 [(buf.validate.field).uint32.lte = 64];
  // Maxunavailable defines the maximum amount of not available machines in this worker group during a rolling upgrade
  uint32 maxunavailable = 6 [(buf.validate.field).uint32.lte = 64];
}

// WorkerUpdate is used to update a Worker group
message WorkerUpdate {
  // Name of the worker group to update
  string name = 1 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // MachineType to change in this worker group
  optional string machine_type = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Minsize defines the minimum amount of machines present in this worker group
  optional uint32 minsize = 3 [(buf.validate.field).uint32.lte = 32];
  // Maxsize defines the maximum amount of machines present in this worker group
  optional uint32 maxsize = 4 [(buf.validate.field).uint32.lte = 64];
  // Maxsurge defines the maximum amount of machines which are spun up in this worker group during a rolling upgrade
  optional uint32 maxsurge = 5 [(buf.validate.field).uint32.lte = 64];
  // Maxunavailable defines the maximum amount of not available machines in this worker group during a rolling upgrade
  optional uint32 maxunavailable = 6 [(buf.validate.field).uint32.lte = 64];
}

// ClusterServiceGetRequest is the request payload for a cluster get request
message ClusterServiceGetRequest {
  // Uuid of the cluster
  string uuid = 1 [(buf.validate.field).string.uuid = true];
  // Project of the cluster
  string project = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}

// ClusterServiceOperateRequest is the request payload for the cluster operate request
message ClusterServiceOperateRequest {
  // Uuid of the cluster
  string uuid = 1 [(buf.validate.field).string.uuid = true];
  // Project of the cluster
  string project = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Operate is the operation which should be performed
  Operate operate = 3 [(buf.validate.field).enum.defined_only = true];
}

// ClusterServiceGetRequest is the request payload for a cluster get request
message ClusterServiceGetCredentialsRequest {
  // Uuid of the cluster
  string uuid = 1 [(buf.validate.field).string.uuid = true];
  // Project of the cluster
  string project = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Expiration defines the duration after which the requested kubernetes access token can not be used anymore
  optional google.protobuf.Duration expiration = 4;
}

// ClusterServiceListRequest is the request payload for a cluster list request
message ClusterServiceListRequest {
  // Project of the cluster
  string project = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}

// ClusterServiceCreateRequest is the request payload for a cluster create request
message ClusterServiceCreateRequest {
  // Name of the cluster to create
  string name = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 12
    hostname: true
  }];
  // Project of the cluster
  string project = 3 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Partition of the cluster
  string partition = 4;
  // Kubernetes specification of the cluster
  KubernetesSpec kubernetes = 6;
  // Worker specification of the cluster
  repeated Worker workers = 7;
  // Maintenance specification of the cluster
  Maintenance maintenance = 8;
}

// ClusterServiceUpdateRequest is the request payload for a cluster update request
message ClusterServiceUpdateRequest {
  // Uuid of the cluster
  string uuid = 1 [(buf.validate.field).string.uuid = true];

  // Project of the cluster
  string project = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Kubernetes specification of the cluster
  optional KubernetesSpec kubernetes = 3;
  // Worker specification of the cluster
  repeated WorkerUpdate workers = 4;
  // Maintenance specification of the cluster
  optional Maintenance maintenance = 5;
}

// ClusterServiceDeleteRequest is the request payload for a cluster delete request
message ClusterServiceDeleteRequest {
  // Uuid of the cluster
  string uuid = 1 [(buf.validate.field).string.uuid = true];

  // Project of the cluster
  string project = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}

// ClusterServiceWatchStatusRequest is the request payload for a cluster watch status request
message ClusterServiceWatchStatusRequest {
  // Uuid of the cluster
  optional string uuid = 1 [(buf.validate.field).string.uuid = true];
  // Project of the cluster
  string project = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}

// ClusterStatus
message ClusterStatus {
  // Uuid of the cluster
  string uuid = 1;
  // Progress of the cluster reconciliation
  uint32 progress = 2;
  // State of the cluster
  string state = 3;
  // Type of the cluster status
  string type = 4;
  // ApiServerReady represents the ready state of the kubernetes api server
  string api_server_ready = 10;
  // ControlPlaneReady represents the ready state of the control plane components
  string control_plane_ready = 11;
  // NodesReady represents the ready state of the worker nodes
  string nodes_ready = 12;
  // SystemComponentsReady represents the ready state of the system components
  string system_components_ready = 13;
  // LastErrors is a list of the last known errors occurred during the cluster reconciliation
  repeated ClusterStatusLastError last_errors = 14;
  // ClusterStatusConditions is a list of status conditions of the cluster
  repeated ClusterStatusCondition conditions = 15;
}

// ClusterStatusLastError is the last known cluster status error
message ClusterStatusLastError {
  // Description a human readable message indicating details about the last error
  string description = 1;
  // TaskId ID of the task which caused this last error
  optional string task_id = 2;
  // LastUpdateTime last time the error was reported
  google.protobuf.Timestamp last_update_time = 4;
}

// ClusterStatusCondition contains status conditions of a cluster
message ClusterStatusCondition {
  // Type is the type of the condition
  string type = 1;
  // Status is the status of the condition
  string status = 2;
  // Reason describes the reason for the condition's last transition
  string reason = 3;
  // StatusMessage is a human readable message indicating details about the transition
  string status_message = 4;
  // LastUpdateTime last time the condition transitioned
  google.protobuf.Timestamp last_transition_time = 5;
  // LastUpdateTime last time the condition was updated
  google.protobuf.Timestamp last_update_time = 6;
}

// ClusterMonitoring contains details howto access the cluster monitoring
message ClusterMonitoring {
  // Username to access the monitoring
  string username = 1;
  // Password to access the monitoring
  string password = 2;
  // Endpoint is the url to access the monitoring
  string endpoint = 3;
}

// ClusterServiceCreateResponse is the response payload of a cluster create request
message ClusterServiceCreateResponse {
  // Cluster is the cluster
  Cluster cluster = 1;
}

// ClusterServiceGetResponse is the response payload of a cluster get request
message ClusterServiceGetResponse {
  // Cluster is the cluster
  Cluster cluster = 1;
}

// ClusterServiceGetCredentialsResponse is the response payload of a cluster get credentials request
message ClusterServiceGetCredentialsResponse {
  // Cluster is the cluster
  string kubeconfig = 1;
}

// ClusterServiceDeleteResponse is the response payload of a cluster delete request
message ClusterServiceDeleteResponse {
  // Cluster is the cluster
  Cluster cluster = 1;
}

// ClusterServiceUpdateResponse is the response payload of a cluster update request
message ClusterServiceUpdateResponse {
  // Cluster is the cluster
  Cluster cluster = 1;
}

// ClusterServiceListResponse is the response payload of a cluster list request
message ClusterServiceListResponse {
  // Clusters a list of clusters
  repeated Cluster clusters = 1;
}

// ClusterServiceWatchStatusResponse is the response payload of a cluster watch status request
message ClusterServiceWatchStatusResponse {
  // Status the cluster status
  ClusterStatus status = 1;
}

// ClusterServiceOperateResponse is the response payload for the cluster operate request
message ClusterServiceOperateResponse {
  // Cluster is the cluster
  Cluster cluster = 1;
}

// Operate defines the types of reconciliation to be triggered
enum Operate {
  // OPERATE_UNSPECIFIED is not specified
  OPERATE_UNSPECIFIED = 0;
  // OPERATE_RECONCILE reconcile the cluster
  OPERATE_RECONCILE = 1;
  // OPERATE_MAINTAIN maintain the cluster
  OPERATE_MAINTAIN = 2;
  // OPERATE_RETRY retry the reconciliation of the cluster
  OPERATE_RETRY = 3;
}
