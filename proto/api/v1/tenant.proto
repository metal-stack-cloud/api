syntax = "proto3";

package api.v1;

import "api/v1/common.proto";
import "api/v1/payment.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

// TenantService serves tenant related functions
service TenantService {
  // Create a tenant
  rpc Create(TenantServiceCreateRequest) returns (TenantServiceCreateResponse) {
    option (visibility) = VISIBILITY_SELF;
    option (auditing) = AUDITING_INCLUDED;
  }
  // CreateOrUpdate should only be used from within the application
  // will check if tenant already exists and updates if necessary, otherwise create a new tenant
  rpc CreateOrUpdate(TenantServiceCreateOrUpdateRequest) returns (TenantServiceCreateOrUpdateResponse) {
    option (visibility) = VISIBILITY_PRIVATE;
  }
  // List tenants
  rpc List(TenantServiceListRequest) returns (TenantServiceListResponse) {
    option (visibility) = VISIBILITY_SELF;
    option (auditing) = AUDITING_EXCLUDED;
  }
  // Get a tenant
  rpc Get(TenantServiceGetRequest) returns (TenantServiceGetResponse) {
    option (tenant_roles) = TENANT_ROLE_OWNER;
    option (tenant_roles) = TENANT_ROLE_EDITOR;
    option (tenant_roles) = TENANT_ROLE_VIEWER;
    option (tenant_roles) = TENANT_ROLE_GUEST;
    option (auditing) = AUDITING_EXCLUDED;
  }
  // Update a tenant
  rpc Update(TenantServiceUpdateRequest) returns (TenantServiceUpdateResponse) {
    option (tenant_roles) = TENANT_ROLE_OWNER;
    option (tenant_roles) = TENANT_ROLE_EDITOR;
    option (auditing) = AUDITING_INCLUDED;
  }
  // Delete a tenant
  rpc Delete(TenantServiceDeleteRequest) returns (TenantServiceDeleteResponse) {
    option (tenant_roles) = TENANT_ROLE_OWNER;
    option (tenant_roles) = TENANT_ROLE_EDITOR;
    option (auditing) = AUDITING_INCLUDED;
  }

  // RemoveMember remove a member of a tenant
  rpc RemoveMember(TenantServiceRemoveMemberRequest) returns (TenantServiceRemoveMemberResponse) {
    option (tenant_roles) = TENANT_ROLE_OWNER;
    option (auditing) = AUDITING_INCLUDED;
  }

  // UpdateMember update a member of a tenant
  rpc UpdateMember(TenantServiceUpdateMemberRequest) returns (TenantServiceUpdateMemberResponse) {
    option (tenant_roles) = TENANT_ROLE_OWNER;
    option (auditing) = AUDITING_INCLUDED;
  }

  // Invite a user to a tenant
  rpc Invite(TenantServiceInviteRequest) returns (TenantServiceInviteResponse) {
    option (tenant_roles) = TENANT_ROLE_OWNER;
    option (auditing) = AUDITING_INCLUDED;
  }
  // InviteAccept is called from a user to accept an invitation
  rpc InviteAccept(TenantServiceInviteAcceptRequest) returns (TenantServiceInviteAcceptResponse) {
    option (visibility) = VISIBILITY_SELF;
    option (auditing) = AUDITING_INCLUDED;
  }
  // InviteDelete deletes a pending invitation
  rpc InviteDelete(TenantServiceInviteDeleteRequest) returns (TenantServiceInviteDeleteResponse) {
    option (tenant_roles) = TENANT_ROLE_OWNER;
    option (auditing) = AUDITING_INCLUDED;
  }
  // InvitesList list all invites to a tenant
  rpc InvitesList(TenantServiceInvitesListRequest) returns (TenantServiceInvitesListResponse) {
    option (tenant_roles) = TENANT_ROLE_OWNER;
    option (auditing) = AUDITING_EXCLUDED;
  }
  // InviteGet get an invite
  rpc InviteGet(TenantServiceInviteGetRequest) returns (TenantServiceInviteGetResponse) {
    option (visibility) = VISIBILITY_SELF;
    option (auditing) = AUDITING_EXCLUDED;
  }
}

// Tenant is a customer of the platform
message Tenant {
  // Login of the tenant
  string login = 1;
  // Name of the tenant
  string name = 2;
  // Email of the tenant
  string email = 3;
  // Description of this tenant
  string description = 4;
  // AvatarUrl of the tenant
  string avatar_url = 5;
  // OauthProvider of the tenant
  OAuthProvider oauth_provider = 6;
  // PaymentDetails the tenant provides
  PaymentDetails payment_details = 8;
  // Admitted indicates if this tenant is allowed to use the platform
  bool admitted = 9;
  // PhoneNumber of the tenant
  string phone_number = 10;
  // TermsAndConditions the tenant accepted
  TermsAndConditions terms_and_conditions = 11;
  // EmailConsent the tenant made
  bool email_consent = 12;
  // Onboarded checks if the tenant was asked to be onboarded
  bool onboarded = 13;
  // CreatedBy stores who created this tenant
  string created_by = 15;
  // CreatedAt the date when this tenant was created
  google.protobuf.Timestamp created_at = 20;
  // UpdatedAt the date when this tenant was updated
  google.protobuf.Timestamp updated_at = 21;
  // DeletedAt the date when this tenant was deleted
  google.protobuf.Timestamp deleted_at = 22;
}

// TenantMember defines a user that participates at a tenant
message TenantMember {
  // Id is the user id of the member
  string id = 1;
  // Role is the role of the member
  TenantRole role = 2;
  // ProjectIds of which a user is a member
  repeated string project_ids = 4;
  // CreatedAt the date when the member was added to the tenant
  google.protobuf.Timestamp created_at = 10;
}

// TenantInvite defines invite to tenant
message TenantInvite {
  // Secret is the secret part of the invite, typically part of the url
  string secret = 1;
  // TargetTenant is the tenant id for which this invite was created
  string target_tenant = 2;
  // Role is the role in this tenant the user will get after accepting the invitation
  TenantRole role = 3;
  // Joined is false as long as a user has not accepted the invite
  bool joined = 4;
  // TargetTenantName is the tenant name for which this invite was created
  string target_tenant_name = 5;
  // Tenant is the login of tenant who invites to join this tenant
  string tenant = 6;
  // TenantName is the name of tenant who invites to join this tenant
  string tenant_name = 7;
  // ExpiresAt the date when this invite expires
  google.protobuf.Timestamp expires_at = 10;
  // JoinedAt the date when the member accepted this invite
  google.protobuf.Timestamp joined_at = 11;
}

// PaymentDetails of a tenant
message PaymentDetails {
  // CustomerId at the payment processor
  string customer_id = 1;
  // PaymentMethodId of the tenant at the payment processor
  optional string payment_method_id = 2;
  // SubscriptionId at the payment processor
  string subscription_id = 3;
  // Coupons a list of coupons the tenant has
  repeated Coupon coupons = 4;
  // Vat which applies to this tenant
  string vat = 5;
}

// PaymentDetailsUpdate is used to update PaymentDetails
message PaymentDetailsUpdate {
  // CustomerId at the payment processor
  optional string customer_id = 1;
  // PaymentMethodId of the tenant at the payment processor
  optional string payment_method_id = 2;
  // SubscriptionId at the payment processor
  optional string subscription_id = 3;
  // Vat which applies to this tenant
  optional string vat = 4;
}

// TermsAndConditions the tenant accepted
message TermsAndConditions {
  // Accepted indicates if the tenant accepted the terms and conditions
  bool accepted = 1;
  // When is the date when the tenant accepted the terms and conditions
  google.protobuf.Timestamp when = 2;
}

// TermsAndConditionsUpdate
message TermsAndConditionsUpdate {
  // Accepted indicates if the tenant accepted the terms and conditions
  optional bool accepted = 1;
  // When is the date when the tenant accepted the terms and conditions
  optional google.protobuf.Timestamp when = 2;
}

// TenantServiceListRequest is the request payload of the tenant list request
message TenantServiceListRequest {
  // Id filters tenants by id
  optional string id = 1;
  // Name filters tenants by name
  optional string name = 2 [(validate.rules).string = {
    min_len: 2,
    max_len: 64,
  }];
}

// TenantServiceGetRequest is the request payload of the tenant get request
message TenantServiceGetRequest {
  // Login of the tenant
  string login = 1;
}

// TenantServiceCreateRequest is the request payload of the tenant create request
message TenantServiceCreateRequest {
  // Name of this tenant
  string name = 1 [(validate.rules).string = {
    min_len: 2,
    max_len: 64,
  }];
  // Description of this tenant
  optional string description = 2 [(validate.rules).string = {
    min_len: 2,
    max_len: 512,
  }];
  // Email of the tenant, if not set will be inherited from the creator
  optional string email = 3 [(validate.rules).string.email = true];
  // AvatarUrl of the tenant
  optional string avatar_url = 4;
  // PhoneNumber of the tenant
  optional string phone_number = 5;
}

// TenantServiceCreateOrUpdateRequest is the request payload of the tenant create or update request
message TenantServiceCreateOrUpdateRequest {
  // Tenant the tenant to create or update
  Tenant tenant = 1;
}

// TenantServiceUpdateRequest is the request payload of the tenant update request
message TenantServiceUpdateRequest {
  // Login of the tenant
  string login = 1;
  // Name of the tenant
  optional string name = 2 [(validate.rules).string = {
    min_len: 2,
    max_len: 64,
  }];
  // Email of the tenant
  optional string email = 3 [(validate.rules).string.email = true];
  // Description of this tenant
  optional string description = 4 [(validate.rules).string = {
    min_len: 2,
    max_len: 512,
  }];
  // AvatarUrl of the tenant
  optional string avatar_url = 5;
  // PaymentDetails of the tenant
  optional PaymentDetailsUpdate payment_details = 8;
  // TermsAndConditions of the tenant
  optional TermsAndConditionsUpdate terms_and_conditions = 9;
  // Onboarded checks if the tenant was asked to be onboarded
  optional bool onboarded = 13;
}

// TenantServiceDeleteRequest is the request payload of the tenant delete request
message TenantServiceDeleteRequest {
  // Login of the tenant
  string login = 1;
}

// TenantServiceGetResponse is the response payload of the tenant get request
message TenantServiceGetResponse {
  // Tenant is the tenant
  Tenant tenant = 1;
  // TenantMembers of this tenant
  repeated TenantMember tenant_members = 2;
}

// TenantServiceListResponse is the response payload of the tenant list request
message TenantServiceListResponse {
  // Tenants is the list of tenants
  repeated Tenant tenants = 1;
}

// TenantServiceCreateResponse is the response payload of the tenant create request
message TenantServiceCreateResponse {
  // Tenant is the tenant
  Tenant tenant = 1;
}

// TenantServiceCreateOrUpdateResponse is the response payload of the tenant create or update request
message TenantServiceCreateOrUpdateResponse {
  // Tenant is the tenant
  Tenant tenant = 1;
}

// TenantServiceUpdateResponse is the response payload of the tenant update request
message TenantServiceUpdateResponse {
  // Tenant is the tenant
  Tenant tenant = 1;
}

// TenantServiceDeleteResponse is the response payload of the tenant delete request
message TenantServiceDeleteResponse {
  // Tenant is the tenant
  Tenant tenant = 1;
}

// TenantServiceInviteRequest is used to invite a member to a tenant
message TenantServiceInviteRequest {
  // Login of the tenant
  string login = 1;
  // Role of this user in this tenant
  TenantRole role = 2;
}

// TenantServiceInviteRequest is the response payload to a invite member request
message TenantServiceInviteResponse {
  // Invite contains a secret which can be sent to a potential user
  // can be appended to the invitation endpoint at our cloud console like
  // console.metalstack.cloud/invite/<secret>
  TenantInvite invite = 1;
}

// TenantServiceInvitesListRequest is the request payload to a list invites request
message TenantServiceInvitesListRequest {
  // Login of the tenant
  string login = 1;
}

// TenantServiceInvitesListResponse is the response payload to a list invites request
message TenantServiceInvitesListResponse {
  // Invites not already accepted the invitation to this tenant
  repeated TenantInvite invites = 1;
}

// TenantServiceInviteGetRequest is the request payload to get a invite
message TenantServiceInviteGetRequest {
  // Secret of the invite to get
  string secret = 1;
}

// TenantServiceInviteGetResponse is the response payload to a get invite request
message TenantServiceInviteGetResponse {
  // Invite is the invite
  TenantInvite invite = 1;
}

// TenantServiceRemoveMemberRequest is used to remove a member from a tenant
message TenantServiceRemoveMemberRequest {
  // Login of the tenant
  string login = 1;
  // MemberID is the id of the member to remove from this tenant
  string member_id = 2;
}

// TenantServiceRemoveMemberResponse is the response payload to a remove member request
message TenantServiceRemoveMemberResponse {}

// TenantServiceInviteAcceptRequest is the request payload to a accept invite request
message TenantServiceInviteAcceptRequest {
  // Secret is the invitation secret part of the invitation url
  string secret = 1;
}

// TenantServiceInvitesListResponse is the response payload to a accept invite request
message TenantServiceInviteAcceptResponse {
  // Tenant ID of the joined tenant
  string tenant = 1;
  // TenantName of the joined tenant
  string tenant_name = 2;
}

// TenantServiceInviteDeleteRequest is the request payload to a delete invite
message TenantServiceInviteDeleteRequest {
  // Login of the tenant
  string login = 1;
  // Secret of the invite to delete
  string secret = 2;
}

// TenantServiceInviteDeleteResponse is the response payload of a delete invite request
message TenantServiceInviteDeleteResponse {}

// TenantServiceUpdateMemberRequest is used to update a member from a tenant
message TenantServiceUpdateMemberRequest {
  // Login of the tenant
  string login = 1;
  // MemberID is the id of the member to update in this tenant
  string member_id = 2;
  // Role of this user in this tenant
  TenantRole role = 3;
}

// TenantServiceUpdateMemberResponse is the response payload to a update member request
message TenantServiceUpdateMemberResponse {
  // TenantMember is the updated membership
  TenantMember tenant_member = 1;
}
