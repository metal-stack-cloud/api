syntax = "proto3";

package api.v1;

import "api/v1/common.proto";
import "google/protobuf/timestamp.proto";

// AssetService serves asset related functions
service AssetService {
  // List available assets
  rpc List(AssetServiceListRequest) returns (AssetServiceListResponse) {
    option (visibility) = VISIBILITY_PUBLIC;
    option (auditing) = AUDITING_EXCLUDED;
  }
}

// Asset defines the available resources which can be used
message Asset {
  // Region defines a datacenter location, e.g. a city.
  Region region = 1;
  // MachineTypes available by region
  map<string, MachineType> machine_types = 2;
  // Kubernetes a list of kubernetes versions
  repeated Kubernetes kubernetes = 3;
  // Environment contains information on the environment.
  Environment environment = 4;
}

// Environment defines information on the installation environment of the metalstack.cloud installation.
message Environment {
  // ConsoleURL is the URL to the metalstack.cloud cloud console (aka frontend).
  string console_url = 1;
  // AfterLoginURL is the URL to redirect clients to after successful login.
  string after_login_url = 2;
  // StripePublicToken can be used by clients to use certain endpoints of the payment service api.
  string stripe_public_token = 3;
}

// Region defines a datacenter location
message Region {
  // Id is the technical identifier of this region
  string id = 1;
  // Name of the region
  string name = 2;
  // Address is the postal address of the region
  string address = 3;
  // Active indicates if this region is usable
  bool active = 4;
  // Partitions in this region
  map<string, Partition> partitions = 5;
  // Defaults are the default assets used if not otherwise specified.
  AssetDefaults defaults = 6;
  // Description of the region
  string description = 7;
}

// Partition defines a failure domain in one Region.
message Partition {
  // Id is the technical id of this partition
  string id = 1;
  // Name of this partition
  string name = 2;
  // Address is the postal address of the partition
  string address = 3;
  // Active indicates if this partition is usable
  bool active = 4;
  // Description of this partition
  string description = 5;
}

// MachineType defines a server type
message MachineType {
  // Id is the technical id of this machine type
  string id = 1;
  // Name of this machine type
  string name = 2;
  // CPUs e.g. cores in this machine / server
  uint32 cpus = 3;
  // Memory in this machine / server
  uint64 memory = 4;
  // Storage in this machine / server
  uint64 storage = 5;
  // CpuDescription describes the CPUs of this machine / server
  string cpu_description = 6;
  // StorageDescription describes the disks of this machine / server
  string storage_description = 7;
}

// Kubernetes related configurations available
message Kubernetes {
  // Version of kubernetes
  string version = 1;
  // Expiration sets the date on which the platform support for this kubernetes version expires
  google.protobuf.Timestamp expiration = 2;
}

// AssetDefaults apply if no specific properties are specified
message AssetDefaults {
  // MachineType defines the default machine type used
  string machine_type = 1;
  // KubernetesVersion defines the default kubernetes version to be used
  string kubernetes_version = 2;
  // WorkerMin defines how many servers are specified as minimum
  uint32 worker_min = 3;
  // WorkerMax defines how many servers are specified as maximum
  uint32 worker_max = 4;
  // Partition defines where the cluster is created if not otherwise specified
  string partition = 7;
}

// AssetServiceListRequest is the request payload to list all Assets
message AssetServiceListRequest {}

// AssetServiceListResponse is the response payload which contains the the Asset list
message AssetServiceListResponse {
  // Assets defines a list of assets
  repeated Asset assets = 2;
}
