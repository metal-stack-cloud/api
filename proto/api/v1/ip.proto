syntax = "proto3";

package api.v1;

import "api/v1/common.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

service IPService {
  rpc Get(IPServiceGetRequest) returns (IPServiceGetResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
    option (project_roles) = PROJECT_ROLE_VIEWER;
  }
  rpc Allocate(IPServiceAllocateRequest) returns (IPServiceAllocateResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
    option (chargeable) = CHARGEABLE_TRUE;
  }
  rpc Update(IPServiceUpdateRequest) returns (IPServiceUpdateResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
    option (chargeable) = CHARGEABLE_TRUE;
  }
  rpc List(IPServiceListRequest) returns (IPServiceListResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
    option (project_roles) = PROJECT_ROLE_VIEWER;
  }
  rpc Delete(IPServiceDeleteRequest) returns (IPServiceDeleteResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
    option (chargeable) = CHARGEABLE_TRUE;
  }
}

enum IPType {
  IP_TYPE_UNSPECIFIED = 0;
  IP_TYPE_EPHEMERAL = 1;
  IP_TYPE_STATIC = 2;
}

// Types
message IP {
  string uuid = 1 [(validate.rules).string.uuid = true];
  string ip = 2 [(validate.rules).string.ip = true];
  string name = 3 [(validate.rules).string = {
    min_len: 2,
    max_len: 128
  }];
  string description = 4 [(validate.rules).string = {max_len: 128}];
  string network = 5 [(validate.rules).string = {
    min_len: 2,
    max_len: 128
  }];
  string project = 6 [(validate.rules).string = {
    min_len: 2,
    max_len: 128
  }];
  IPType type = 7;
  repeated string tags = 8 [(validate.rules).repeated.max_items = 100];
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
  google.protobuf.Timestamp deleted_at = 12;
}

// Requests
message IPServiceGetRequest {
  string uuid = 1 [(validate.rules).string.uuid = true];
  string project = 2 [(validate.rules).string = {
    min_len: 2,
    max_len: 128
  }];
}
message IPServiceAllocateRequest {
  string project = 2 [(validate.rules).string = {
    min_len: 2,
    max_len: 128
  }];
  string name = 3 [(validate.rules).string = {
    min_len: 2,
    max_len: 128
  }];
  string description = 4 [(validate.rules).string = {max_len: 128}];
  repeated string tags = 8 [(validate.rules).repeated.max_items = 100];
  bool static = 9;
}
message IPServiceUpdateRequest {
  string project = 1 [(validate.rules).string = {
    min_len: 2,
    max_len: 128
  }];
  IP ip = 2;
}
message IPServiceListRequest {
  string project = 2 [(validate.rules).string = {
    min_len: 2,
    max_len: 128
  }];
}
message IPServiceDeleteRequest {
  string uuid = 1 [(validate.rules).string.uuid = true];
  string project = 2 [(validate.rules).string = {
    min_len: 2,
    max_len: 128
  }];
}

// Responses
message IPServiceGetResponse {
  IP ip = 1;
}
message IPServiceUpdateResponse {
  IP ip = 1;
}
message IPServiceAllocateResponse {
  IP ip = 1;
}
message IPServiceStaticResponse {
  IP ip = 1;
}
message IPServiceListResponse {
  repeated IP ips = 1;
}
message IPServiceDeleteResponse {
  IP ip = 1;
}
