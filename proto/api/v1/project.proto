syntax = "proto3";

package api.v1;

import "api/v1/common.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

// ProjectService serves project related functions
service ProjectService {
  // List all accessible projects
  rpc List(ProjectServiceListRequest) returns (ProjectServiceListResponse) {
    option (visibility) = VISIBILITY_SELF;
    option (auditing) = AUDITING_EXCLUDED;
  }
  // Get a project
  rpc Get(ProjectServiceGetRequest) returns (ProjectServiceGetResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
    option (project_roles) = PROJECT_ROLE_VIEWER;
    option (auditing) = AUDITING_EXCLUDED;
  }
  // Create a project
  rpc Create(ProjectServiceCreateRequest) returns (ProjectServiceCreateResponse) {
    option (tenant_roles) = TENANT_ROLE_OWNER;
    option (tenant_roles) = TENANT_ROLE_EDITOR;
    option (auditing) = AUDITING_INCLUDED;
  }
  // Delete a project
  rpc Delete(ProjectServiceDeleteRequest) returns (ProjectServiceDeleteResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (auditing) = AUDITING_INCLUDED;
  }
  // Update a project
  rpc Update(ProjectServiceUpdateRequest) returns (ProjectServiceUpdateResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
    option (auditing) = AUDITING_INCLUDED;
  }
  // Invite a user to a project
  rpc InviteMember(ProjectServiceInviteMemberRequest) returns (ProjectServiceInviteMemberResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (auditing) = AUDITING_INCLUDED;
  }
  // RemoveMember a user from a project
  rpc RemoveMember(ProjectServiceRemoveMemberRequest) returns (ProjectServiceRemoveMemberResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (auditing) = AUDITING_INCLUDED;
  }
  
}

// Project defines a group of resources belonging to a tenant
// a tenant can have multiple projects
message Project {
  // Uuid of this project
  string uuid = 1;
  // Name of this project must be unique per tenant
  string name = 2;
  // Description of this project
  string description = 3;
  // Tenant this project belongs to
  string tenant = 4;
  // ProjectMembers in this project
  repeated ProjectMember project_members = 5;
  // CreatedAt the date when this project was created
  google.protobuf.Timestamp created_at = 10;
  // UpdatedAt the date when this project was updated
  google.protobuf.Timestamp updated_at = 11;
}

message ProjectMember {
  string id = 1;  
  ProjectRole role = 2;
  bool pending_invitation = 3;

  google.protobuf.Timestamp created_at = 10;
 
}

// ProjectServiceListRequest is the request payload to list all projects
message ProjectServiceListRequest {
  // Name list only projects with this name
  optional string name = 1 [(validate.rules).string = {
    min_len: 2,
    max_len: 128,
  }];
  // Tenant list only projects of this tenant
  optional string tenant = 2 [(validate.rules).string = {
    min_len: 2,
    max_len: 128,
  }];
}

// ProjectServiceListResponse is the response payload to list all projects
message ProjectServiceListResponse {
  // Projects is a list of all your projects
  repeated Project projects = 1;
}

// ProjectServiceGetRequest is the request payload to get a project
message ProjectServiceGetRequest {
  // Project is the uuid of the project to get
  string project = 1 [(validate.rules).string.uuid = true];
}

// ProjectServiceGetResponse is the response payload to get a projects
message ProjectServiceGetResponse {
  // Project is the project
  Project project = 1;
}

// ProjectServiceCreateRequest is the request payload to Create a project
message ProjectServiceCreateRequest {
  // Login is the tenant of this project
  // TODO: is login really a good name?
  string login = 1 [(validate.rules).string = {
    min_len: 2,
    max_len: 128,
  }];
  // Name of this project, unique per tenant
  string name = 2 [(validate.rules).string = {
    min_len: 2,
    max_len: 64,
  }];
  // Description of this project
  string description = 3 [(validate.rules).string = {
    min_len: 2,
    max_len: 512,
  }];
}

// ProjectServiceCreateResponse is the response payload of creation of a project
message ProjectServiceCreateResponse {
  // Project is the project
  Project project = 1;
}

// ProjectServiceDeleteRequest is the request payload to delete a project
message ProjectServiceDeleteRequest {
  // Project is the uuid of the project to get
  string project = 1 [(validate.rules).string.uuid = true];
}

// ProjectServiceDeleteResponse is the response payload to delete a project
message ProjectServiceDeleteResponse {
  // Project is the project
  Project project = 1;
}

// ProjectServiceUpdateRequest is the request payload to update a project
message ProjectServiceUpdateRequest {
  // Project is the uuid of the project to get
  string project = 1 [(validate.rules).string.uuid = true];
  // Name of this project unique per tenant
  optional string name = 2 [(validate.rules).string = {
    min_len: 2,
    max_len: 64,
  }];
  // Description of this project
  optional string description = 3 [(validate.rules).string = {
    min_len: 2,
    max_len: 512,
  }];
}

// ProjectServiceUpdateResponse is the response payload to update a project
message ProjectServiceUpdateResponse {
  // Project is the project
  Project project = 1;
}

// ProjectServiceInviteMemberRequest
message ProjectServiceInviteMemberRequest {
  // Project is the uuid of the project to get
  string project = 1 [(validate.rules).string.uuid = true];

  // Email of the user to invite
  string email = 2 [(validate.rules).string.email = true];

  // Role of this user in this project
  ProjectRole role = 3;
}

message ProjectServiceInviteMemberResponse {
  
}

message ProjectServiceRemoveMemberRequest {

}

message ProjectServiceRemoveMemberResponse {
  
}