syntax = "proto3";

package api.v1;

import "api/v1/common.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

service TokenService {
  rpc Create(TokenServiceCreateRequest) returns (TokenServiceCreateResponse) {
    option (visibility) = VISIBILITY_SELF;
  }
  rpc List(TokenServiceListRequest) returns (TokenServiceListResponse) {
    option (visibility) = VISIBILITY_SELF;
  }
  rpc Revoke(TokenServiceRevokeRequest) returns (TokenServiceRevokeResponse) {
    option (visibility) = VISIBILITY_SELF;
  }
}

// Tokens

message Token {
  // uuid of the jwt token
  string uuid = 1 [(validate.rules).string.uuid = true];
  // user_id who created this token
  string user_id = 2 [(validate.rules).string = {
    min_len: 2,
    max_len: 512,
  }];
  // description is a user given description of this token.
  string description = 3 [(validate.rules).string = {
    min_len: 2,
    max_len: 256,
  }];
  repeated ProjectPermission permissions = 4;
  repeated TokenRole roles = 5;
  google.protobuf.Timestamp expires = 6;
  google.protobuf.Timestamp issued_at = 7;
  TokenType token_type = 8;
}

enum TokenType {
  TOKEN_TYPE_UNSPECIFIED = 0;
  TOKEN_TYPE_API = 1;
  TOKEN_TYPE_CONSOLE = 2;
}

message TokenServiceCreateRequest {
  string description = 1 [(validate.rules).string = {
    min_len: 2,
    max_len: 256,
  }];
  repeated ProjectPermission permissions = 2;
  repeated TokenRole roles = 3;
  google.protobuf.Duration expires = 4;
}

message ProjectPermission {
  string project = 1;
  repeated string methods = 2;
}

message TokenRole {
  // subject specifies the project or organization this role applies to
  string subject = 1 [(validate.rules).string = {
    min_len: 2,
    max_len: 256,
  }];
  // role defines the string representation of a tenantrole, projectrole or a global adminrole
  string role = 2 [(validate.rules).string = {
    in: [
      "admin",
      "owner",
      "editor",
      "viewer"
    ]
  }];
}

message TokenServiceCreateResponse {
  Token token = 1;
  string secret = 2;
}

message TokenServiceListRequest {}
message TokenServiceListResponse {
  repeated Token tokens = 1;
}

message TokenServiceRevokeRequest {
  string uuid = 1;
}
message TokenServiceRevokeResponse {}
