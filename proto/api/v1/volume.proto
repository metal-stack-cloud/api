syntax = "proto3";

package api.v1;

import "api/v1/common.proto";
import "buf/validate/validate.proto";

// VolumeService serves volume related functions
service VolumeService {
  // Get a volume
  rpc Get(VolumeServiceGetRequest) returns (VolumeServiceGetResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
    option (project_roles) = PROJECT_ROLE_VIEWER;
    option (auditing) = AUDITING_EXCLUDED;
  }
  // List the volumes
  rpc List(VolumeServiceListRequest) returns (VolumeServiceListResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
    option (project_roles) = PROJECT_ROLE_VIEWER;
    option (auditing) = AUDITING_EXCLUDED;
  }
  // Delete a volume
  rpc Delete(VolumeServiceDeleteRequest) returns (VolumeServiceDeleteResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
  }
  // Update a volume
  rpc Update(VolumeServiceUpdateRequest) returns (VolumeServiceUpdateResponse) {
    option (project_roles) = PROJECT_ROLE_OWNER;
    option (project_roles) = PROJECT_ROLE_EDITOR;
  }
}

// Volume is a unit of block storage
message Volume {
  // Uuid is the unique identifier of the volume
  string uuid = 1;
  // Name of the volume
  string name = 2;
  // Project this volume belongs to
  string project = 3;
  // Partition where this volume resides
  string partition = 4;
  // StorageClass where this volume is created
  string storage_class = 5;
  // Size in bytes of the volume
  uint64 size = 6;
  // Usage in bytes of the volume
  uint64 usage = 7;
  // State of the volume
  string state = 8;
  // AttachedTo us a list of nodes this volume is attached
  repeated string attached_to = 9;
  // SourceSnapshotUuid if this volume was created from a snapshot, this was the uuid source
  string source_snapshot_uuid = 10;
  // SourceSnapshotName if this volume was created from a snapshot, this was the name of the source
  string source_snapshot_name = 11;
  // VolumeHandle is the handle to mount this volume manually
  string volume_handle = 12;
  // NodeIps is a list of storage server node ips
  repeated string node_ips = 13;
  // RebuildProgress shows the progress of a rebuild if any
  string rebuild_progress = 14;
  // PrimaryNodeUuid is the uuid of the storage server node where the primary replica of this volume resides
  string primary_node_uuid = 15;
  // QosPolicyUuid is the uuid of the QOS policy if any
  string qos_policy_uuid = 16;
  // QosPolicyName is the name of the QOS policy if any
  string qos_policy_name = 17;
  // ReplicaCount shows how many replicas of this volume exist
  uint32 replica_count = 18;
  // ProtectionState shows the state of failure protection of this volume
  string protection_state = 19;
  // LogicalUsedStorage in bytes of the volume
  uint64 logical_used_storage = 20;
  // VolumeStatistics are only visible to admins
  VolumeStatistics statistics = 21;
  // ClusterName if set points to the cluster this volume is attached to
  string cluster_name = 22;
  // ClusterID if set points to the cluster this volume is attached to
  string cluster_id = 23;
  // Labels stored in the volume
  repeated VolumeLabel labels = 24;
}

// label-key and label-value length must be between 1 and 253 characters and
// may contain any of: alphanumeric characters (a-z, A-Z, 0-9), hyphen (-),
// underscore (_) and dot (.).
message VolumeLabel {
  // key under which the value is stored
  string key = 1 [(buf.validate.field).string = {
    min_len: 1
    max_len: 253
  }];
  // value of this label
  string value = 2 [(buf.validate.field).string = {
    min_len: 1
    max_len: 253
  }];
}

// UpdateVolumeLabels allows updating the labels
message UpdateVolumeLabels {
  // Update volume labels. New ones will be added, existing ones overwritten
  repeated VolumeLabel update = 1;
  // Remove volume labels
  repeated string remove = 2;
}

// VolumeStatistics are all detailed statistics of a volume
message VolumeStatistics {
  // LogicalUsedStorage
  //
  // Logical storage space used by volume, given in bytes.
  uint64 logical_used_storage = 1;
  // PhysicalUsedStorage
  //
  // Physical storage space used by volume excluding parity, given in bytes.
  uint64 physical_used_storage = 2;
  // CompressionRatio
  //
  // compression ratio userWritten/physicalCapacity
  double compression_ratio = 3;
  // TotalCompressionRatio
  //
  // compression ratio sum(userWritten) / sum(physical capacity)
  double total_compression_ratio = 4;
  // PhysicalCapacity
  //
  // The physical capacity that exists in this volume layer
  uint64 physical_capacity = 5;
  // PhysicalOwnedStorageCapacity
  //
  // The capacity that would be freed when volume is deleted
  uint64 physical_owned_capacity = 6;
  // PhysicalOwnedMemory
  //
  // The memory that would be freed when volume is deleted
  uint64 physical_owned_memory = 7;
  // PhysicalMemory
  //
  // The memory that exists for this volume
  uint64 physical_memory = 8;
  // UserWritten
  //
  // The amount of bytes written to this volume by the user
  uint64 user_written = 9;
  // UnrecoverableDataIntegrityErrors
  //
  // Number of data integrity errors that could no be recovered by the system.
  uint32 unrecoverable_data_integrity_errors = 10;
  // RecoverableDataIntegrityErrors
  //
  // Number of data integrity errors that were recovered by the system.
  uint32 recoverable_data_integrity_errors = 12;
}

// VolumeServiceGetRequest is the request payload of the volume get request
message VolumeServiceGetRequest {
  // Uuid of the volume
  string uuid = 1 [(buf.validate.field).string.uuid = true];
  // Project of the volume
  string project = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}

// VolumeServiceListRequest is the request payload of a volume list request
message VolumeServiceListRequest {
  // Uuid of the volume
  optional string uuid = 1 [(buf.validate.field).string.uuid = true];
  // Project of the volume
  string project = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Partition where the volumes should be listed
  optional string partition = 3;
  // Name of the volume
  optional string name = 4;
}

// VolumeServiceDeleteRequest is the request payload of a volume delete request
message VolumeServiceDeleteRequest {
  // Uuid of the volume
  string uuid = 1 [(buf.validate.field).string.uuid = true];
  // Project of the volume
  string project = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
}

// VolumeServiceUpdateRequest is the request payload of a volume update request
message VolumeServiceUpdateRequest {
  // Uuid of the volume
  string uuid = 1 [(buf.validate.field).string.uuid = true];
  // Project of the volume
  string project = 2 [(buf.validate.field).string = {
    min_len: 2
    max_len: 128
  }];
  // Update Volume Labels stored in the volume. Some labels are immutable and cannot be changed.
  optional UpdateVolumeLabels labels = 24;
}

// VolumeServiceGetResponse is the response payload of a volume get request
message VolumeServiceGetResponse {
  // Volume the volume
  Volume volume = 1;
}

// VolumeServiceListResponse is the response payload of a volume list request
message VolumeServiceListResponse {
  // Volumes the volumes
  repeated Volume volumes = 1;
}

// VolumeServiceDeleteResponse is the response payload of a volume delete request
message VolumeServiceDeleteResponse {
  // Volume the volume
  Volume volume = 1;
}

// VolumeServiceUpdateResponse is the response payload of a volume update request
message VolumeServiceUpdateResponse {
  // Volume the volume
  Volume volume = 1;
}
