# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: api/v1/volume.proto

from typing import Optional, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext
import metalstackcloud.api.v1.volume_pb2 as api_dot_v1_dot_volume__pb2


class VolumeService(Protocol):
    async def Get(self, req: api_dot_v1_dot_volume__pb2.VolumeServiceGetRequest, ctx: ServiceContext) -> api_dot_v1_dot_volume__pb2.VolumeServiceGetResponse: ...
    async def List(self, req: api_dot_v1_dot_volume__pb2.VolumeServiceListRequest, ctx: ServiceContext) -> api_dot_v1_dot_volume__pb2.VolumeServiceListResponse: ...
    async def Delete(self, req: api_dot_v1_dot_volume__pb2.VolumeServiceDeleteRequest, ctx: ServiceContext) -> api_dot_v1_dot_volume__pb2.VolumeServiceDeleteResponse: ...
    async def Update(self, req: api_dot_v1_dot_volume__pb2.VolumeServiceUpdateRequest, ctx: ServiceContext) -> api_dot_v1_dot_volume__pb2.VolumeServiceUpdateResponse: ...


class VolumeServiceServer(ConnecpyServer):
    def __init__(self, *, service: VolumeService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/api.v1.VolumeService"
        self._endpoints = {
            "Get": Endpoint[api_dot_v1_dot_volume__pb2.VolumeServiceGetRequest, api_dot_v1_dot_volume__pb2.VolumeServiceGetResponse](
                service_name="VolumeService",
                name="Get",
                function=getattr(service, "Get"),
                input=api_dot_v1_dot_volume__pb2.VolumeServiceGetRequest,
                output=api_dot_v1_dot_volume__pb2.VolumeServiceGetResponse,
                allowed_methods=("POST",),
            ),
            "List": Endpoint[api_dot_v1_dot_volume__pb2.VolumeServiceListRequest, api_dot_v1_dot_volume__pb2.VolumeServiceListResponse](
                service_name="VolumeService",
                name="List",
                function=getattr(service, "List"),
                input=api_dot_v1_dot_volume__pb2.VolumeServiceListRequest,
                output=api_dot_v1_dot_volume__pb2.VolumeServiceListResponse,
                allowed_methods=("POST",),
            ),
            "Delete": Endpoint[api_dot_v1_dot_volume__pb2.VolumeServiceDeleteRequest, api_dot_v1_dot_volume__pb2.VolumeServiceDeleteResponse](
                service_name="VolumeService",
                name="Delete",
                function=getattr(service, "Delete"),
                input=api_dot_v1_dot_volume__pb2.VolumeServiceDeleteRequest,
                output=api_dot_v1_dot_volume__pb2.VolumeServiceDeleteResponse,
                allowed_methods=("POST",),
            ),
            "Update": Endpoint[api_dot_v1_dot_volume__pb2.VolumeServiceUpdateRequest, api_dot_v1_dot_volume__pb2.VolumeServiceUpdateResponse](
                service_name="VolumeService",
                name="Update",
                function=getattr(service, "Update"),
                input=api_dot_v1_dot_volume__pb2.VolumeServiceUpdateRequest,
                output=api_dot_v1_dot_volume__pb2.VolumeServiceUpdateResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "api.v1.VolumeService"


class VolumeServiceSync(Protocol):
    def Get(self, req: api_dot_v1_dot_volume__pb2.VolumeServiceGetRequest, ctx: ServiceContext) -> api_dot_v1_dot_volume__pb2.VolumeServiceGetResponse: ...
    def List(self, req: api_dot_v1_dot_volume__pb2.VolumeServiceListRequest, ctx: ServiceContext) -> api_dot_v1_dot_volume__pb2.VolumeServiceListResponse: ...
    def Delete(self, req: api_dot_v1_dot_volume__pb2.VolumeServiceDeleteRequest, ctx: ServiceContext) -> api_dot_v1_dot_volume__pb2.VolumeServiceDeleteResponse: ...
    def Update(self, req: api_dot_v1_dot_volume__pb2.VolumeServiceUpdateRequest, ctx: ServiceContext) -> api_dot_v1_dot_volume__pb2.VolumeServiceUpdateResponse: ...


class VolumeServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: VolumeServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/api.v1.VolumeService"
        self._endpoints = {
            "Get": Endpoint[api_dot_v1_dot_volume__pb2.VolumeServiceGetRequest, api_dot_v1_dot_volume__pb2.VolumeServiceGetResponse](
                service_name="VolumeService",
                name="Get",
                function=getattr(service, "Get"),
                input=api_dot_v1_dot_volume__pb2.VolumeServiceGetRequest,
                output=api_dot_v1_dot_volume__pb2.VolumeServiceGetResponse,
                allowed_methods=("POST",),
            ),
            "List": Endpoint[api_dot_v1_dot_volume__pb2.VolumeServiceListRequest, api_dot_v1_dot_volume__pb2.VolumeServiceListResponse](
                service_name="VolumeService",
                name="List",
                function=getattr(service, "List"),
                input=api_dot_v1_dot_volume__pb2.VolumeServiceListRequest,
                output=api_dot_v1_dot_volume__pb2.VolumeServiceListResponse,
                allowed_methods=("POST",),
            ),
            "Delete": Endpoint[api_dot_v1_dot_volume__pb2.VolumeServiceDeleteRequest, api_dot_v1_dot_volume__pb2.VolumeServiceDeleteResponse](
                service_name="VolumeService",
                name="Delete",
                function=getattr(service, "Delete"),
                input=api_dot_v1_dot_volume__pb2.VolumeServiceDeleteRequest,
                output=api_dot_v1_dot_volume__pb2.VolumeServiceDeleteResponse,
                allowed_methods=("POST",),
            ),
            "Update": Endpoint[api_dot_v1_dot_volume__pb2.VolumeServiceUpdateRequest, api_dot_v1_dot_volume__pb2.VolumeServiceUpdateResponse](
                service_name="VolumeService",
                name="Update",
                function=getattr(service, "Update"),
                input=api_dot_v1_dot_volume__pb2.VolumeServiceUpdateRequest,
                output=api_dot_v1_dot_volume__pb2.VolumeServiceUpdateResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "api.v1.VolumeService"


class VolumeServiceClient(ConnecpyClient):
    def Get(
        self,
        request: api_dot_v1_dot_volume__pb2.VolumeServiceGetRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_volume__pb2.VolumeServiceGetResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.VolumeService/Get",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_volume__pb2.VolumeServiceGetResponse,
            method=method,
            **kwargs,
        )

    def List(
        self,
        request: api_dot_v1_dot_volume__pb2.VolumeServiceListRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_volume__pb2.VolumeServiceListResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.VolumeService/List",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_volume__pb2.VolumeServiceListResponse,
            method=method,
            **kwargs,
        )

    def Delete(
        self,
        request: api_dot_v1_dot_volume__pb2.VolumeServiceDeleteRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_volume__pb2.VolumeServiceDeleteResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.VolumeService/Delete",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_volume__pb2.VolumeServiceDeleteResponse,
            method=method,
            **kwargs,
        )

    def Update(
        self,
        request: api_dot_v1_dot_volume__pb2.VolumeServiceUpdateRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_volume__pb2.VolumeServiceUpdateResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.VolumeService/Update",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_volume__pb2.VolumeServiceUpdateResponse,
            method=method,
            **kwargs,
        )


class AsyncVolumeServiceClient(AsyncConnecpyClient):
    async def Get(
        self,
        request: api_dot_v1_dot_volume__pb2.VolumeServiceGetRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_volume__pb2.VolumeServiceGetResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.VolumeService/Get",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_volume__pb2.VolumeServiceGetResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def List(
        self,
        request: api_dot_v1_dot_volume__pb2.VolumeServiceListRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_volume__pb2.VolumeServiceListResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.VolumeService/List",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_volume__pb2.VolumeServiceListResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Delete(
        self,
        request: api_dot_v1_dot_volume__pb2.VolumeServiceDeleteRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_volume__pb2.VolumeServiceDeleteResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.VolumeService/Delete",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_volume__pb2.VolumeServiceDeleteResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Update(
        self,
        request: api_dot_v1_dot_volume__pb2.VolumeServiceUpdateRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_volume__pb2.VolumeServiceUpdateResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.VolumeService/Update",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_volume__pb2.VolumeServiceUpdateResponse,
            method=method,
            session=session,
            **kwargs,
        )
