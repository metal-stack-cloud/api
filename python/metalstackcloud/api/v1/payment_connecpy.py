# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: api/v1/payment.proto

from typing import Optional, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext
import metalstackcloud.api.v1.payment_pb2 as api_dot_v1_dot_payment__pb2


class PaymentService(Protocol):
    async def CreateOrUpdateCustomer(self, req: api_dot_v1_dot_payment__pb2.PaymentServiceCreateOrUpdateCustomerRequest, ctx: ServiceContext) -> api_dot_v1_dot_payment__pb2.PaymentServiceCreateOrUpdateCustomerResponse: ...
    async def GetCustomer(self, req: api_dot_v1_dot_payment__pb2.PaymentServiceGetCustomerRequest, ctx: ServiceContext) -> api_dot_v1_dot_payment__pb2.PaymentServiceGetCustomerResponse: ...
    async def CheckIfCustomerExists(self, req: api_dot_v1_dot_payment__pb2.PaymentServiceCheckIfCustomerExistsRequest, ctx: ServiceContext) -> api_dot_v1_dot_payment__pb2.PaymentServiceCheckIfCustomerExistsResponse: ...
    async def HasPaymentMethod(self, req: api_dot_v1_dot_payment__pb2.PaymentServiceHasPaymentMethodRequest, ctx: ServiceContext) -> api_dot_v1_dot_payment__pb2.PaymentServiceHasPaymentMethodResponse: ...
    async def DeletePaymentMethod(self, req: api_dot_v1_dot_payment__pb2.PaymentServiceDeletePaymentMethodRequest, ctx: ServiceContext) -> api_dot_v1_dot_payment__pb2.PaymentServiceDeletePaymentMethodResponse: ...
    async def GetSubscriptionUsage(self, req: api_dot_v1_dot_payment__pb2.PaymentServiceGetSubscriptionUsageRequest, ctx: ServiceContext) -> api_dot_v1_dot_payment__pb2.PaymentServiceGetSubscriptionUsageResponse: ...
    async def GetInvoices(self, req: api_dot_v1_dot_payment__pb2.PaymentServiceGetInvoicesRequest, ctx: ServiceContext) -> api_dot_v1_dot_payment__pb2.PaymentServiceGetInvoicesResponse: ...
    async def GetDefaultPrices(self, req: api_dot_v1_dot_payment__pb2.PaymentServiceGetDefaultPricesRequest, ctx: ServiceContext) -> api_dot_v1_dot_payment__pb2.PaymentServiceGetDefaultPricesResponse: ...
    async def HasChargeableResources(self, req: api_dot_v1_dot_payment__pb2.PaymentServiceHasChargeableResourcesRequest, ctx: ServiceContext) -> api_dot_v1_dot_payment__pb2.PaymentServiceHasChargeableResourcesResponse: ...


class PaymentServiceServer(ConnecpyServer):
    def __init__(self, *, service: PaymentService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/api.v1.PaymentService"
        self._endpoints = {
            "CreateOrUpdateCustomer": Endpoint[api_dot_v1_dot_payment__pb2.PaymentServiceCreateOrUpdateCustomerRequest, api_dot_v1_dot_payment__pb2.PaymentServiceCreateOrUpdateCustomerResponse](
                service_name="PaymentService",
                name="CreateOrUpdateCustomer",
                function=getattr(service, "CreateOrUpdateCustomer"),
                input=api_dot_v1_dot_payment__pb2.PaymentServiceCreateOrUpdateCustomerRequest,
                output=api_dot_v1_dot_payment__pb2.PaymentServiceCreateOrUpdateCustomerResponse,
                allowed_methods=("POST",),
            ),
            "GetCustomer": Endpoint[api_dot_v1_dot_payment__pb2.PaymentServiceGetCustomerRequest, api_dot_v1_dot_payment__pb2.PaymentServiceGetCustomerResponse](
                service_name="PaymentService",
                name="GetCustomer",
                function=getattr(service, "GetCustomer"),
                input=api_dot_v1_dot_payment__pb2.PaymentServiceGetCustomerRequest,
                output=api_dot_v1_dot_payment__pb2.PaymentServiceGetCustomerResponse,
                allowed_methods=("POST",),
            ),
            "CheckIfCustomerExists": Endpoint[api_dot_v1_dot_payment__pb2.PaymentServiceCheckIfCustomerExistsRequest, api_dot_v1_dot_payment__pb2.PaymentServiceCheckIfCustomerExistsResponse](
                service_name="PaymentService",
                name="CheckIfCustomerExists",
                function=getattr(service, "CheckIfCustomerExists"),
                input=api_dot_v1_dot_payment__pb2.PaymentServiceCheckIfCustomerExistsRequest,
                output=api_dot_v1_dot_payment__pb2.PaymentServiceCheckIfCustomerExistsResponse,
                allowed_methods=("POST",),
            ),
            "HasPaymentMethod": Endpoint[api_dot_v1_dot_payment__pb2.PaymentServiceHasPaymentMethodRequest, api_dot_v1_dot_payment__pb2.PaymentServiceHasPaymentMethodResponse](
                service_name="PaymentService",
                name="HasPaymentMethod",
                function=getattr(service, "HasPaymentMethod"),
                input=api_dot_v1_dot_payment__pb2.PaymentServiceHasPaymentMethodRequest,
                output=api_dot_v1_dot_payment__pb2.PaymentServiceHasPaymentMethodResponse,
                allowed_methods=("POST",),
            ),
            "DeletePaymentMethod": Endpoint[api_dot_v1_dot_payment__pb2.PaymentServiceDeletePaymentMethodRequest, api_dot_v1_dot_payment__pb2.PaymentServiceDeletePaymentMethodResponse](
                service_name="PaymentService",
                name="DeletePaymentMethod",
                function=getattr(service, "DeletePaymentMethod"),
                input=api_dot_v1_dot_payment__pb2.PaymentServiceDeletePaymentMethodRequest,
                output=api_dot_v1_dot_payment__pb2.PaymentServiceDeletePaymentMethodResponse,
                allowed_methods=("POST",),
            ),
            "GetSubscriptionUsage": Endpoint[api_dot_v1_dot_payment__pb2.PaymentServiceGetSubscriptionUsageRequest, api_dot_v1_dot_payment__pb2.PaymentServiceGetSubscriptionUsageResponse](
                service_name="PaymentService",
                name="GetSubscriptionUsage",
                function=getattr(service, "GetSubscriptionUsage"),
                input=api_dot_v1_dot_payment__pb2.PaymentServiceGetSubscriptionUsageRequest,
                output=api_dot_v1_dot_payment__pb2.PaymentServiceGetSubscriptionUsageResponse,
                allowed_methods=("POST",),
            ),
            "GetInvoices": Endpoint[api_dot_v1_dot_payment__pb2.PaymentServiceGetInvoicesRequest, api_dot_v1_dot_payment__pb2.PaymentServiceGetInvoicesResponse](
                service_name="PaymentService",
                name="GetInvoices",
                function=getattr(service, "GetInvoices"),
                input=api_dot_v1_dot_payment__pb2.PaymentServiceGetInvoicesRequest,
                output=api_dot_v1_dot_payment__pb2.PaymentServiceGetInvoicesResponse,
                allowed_methods=("POST",),
            ),
            "GetDefaultPrices": Endpoint[api_dot_v1_dot_payment__pb2.PaymentServiceGetDefaultPricesRequest, api_dot_v1_dot_payment__pb2.PaymentServiceGetDefaultPricesResponse](
                service_name="PaymentService",
                name="GetDefaultPrices",
                function=getattr(service, "GetDefaultPrices"),
                input=api_dot_v1_dot_payment__pb2.PaymentServiceGetDefaultPricesRequest,
                output=api_dot_v1_dot_payment__pb2.PaymentServiceGetDefaultPricesResponse,
                allowed_methods=("POST",),
            ),
            "HasChargeableResources": Endpoint[api_dot_v1_dot_payment__pb2.PaymentServiceHasChargeableResourcesRequest, api_dot_v1_dot_payment__pb2.PaymentServiceHasChargeableResourcesResponse](
                service_name="PaymentService",
                name="HasChargeableResources",
                function=getattr(service, "HasChargeableResources"),
                input=api_dot_v1_dot_payment__pb2.PaymentServiceHasChargeableResourcesRequest,
                output=api_dot_v1_dot_payment__pb2.PaymentServiceHasChargeableResourcesResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "api.v1.PaymentService"


class PaymentServiceSync(Protocol):
    def CreateOrUpdateCustomer(self, req: api_dot_v1_dot_payment__pb2.PaymentServiceCreateOrUpdateCustomerRequest, ctx: ServiceContext) -> api_dot_v1_dot_payment__pb2.PaymentServiceCreateOrUpdateCustomerResponse: ...
    def GetCustomer(self, req: api_dot_v1_dot_payment__pb2.PaymentServiceGetCustomerRequest, ctx: ServiceContext) -> api_dot_v1_dot_payment__pb2.PaymentServiceGetCustomerResponse: ...
    def CheckIfCustomerExists(self, req: api_dot_v1_dot_payment__pb2.PaymentServiceCheckIfCustomerExistsRequest, ctx: ServiceContext) -> api_dot_v1_dot_payment__pb2.PaymentServiceCheckIfCustomerExistsResponse: ...
    def HasPaymentMethod(self, req: api_dot_v1_dot_payment__pb2.PaymentServiceHasPaymentMethodRequest, ctx: ServiceContext) -> api_dot_v1_dot_payment__pb2.PaymentServiceHasPaymentMethodResponse: ...
    def DeletePaymentMethod(self, req: api_dot_v1_dot_payment__pb2.PaymentServiceDeletePaymentMethodRequest, ctx: ServiceContext) -> api_dot_v1_dot_payment__pb2.PaymentServiceDeletePaymentMethodResponse: ...
    def GetSubscriptionUsage(self, req: api_dot_v1_dot_payment__pb2.PaymentServiceGetSubscriptionUsageRequest, ctx: ServiceContext) -> api_dot_v1_dot_payment__pb2.PaymentServiceGetSubscriptionUsageResponse: ...
    def GetInvoices(self, req: api_dot_v1_dot_payment__pb2.PaymentServiceGetInvoicesRequest, ctx: ServiceContext) -> api_dot_v1_dot_payment__pb2.PaymentServiceGetInvoicesResponse: ...
    def GetDefaultPrices(self, req: api_dot_v1_dot_payment__pb2.PaymentServiceGetDefaultPricesRequest, ctx: ServiceContext) -> api_dot_v1_dot_payment__pb2.PaymentServiceGetDefaultPricesResponse: ...
    def HasChargeableResources(self, req: api_dot_v1_dot_payment__pb2.PaymentServiceHasChargeableResourcesRequest, ctx: ServiceContext) -> api_dot_v1_dot_payment__pb2.PaymentServiceHasChargeableResourcesResponse: ...


class PaymentServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: PaymentServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/api.v1.PaymentService"
        self._endpoints = {
            "CreateOrUpdateCustomer": Endpoint[api_dot_v1_dot_payment__pb2.PaymentServiceCreateOrUpdateCustomerRequest, api_dot_v1_dot_payment__pb2.PaymentServiceCreateOrUpdateCustomerResponse](
                service_name="PaymentService",
                name="CreateOrUpdateCustomer",
                function=getattr(service, "CreateOrUpdateCustomer"),
                input=api_dot_v1_dot_payment__pb2.PaymentServiceCreateOrUpdateCustomerRequest,
                output=api_dot_v1_dot_payment__pb2.PaymentServiceCreateOrUpdateCustomerResponse,
                allowed_methods=("POST",),
            ),
            "GetCustomer": Endpoint[api_dot_v1_dot_payment__pb2.PaymentServiceGetCustomerRequest, api_dot_v1_dot_payment__pb2.PaymentServiceGetCustomerResponse](
                service_name="PaymentService",
                name="GetCustomer",
                function=getattr(service, "GetCustomer"),
                input=api_dot_v1_dot_payment__pb2.PaymentServiceGetCustomerRequest,
                output=api_dot_v1_dot_payment__pb2.PaymentServiceGetCustomerResponse,
                allowed_methods=("POST",),
            ),
            "CheckIfCustomerExists": Endpoint[api_dot_v1_dot_payment__pb2.PaymentServiceCheckIfCustomerExistsRequest, api_dot_v1_dot_payment__pb2.PaymentServiceCheckIfCustomerExistsResponse](
                service_name="PaymentService",
                name="CheckIfCustomerExists",
                function=getattr(service, "CheckIfCustomerExists"),
                input=api_dot_v1_dot_payment__pb2.PaymentServiceCheckIfCustomerExistsRequest,
                output=api_dot_v1_dot_payment__pb2.PaymentServiceCheckIfCustomerExistsResponse,
                allowed_methods=("POST",),
            ),
            "HasPaymentMethod": Endpoint[api_dot_v1_dot_payment__pb2.PaymentServiceHasPaymentMethodRequest, api_dot_v1_dot_payment__pb2.PaymentServiceHasPaymentMethodResponse](
                service_name="PaymentService",
                name="HasPaymentMethod",
                function=getattr(service, "HasPaymentMethod"),
                input=api_dot_v1_dot_payment__pb2.PaymentServiceHasPaymentMethodRequest,
                output=api_dot_v1_dot_payment__pb2.PaymentServiceHasPaymentMethodResponse,
                allowed_methods=("POST",),
            ),
            "DeletePaymentMethod": Endpoint[api_dot_v1_dot_payment__pb2.PaymentServiceDeletePaymentMethodRequest, api_dot_v1_dot_payment__pb2.PaymentServiceDeletePaymentMethodResponse](
                service_name="PaymentService",
                name="DeletePaymentMethod",
                function=getattr(service, "DeletePaymentMethod"),
                input=api_dot_v1_dot_payment__pb2.PaymentServiceDeletePaymentMethodRequest,
                output=api_dot_v1_dot_payment__pb2.PaymentServiceDeletePaymentMethodResponse,
                allowed_methods=("POST",),
            ),
            "GetSubscriptionUsage": Endpoint[api_dot_v1_dot_payment__pb2.PaymentServiceGetSubscriptionUsageRequest, api_dot_v1_dot_payment__pb2.PaymentServiceGetSubscriptionUsageResponse](
                service_name="PaymentService",
                name="GetSubscriptionUsage",
                function=getattr(service, "GetSubscriptionUsage"),
                input=api_dot_v1_dot_payment__pb2.PaymentServiceGetSubscriptionUsageRequest,
                output=api_dot_v1_dot_payment__pb2.PaymentServiceGetSubscriptionUsageResponse,
                allowed_methods=("POST",),
            ),
            "GetInvoices": Endpoint[api_dot_v1_dot_payment__pb2.PaymentServiceGetInvoicesRequest, api_dot_v1_dot_payment__pb2.PaymentServiceGetInvoicesResponse](
                service_name="PaymentService",
                name="GetInvoices",
                function=getattr(service, "GetInvoices"),
                input=api_dot_v1_dot_payment__pb2.PaymentServiceGetInvoicesRequest,
                output=api_dot_v1_dot_payment__pb2.PaymentServiceGetInvoicesResponse,
                allowed_methods=("POST",),
            ),
            "GetDefaultPrices": Endpoint[api_dot_v1_dot_payment__pb2.PaymentServiceGetDefaultPricesRequest, api_dot_v1_dot_payment__pb2.PaymentServiceGetDefaultPricesResponse](
                service_name="PaymentService",
                name="GetDefaultPrices",
                function=getattr(service, "GetDefaultPrices"),
                input=api_dot_v1_dot_payment__pb2.PaymentServiceGetDefaultPricesRequest,
                output=api_dot_v1_dot_payment__pb2.PaymentServiceGetDefaultPricesResponse,
                allowed_methods=("POST",),
            ),
            "HasChargeableResources": Endpoint[api_dot_v1_dot_payment__pb2.PaymentServiceHasChargeableResourcesRequest, api_dot_v1_dot_payment__pb2.PaymentServiceHasChargeableResourcesResponse](
                service_name="PaymentService",
                name="HasChargeableResources",
                function=getattr(service, "HasChargeableResources"),
                input=api_dot_v1_dot_payment__pb2.PaymentServiceHasChargeableResourcesRequest,
                output=api_dot_v1_dot_payment__pb2.PaymentServiceHasChargeableResourcesResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "api.v1.PaymentService"


class PaymentServiceClient(ConnecpyClient):
    def CreateOrUpdateCustomer(
        self,
        request: api_dot_v1_dot_payment__pb2.PaymentServiceCreateOrUpdateCustomerRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_payment__pb2.PaymentServiceCreateOrUpdateCustomerResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.PaymentService/CreateOrUpdateCustomer",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_payment__pb2.PaymentServiceCreateOrUpdateCustomerResponse,
            method=method,
            **kwargs,
        )

    def GetCustomer(
        self,
        request: api_dot_v1_dot_payment__pb2.PaymentServiceGetCustomerRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_payment__pb2.PaymentServiceGetCustomerResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.PaymentService/GetCustomer",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_payment__pb2.PaymentServiceGetCustomerResponse,
            method=method,
            **kwargs,
        )

    def CheckIfCustomerExists(
        self,
        request: api_dot_v1_dot_payment__pb2.PaymentServiceCheckIfCustomerExistsRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_payment__pb2.PaymentServiceCheckIfCustomerExistsResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.PaymentService/CheckIfCustomerExists",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_payment__pb2.PaymentServiceCheckIfCustomerExistsResponse,
            method=method,
            **kwargs,
        )

    def HasPaymentMethod(
        self,
        request: api_dot_v1_dot_payment__pb2.PaymentServiceHasPaymentMethodRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_payment__pb2.PaymentServiceHasPaymentMethodResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.PaymentService/HasPaymentMethod",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_payment__pb2.PaymentServiceHasPaymentMethodResponse,
            method=method,
            **kwargs,
        )

    def DeletePaymentMethod(
        self,
        request: api_dot_v1_dot_payment__pb2.PaymentServiceDeletePaymentMethodRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_payment__pb2.PaymentServiceDeletePaymentMethodResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.PaymentService/DeletePaymentMethod",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_payment__pb2.PaymentServiceDeletePaymentMethodResponse,
            method=method,
            **kwargs,
        )

    def GetSubscriptionUsage(
        self,
        request: api_dot_v1_dot_payment__pb2.PaymentServiceGetSubscriptionUsageRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_payment__pb2.PaymentServiceGetSubscriptionUsageResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.PaymentService/GetSubscriptionUsage",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_payment__pb2.PaymentServiceGetSubscriptionUsageResponse,
            method=method,
            **kwargs,
        )

    def GetInvoices(
        self,
        request: api_dot_v1_dot_payment__pb2.PaymentServiceGetInvoicesRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_payment__pb2.PaymentServiceGetInvoicesResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.PaymentService/GetInvoices",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_payment__pb2.PaymentServiceGetInvoicesResponse,
            method=method,
            **kwargs,
        )

    def GetDefaultPrices(
        self,
        request: api_dot_v1_dot_payment__pb2.PaymentServiceGetDefaultPricesRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_payment__pb2.PaymentServiceGetDefaultPricesResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.PaymentService/GetDefaultPrices",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_payment__pb2.PaymentServiceGetDefaultPricesResponse,
            method=method,
            **kwargs,
        )

    def HasChargeableResources(
        self,
        request: api_dot_v1_dot_payment__pb2.PaymentServiceHasChargeableResourcesRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_payment__pb2.PaymentServiceHasChargeableResourcesResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.PaymentService/HasChargeableResources",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_payment__pb2.PaymentServiceHasChargeableResourcesResponse,
            method=method,
            **kwargs,
        )


class AsyncPaymentServiceClient(AsyncConnecpyClient):
    async def CreateOrUpdateCustomer(
        self,
        request: api_dot_v1_dot_payment__pb2.PaymentServiceCreateOrUpdateCustomerRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_payment__pb2.PaymentServiceCreateOrUpdateCustomerResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.PaymentService/CreateOrUpdateCustomer",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_payment__pb2.PaymentServiceCreateOrUpdateCustomerResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def GetCustomer(
        self,
        request: api_dot_v1_dot_payment__pb2.PaymentServiceGetCustomerRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_payment__pb2.PaymentServiceGetCustomerResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.PaymentService/GetCustomer",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_payment__pb2.PaymentServiceGetCustomerResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def CheckIfCustomerExists(
        self,
        request: api_dot_v1_dot_payment__pb2.PaymentServiceCheckIfCustomerExistsRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_payment__pb2.PaymentServiceCheckIfCustomerExistsResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.PaymentService/CheckIfCustomerExists",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_payment__pb2.PaymentServiceCheckIfCustomerExistsResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def HasPaymentMethod(
        self,
        request: api_dot_v1_dot_payment__pb2.PaymentServiceHasPaymentMethodRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_payment__pb2.PaymentServiceHasPaymentMethodResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.PaymentService/HasPaymentMethod",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_payment__pb2.PaymentServiceHasPaymentMethodResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def DeletePaymentMethod(
        self,
        request: api_dot_v1_dot_payment__pb2.PaymentServiceDeletePaymentMethodRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_payment__pb2.PaymentServiceDeletePaymentMethodResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.PaymentService/DeletePaymentMethod",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_payment__pb2.PaymentServiceDeletePaymentMethodResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def GetSubscriptionUsage(
        self,
        request: api_dot_v1_dot_payment__pb2.PaymentServiceGetSubscriptionUsageRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_payment__pb2.PaymentServiceGetSubscriptionUsageResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.PaymentService/GetSubscriptionUsage",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_payment__pb2.PaymentServiceGetSubscriptionUsageResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def GetInvoices(
        self,
        request: api_dot_v1_dot_payment__pb2.PaymentServiceGetInvoicesRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_payment__pb2.PaymentServiceGetInvoicesResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.PaymentService/GetInvoices",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_payment__pb2.PaymentServiceGetInvoicesResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def GetDefaultPrices(
        self,
        request: api_dot_v1_dot_payment__pb2.PaymentServiceGetDefaultPricesRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_payment__pb2.PaymentServiceGetDefaultPricesResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.PaymentService/GetDefaultPrices",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_payment__pb2.PaymentServiceGetDefaultPricesResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def HasChargeableResources(
        self,
        request: api_dot_v1_dot_payment__pb2.PaymentServiceHasChargeableResourcesRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_payment__pb2.PaymentServiceHasChargeableResourcesResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.PaymentService/HasChargeableResources",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_payment__pb2.PaymentServiceHasChargeableResourcesResponse,
            method=method,
            session=session,
            **kwargs,
        )
