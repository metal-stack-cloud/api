# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: api/v1/cluster.proto

from typing import Optional, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext
import metalstackcloud.api.v1.cluster_pb2 as api_dot_v1_dot_cluster__pb2


class ClusterService(Protocol):
    async def Create(self, req: api_dot_v1_dot_cluster__pb2.ClusterServiceCreateRequest, ctx: ServiceContext) -> api_dot_v1_dot_cluster__pb2.ClusterServiceCreateResponse: ...
    async def Get(self, req: api_dot_v1_dot_cluster__pb2.ClusterServiceGetRequest, ctx: ServiceContext) -> api_dot_v1_dot_cluster__pb2.ClusterServiceGetResponse: ...
    async def List(self, req: api_dot_v1_dot_cluster__pb2.ClusterServiceListRequest, ctx: ServiceContext) -> api_dot_v1_dot_cluster__pb2.ClusterServiceListResponse: ...
    async def WatchStatus(self, req: api_dot_v1_dot_cluster__pb2.ClusterServiceWatchStatusRequest, ctx: ServiceContext) -> api_dot_v1_dot_cluster__pb2.ClusterServiceWatchStatusResponse: ...
    async def Delete(self, req: api_dot_v1_dot_cluster__pb2.ClusterServiceDeleteRequest, ctx: ServiceContext) -> api_dot_v1_dot_cluster__pb2.ClusterServiceDeleteResponse: ...
    async def Update(self, req: api_dot_v1_dot_cluster__pb2.ClusterServiceUpdateRequest, ctx: ServiceContext) -> api_dot_v1_dot_cluster__pb2.ClusterServiceUpdateResponse: ...
    async def GetCredentials(self, req: api_dot_v1_dot_cluster__pb2.ClusterServiceGetCredentialsRequest, ctx: ServiceContext) -> api_dot_v1_dot_cluster__pb2.ClusterServiceGetCredentialsResponse: ...
    async def Operate(self, req: api_dot_v1_dot_cluster__pb2.ClusterServiceOperateRequest, ctx: ServiceContext) -> api_dot_v1_dot_cluster__pb2.ClusterServiceOperateResponse: ...


class ClusterServiceServer(ConnecpyServer):
    def __init__(self, *, service: ClusterService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/api.v1.ClusterService"
        self._endpoints = {
            "Create": Endpoint[api_dot_v1_dot_cluster__pb2.ClusterServiceCreateRequest, api_dot_v1_dot_cluster__pb2.ClusterServiceCreateResponse](
                service_name="ClusterService",
                name="Create",
                function=getattr(service, "Create"),
                input=api_dot_v1_dot_cluster__pb2.ClusterServiceCreateRequest,
                output=api_dot_v1_dot_cluster__pb2.ClusterServiceCreateResponse,
                allowed_methods=("POST",),
            ),
            "Get": Endpoint[api_dot_v1_dot_cluster__pb2.ClusterServiceGetRequest, api_dot_v1_dot_cluster__pb2.ClusterServiceGetResponse](
                service_name="ClusterService",
                name="Get",
                function=getattr(service, "Get"),
                input=api_dot_v1_dot_cluster__pb2.ClusterServiceGetRequest,
                output=api_dot_v1_dot_cluster__pb2.ClusterServiceGetResponse,
                allowed_methods=("POST",),
            ),
            "List": Endpoint[api_dot_v1_dot_cluster__pb2.ClusterServiceListRequest, api_dot_v1_dot_cluster__pb2.ClusterServiceListResponse](
                service_name="ClusterService",
                name="List",
                function=getattr(service, "List"),
                input=api_dot_v1_dot_cluster__pb2.ClusterServiceListRequest,
                output=api_dot_v1_dot_cluster__pb2.ClusterServiceListResponse,
                allowed_methods=("POST",),
            ),
            "WatchStatus": Endpoint[api_dot_v1_dot_cluster__pb2.ClusterServiceWatchStatusRequest, api_dot_v1_dot_cluster__pb2.ClusterServiceWatchStatusResponse](
                service_name="ClusterService",
                name="WatchStatus",
                function=getattr(service, "WatchStatus"),
                input=api_dot_v1_dot_cluster__pb2.ClusterServiceWatchStatusRequest,
                output=api_dot_v1_dot_cluster__pb2.ClusterServiceWatchStatusResponse,
                allowed_methods=("POST",),
            ),
            "Delete": Endpoint[api_dot_v1_dot_cluster__pb2.ClusterServiceDeleteRequest, api_dot_v1_dot_cluster__pb2.ClusterServiceDeleteResponse](
                service_name="ClusterService",
                name="Delete",
                function=getattr(service, "Delete"),
                input=api_dot_v1_dot_cluster__pb2.ClusterServiceDeleteRequest,
                output=api_dot_v1_dot_cluster__pb2.ClusterServiceDeleteResponse,
                allowed_methods=("POST",),
            ),
            "Update": Endpoint[api_dot_v1_dot_cluster__pb2.ClusterServiceUpdateRequest, api_dot_v1_dot_cluster__pb2.ClusterServiceUpdateResponse](
                service_name="ClusterService",
                name="Update",
                function=getattr(service, "Update"),
                input=api_dot_v1_dot_cluster__pb2.ClusterServiceUpdateRequest,
                output=api_dot_v1_dot_cluster__pb2.ClusterServiceUpdateResponse,
                allowed_methods=("POST",),
            ),
            "GetCredentials": Endpoint[api_dot_v1_dot_cluster__pb2.ClusterServiceGetCredentialsRequest, api_dot_v1_dot_cluster__pb2.ClusterServiceGetCredentialsResponse](
                service_name="ClusterService",
                name="GetCredentials",
                function=getattr(service, "GetCredentials"),
                input=api_dot_v1_dot_cluster__pb2.ClusterServiceGetCredentialsRequest,
                output=api_dot_v1_dot_cluster__pb2.ClusterServiceGetCredentialsResponse,
                allowed_methods=("POST",),
            ),
            "Operate": Endpoint[api_dot_v1_dot_cluster__pb2.ClusterServiceOperateRequest, api_dot_v1_dot_cluster__pb2.ClusterServiceOperateResponse](
                service_name="ClusterService",
                name="Operate",
                function=getattr(service, "Operate"),
                input=api_dot_v1_dot_cluster__pb2.ClusterServiceOperateRequest,
                output=api_dot_v1_dot_cluster__pb2.ClusterServiceOperateResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "api.v1.ClusterService"


class ClusterServiceSync(Protocol):
    def Create(self, req: api_dot_v1_dot_cluster__pb2.ClusterServiceCreateRequest, ctx: ServiceContext) -> api_dot_v1_dot_cluster__pb2.ClusterServiceCreateResponse: ...
    def Get(self, req: api_dot_v1_dot_cluster__pb2.ClusterServiceGetRequest, ctx: ServiceContext) -> api_dot_v1_dot_cluster__pb2.ClusterServiceGetResponse: ...
    def List(self, req: api_dot_v1_dot_cluster__pb2.ClusterServiceListRequest, ctx: ServiceContext) -> api_dot_v1_dot_cluster__pb2.ClusterServiceListResponse: ...
    def WatchStatus(self, req: api_dot_v1_dot_cluster__pb2.ClusterServiceWatchStatusRequest, ctx: ServiceContext) -> api_dot_v1_dot_cluster__pb2.ClusterServiceWatchStatusResponse: ...
    def Delete(self, req: api_dot_v1_dot_cluster__pb2.ClusterServiceDeleteRequest, ctx: ServiceContext) -> api_dot_v1_dot_cluster__pb2.ClusterServiceDeleteResponse: ...
    def Update(self, req: api_dot_v1_dot_cluster__pb2.ClusterServiceUpdateRequest, ctx: ServiceContext) -> api_dot_v1_dot_cluster__pb2.ClusterServiceUpdateResponse: ...
    def GetCredentials(self, req: api_dot_v1_dot_cluster__pb2.ClusterServiceGetCredentialsRequest, ctx: ServiceContext) -> api_dot_v1_dot_cluster__pb2.ClusterServiceGetCredentialsResponse: ...
    def Operate(self, req: api_dot_v1_dot_cluster__pb2.ClusterServiceOperateRequest, ctx: ServiceContext) -> api_dot_v1_dot_cluster__pb2.ClusterServiceOperateResponse: ...


class ClusterServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: ClusterServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/api.v1.ClusterService"
        self._endpoints = {
            "Create": Endpoint[api_dot_v1_dot_cluster__pb2.ClusterServiceCreateRequest, api_dot_v1_dot_cluster__pb2.ClusterServiceCreateResponse](
                service_name="ClusterService",
                name="Create",
                function=getattr(service, "Create"),
                input=api_dot_v1_dot_cluster__pb2.ClusterServiceCreateRequest,
                output=api_dot_v1_dot_cluster__pb2.ClusterServiceCreateResponse,
                allowed_methods=("POST",),
            ),
            "Get": Endpoint[api_dot_v1_dot_cluster__pb2.ClusterServiceGetRequest, api_dot_v1_dot_cluster__pb2.ClusterServiceGetResponse](
                service_name="ClusterService",
                name="Get",
                function=getattr(service, "Get"),
                input=api_dot_v1_dot_cluster__pb2.ClusterServiceGetRequest,
                output=api_dot_v1_dot_cluster__pb2.ClusterServiceGetResponse,
                allowed_methods=("POST",),
            ),
            "List": Endpoint[api_dot_v1_dot_cluster__pb2.ClusterServiceListRequest, api_dot_v1_dot_cluster__pb2.ClusterServiceListResponse](
                service_name="ClusterService",
                name="List",
                function=getattr(service, "List"),
                input=api_dot_v1_dot_cluster__pb2.ClusterServiceListRequest,
                output=api_dot_v1_dot_cluster__pb2.ClusterServiceListResponse,
                allowed_methods=("POST",),
            ),
            "WatchStatus": Endpoint[api_dot_v1_dot_cluster__pb2.ClusterServiceWatchStatusRequest, api_dot_v1_dot_cluster__pb2.ClusterServiceWatchStatusResponse](
                service_name="ClusterService",
                name="WatchStatus",
                function=getattr(service, "WatchStatus"),
                input=api_dot_v1_dot_cluster__pb2.ClusterServiceWatchStatusRequest,
                output=api_dot_v1_dot_cluster__pb2.ClusterServiceWatchStatusResponse,
                allowed_methods=("POST",),
            ),
            "Delete": Endpoint[api_dot_v1_dot_cluster__pb2.ClusterServiceDeleteRequest, api_dot_v1_dot_cluster__pb2.ClusterServiceDeleteResponse](
                service_name="ClusterService",
                name="Delete",
                function=getattr(service, "Delete"),
                input=api_dot_v1_dot_cluster__pb2.ClusterServiceDeleteRequest,
                output=api_dot_v1_dot_cluster__pb2.ClusterServiceDeleteResponse,
                allowed_methods=("POST",),
            ),
            "Update": Endpoint[api_dot_v1_dot_cluster__pb2.ClusterServiceUpdateRequest, api_dot_v1_dot_cluster__pb2.ClusterServiceUpdateResponse](
                service_name="ClusterService",
                name="Update",
                function=getattr(service, "Update"),
                input=api_dot_v1_dot_cluster__pb2.ClusterServiceUpdateRequest,
                output=api_dot_v1_dot_cluster__pb2.ClusterServiceUpdateResponse,
                allowed_methods=("POST",),
            ),
            "GetCredentials": Endpoint[api_dot_v1_dot_cluster__pb2.ClusterServiceGetCredentialsRequest, api_dot_v1_dot_cluster__pb2.ClusterServiceGetCredentialsResponse](
                service_name="ClusterService",
                name="GetCredentials",
                function=getattr(service, "GetCredentials"),
                input=api_dot_v1_dot_cluster__pb2.ClusterServiceGetCredentialsRequest,
                output=api_dot_v1_dot_cluster__pb2.ClusterServiceGetCredentialsResponse,
                allowed_methods=("POST",),
            ),
            "Operate": Endpoint[api_dot_v1_dot_cluster__pb2.ClusterServiceOperateRequest, api_dot_v1_dot_cluster__pb2.ClusterServiceOperateResponse](
                service_name="ClusterService",
                name="Operate",
                function=getattr(service, "Operate"),
                input=api_dot_v1_dot_cluster__pb2.ClusterServiceOperateRequest,
                output=api_dot_v1_dot_cluster__pb2.ClusterServiceOperateResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "api.v1.ClusterService"


class ClusterServiceClient(ConnecpyClient):
    def Create(
        self,
        request: api_dot_v1_dot_cluster__pb2.ClusterServiceCreateRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_cluster__pb2.ClusterServiceCreateResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.ClusterService/Create",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_cluster__pb2.ClusterServiceCreateResponse,
            method=method,
            **kwargs,
        )

    def Get(
        self,
        request: api_dot_v1_dot_cluster__pb2.ClusterServiceGetRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_cluster__pb2.ClusterServiceGetResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.ClusterService/Get",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_cluster__pb2.ClusterServiceGetResponse,
            method=method,
            **kwargs,
        )

    def List(
        self,
        request: api_dot_v1_dot_cluster__pb2.ClusterServiceListRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_cluster__pb2.ClusterServiceListResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.ClusterService/List",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_cluster__pb2.ClusterServiceListResponse,
            method=method,
            **kwargs,
        )

    def WatchStatus(
        self,
        request: api_dot_v1_dot_cluster__pb2.ClusterServiceWatchStatusRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_cluster__pb2.ClusterServiceWatchStatusResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.ClusterService/WatchStatus",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_cluster__pb2.ClusterServiceWatchStatusResponse,
            method=method,
            **kwargs,
        )

    def Delete(
        self,
        request: api_dot_v1_dot_cluster__pb2.ClusterServiceDeleteRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_cluster__pb2.ClusterServiceDeleteResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.ClusterService/Delete",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_cluster__pb2.ClusterServiceDeleteResponse,
            method=method,
            **kwargs,
        )

    def Update(
        self,
        request: api_dot_v1_dot_cluster__pb2.ClusterServiceUpdateRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_cluster__pb2.ClusterServiceUpdateResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.ClusterService/Update",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_cluster__pb2.ClusterServiceUpdateResponse,
            method=method,
            **kwargs,
        )

    def GetCredentials(
        self,
        request: api_dot_v1_dot_cluster__pb2.ClusterServiceGetCredentialsRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_cluster__pb2.ClusterServiceGetCredentialsResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.ClusterService/GetCredentials",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_cluster__pb2.ClusterServiceGetCredentialsResponse,
            method=method,
            **kwargs,
        )

    def Operate(
        self,
        request: api_dot_v1_dot_cluster__pb2.ClusterServiceOperateRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_cluster__pb2.ClusterServiceOperateResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.ClusterService/Operate",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_cluster__pb2.ClusterServiceOperateResponse,
            method=method,
            **kwargs,
        )


class AsyncClusterServiceClient(AsyncConnecpyClient):
    async def Create(
        self,
        request: api_dot_v1_dot_cluster__pb2.ClusterServiceCreateRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_cluster__pb2.ClusterServiceCreateResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.ClusterService/Create",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_cluster__pb2.ClusterServiceCreateResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Get(
        self,
        request: api_dot_v1_dot_cluster__pb2.ClusterServiceGetRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_cluster__pb2.ClusterServiceGetResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.ClusterService/Get",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_cluster__pb2.ClusterServiceGetResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def List(
        self,
        request: api_dot_v1_dot_cluster__pb2.ClusterServiceListRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_cluster__pb2.ClusterServiceListResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.ClusterService/List",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_cluster__pb2.ClusterServiceListResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def WatchStatus(
        self,
        request: api_dot_v1_dot_cluster__pb2.ClusterServiceWatchStatusRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_cluster__pb2.ClusterServiceWatchStatusResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.ClusterService/WatchStatus",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_cluster__pb2.ClusterServiceWatchStatusResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Delete(
        self,
        request: api_dot_v1_dot_cluster__pb2.ClusterServiceDeleteRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_cluster__pb2.ClusterServiceDeleteResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.ClusterService/Delete",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_cluster__pb2.ClusterServiceDeleteResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Update(
        self,
        request: api_dot_v1_dot_cluster__pb2.ClusterServiceUpdateRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_cluster__pb2.ClusterServiceUpdateResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.ClusterService/Update",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_cluster__pb2.ClusterServiceUpdateResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def GetCredentials(
        self,
        request: api_dot_v1_dot_cluster__pb2.ClusterServiceGetCredentialsRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_cluster__pb2.ClusterServiceGetCredentialsResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.ClusterService/GetCredentials",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_cluster__pb2.ClusterServiceGetCredentialsResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Operate(
        self,
        request: api_dot_v1_dot_cluster__pb2.ClusterServiceOperateRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_cluster__pb2.ClusterServiceOperateResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.ClusterService/Operate",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_cluster__pb2.ClusterServiceOperateResponse,
            method=method,
            session=session,
            **kwargs,
        )
