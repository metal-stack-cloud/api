# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: api/v1/method.proto

from typing import Optional, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext
import metalstackcloud.api.v1.method_pb2 as api_dot_v1_dot_method__pb2


class MethodService(Protocol):
    async def List(self, req: api_dot_v1_dot_method__pb2.MethodServiceListRequest, ctx: ServiceContext) -> api_dot_v1_dot_method__pb2.MethodServiceListResponse: ...
    async def TokenScopedList(self, req: api_dot_v1_dot_method__pb2.MethodServiceTokenScopedListRequest, ctx: ServiceContext) -> api_dot_v1_dot_method__pb2.MethodServiceTokenScopedListResponse: ...


class MethodServiceServer(ConnecpyServer):
    def __init__(self, *, service: MethodService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/api.v1.MethodService"
        self._endpoints = {
            "List": Endpoint[api_dot_v1_dot_method__pb2.MethodServiceListRequest, api_dot_v1_dot_method__pb2.MethodServiceListResponse](
                service_name="MethodService",
                name="List",
                function=getattr(service, "List"),
                input=api_dot_v1_dot_method__pb2.MethodServiceListRequest,
                output=api_dot_v1_dot_method__pb2.MethodServiceListResponse,
                allowed_methods=("POST",),
            ),
            "TokenScopedList": Endpoint[api_dot_v1_dot_method__pb2.MethodServiceTokenScopedListRequest, api_dot_v1_dot_method__pb2.MethodServiceTokenScopedListResponse](
                service_name="MethodService",
                name="TokenScopedList",
                function=getattr(service, "TokenScopedList"),
                input=api_dot_v1_dot_method__pb2.MethodServiceTokenScopedListRequest,
                output=api_dot_v1_dot_method__pb2.MethodServiceTokenScopedListResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "api.v1.MethodService"


class MethodServiceSync(Protocol):
    def List(self, req: api_dot_v1_dot_method__pb2.MethodServiceListRequest, ctx: ServiceContext) -> api_dot_v1_dot_method__pb2.MethodServiceListResponse: ...
    def TokenScopedList(self, req: api_dot_v1_dot_method__pb2.MethodServiceTokenScopedListRequest, ctx: ServiceContext) -> api_dot_v1_dot_method__pb2.MethodServiceTokenScopedListResponse: ...


class MethodServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: MethodServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/api.v1.MethodService"
        self._endpoints = {
            "List": Endpoint[api_dot_v1_dot_method__pb2.MethodServiceListRequest, api_dot_v1_dot_method__pb2.MethodServiceListResponse](
                service_name="MethodService",
                name="List",
                function=getattr(service, "List"),
                input=api_dot_v1_dot_method__pb2.MethodServiceListRequest,
                output=api_dot_v1_dot_method__pb2.MethodServiceListResponse,
                allowed_methods=("POST",),
            ),
            "TokenScopedList": Endpoint[api_dot_v1_dot_method__pb2.MethodServiceTokenScopedListRequest, api_dot_v1_dot_method__pb2.MethodServiceTokenScopedListResponse](
                service_name="MethodService",
                name="TokenScopedList",
                function=getattr(service, "TokenScopedList"),
                input=api_dot_v1_dot_method__pb2.MethodServiceTokenScopedListRequest,
                output=api_dot_v1_dot_method__pb2.MethodServiceTokenScopedListResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "api.v1.MethodService"


class MethodServiceClient(ConnecpyClient):
    def List(
        self,
        request: api_dot_v1_dot_method__pb2.MethodServiceListRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_method__pb2.MethodServiceListResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.MethodService/List",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_method__pb2.MethodServiceListResponse,
            method=method,
            **kwargs,
        )

    def TokenScopedList(
        self,
        request: api_dot_v1_dot_method__pb2.MethodServiceTokenScopedListRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_method__pb2.MethodServiceTokenScopedListResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.MethodService/TokenScopedList",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_method__pb2.MethodServiceTokenScopedListResponse,
            method=method,
            **kwargs,
        )


class AsyncMethodServiceClient(AsyncConnecpyClient):
    async def List(
        self,
        request: api_dot_v1_dot_method__pb2.MethodServiceListRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_method__pb2.MethodServiceListResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.MethodService/List",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_method__pb2.MethodServiceListResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def TokenScopedList(
        self,
        request: api_dot_v1_dot_method__pb2.MethodServiceTokenScopedListRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_method__pb2.MethodServiceTokenScopedListResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.MethodService/TokenScopedList",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_method__pb2.MethodServiceTokenScopedListResponse,
            method=method,
            session=session,
            **kwargs,
        )
