# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: api/v1/ip.proto

from typing import Optional, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext
import metalstackcloud.api.v1.ip_pb2 as api_dot_v1_dot_ip__pb2


class IPService(Protocol):
    async def Get(self, req: api_dot_v1_dot_ip__pb2.IPServiceGetRequest, ctx: ServiceContext) -> api_dot_v1_dot_ip__pb2.IPServiceGetResponse: ...
    async def Allocate(self, req: api_dot_v1_dot_ip__pb2.IPServiceAllocateRequest, ctx: ServiceContext) -> api_dot_v1_dot_ip__pb2.IPServiceAllocateResponse: ...
    async def Update(self, req: api_dot_v1_dot_ip__pb2.IPServiceUpdateRequest, ctx: ServiceContext) -> api_dot_v1_dot_ip__pb2.IPServiceUpdateResponse: ...
    async def List(self, req: api_dot_v1_dot_ip__pb2.IPServiceListRequest, ctx: ServiceContext) -> api_dot_v1_dot_ip__pb2.IPServiceListResponse: ...
    async def Delete(self, req: api_dot_v1_dot_ip__pb2.IPServiceDeleteRequest, ctx: ServiceContext) -> api_dot_v1_dot_ip__pb2.IPServiceDeleteResponse: ...


class IPServiceServer(ConnecpyServer):
    def __init__(self, *, service: IPService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/api.v1.IPService"
        self._endpoints = {
            "Get": Endpoint[api_dot_v1_dot_ip__pb2.IPServiceGetRequest, api_dot_v1_dot_ip__pb2.IPServiceGetResponse](
                service_name="IPService",
                name="Get",
                function=getattr(service, "Get"),
                input=api_dot_v1_dot_ip__pb2.IPServiceGetRequest,
                output=api_dot_v1_dot_ip__pb2.IPServiceGetResponse,
                allowed_methods=("POST",),
            ),
            "Allocate": Endpoint[api_dot_v1_dot_ip__pb2.IPServiceAllocateRequest, api_dot_v1_dot_ip__pb2.IPServiceAllocateResponse](
                service_name="IPService",
                name="Allocate",
                function=getattr(service, "Allocate"),
                input=api_dot_v1_dot_ip__pb2.IPServiceAllocateRequest,
                output=api_dot_v1_dot_ip__pb2.IPServiceAllocateResponse,
                allowed_methods=("POST",),
            ),
            "Update": Endpoint[api_dot_v1_dot_ip__pb2.IPServiceUpdateRequest, api_dot_v1_dot_ip__pb2.IPServiceUpdateResponse](
                service_name="IPService",
                name="Update",
                function=getattr(service, "Update"),
                input=api_dot_v1_dot_ip__pb2.IPServiceUpdateRequest,
                output=api_dot_v1_dot_ip__pb2.IPServiceUpdateResponse,
                allowed_methods=("POST",),
            ),
            "List": Endpoint[api_dot_v1_dot_ip__pb2.IPServiceListRequest, api_dot_v1_dot_ip__pb2.IPServiceListResponse](
                service_name="IPService",
                name="List",
                function=getattr(service, "List"),
                input=api_dot_v1_dot_ip__pb2.IPServiceListRequest,
                output=api_dot_v1_dot_ip__pb2.IPServiceListResponse,
                allowed_methods=("POST",),
            ),
            "Delete": Endpoint[api_dot_v1_dot_ip__pb2.IPServiceDeleteRequest, api_dot_v1_dot_ip__pb2.IPServiceDeleteResponse](
                service_name="IPService",
                name="Delete",
                function=getattr(service, "Delete"),
                input=api_dot_v1_dot_ip__pb2.IPServiceDeleteRequest,
                output=api_dot_v1_dot_ip__pb2.IPServiceDeleteResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "api.v1.IPService"


class IPServiceSync(Protocol):
    def Get(self, req: api_dot_v1_dot_ip__pb2.IPServiceGetRequest, ctx: ServiceContext) -> api_dot_v1_dot_ip__pb2.IPServiceGetResponse: ...
    def Allocate(self, req: api_dot_v1_dot_ip__pb2.IPServiceAllocateRequest, ctx: ServiceContext) -> api_dot_v1_dot_ip__pb2.IPServiceAllocateResponse: ...
    def Update(self, req: api_dot_v1_dot_ip__pb2.IPServiceUpdateRequest, ctx: ServiceContext) -> api_dot_v1_dot_ip__pb2.IPServiceUpdateResponse: ...
    def List(self, req: api_dot_v1_dot_ip__pb2.IPServiceListRequest, ctx: ServiceContext) -> api_dot_v1_dot_ip__pb2.IPServiceListResponse: ...
    def Delete(self, req: api_dot_v1_dot_ip__pb2.IPServiceDeleteRequest, ctx: ServiceContext) -> api_dot_v1_dot_ip__pb2.IPServiceDeleteResponse: ...


class IPServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: IPServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/api.v1.IPService"
        self._endpoints = {
            "Get": Endpoint[api_dot_v1_dot_ip__pb2.IPServiceGetRequest, api_dot_v1_dot_ip__pb2.IPServiceGetResponse](
                service_name="IPService",
                name="Get",
                function=getattr(service, "Get"),
                input=api_dot_v1_dot_ip__pb2.IPServiceGetRequest,
                output=api_dot_v1_dot_ip__pb2.IPServiceGetResponse,
                allowed_methods=("POST",),
            ),
            "Allocate": Endpoint[api_dot_v1_dot_ip__pb2.IPServiceAllocateRequest, api_dot_v1_dot_ip__pb2.IPServiceAllocateResponse](
                service_name="IPService",
                name="Allocate",
                function=getattr(service, "Allocate"),
                input=api_dot_v1_dot_ip__pb2.IPServiceAllocateRequest,
                output=api_dot_v1_dot_ip__pb2.IPServiceAllocateResponse,
                allowed_methods=("POST",),
            ),
            "Update": Endpoint[api_dot_v1_dot_ip__pb2.IPServiceUpdateRequest, api_dot_v1_dot_ip__pb2.IPServiceUpdateResponse](
                service_name="IPService",
                name="Update",
                function=getattr(service, "Update"),
                input=api_dot_v1_dot_ip__pb2.IPServiceUpdateRequest,
                output=api_dot_v1_dot_ip__pb2.IPServiceUpdateResponse,
                allowed_methods=("POST",),
            ),
            "List": Endpoint[api_dot_v1_dot_ip__pb2.IPServiceListRequest, api_dot_v1_dot_ip__pb2.IPServiceListResponse](
                service_name="IPService",
                name="List",
                function=getattr(service, "List"),
                input=api_dot_v1_dot_ip__pb2.IPServiceListRequest,
                output=api_dot_v1_dot_ip__pb2.IPServiceListResponse,
                allowed_methods=("POST",),
            ),
            "Delete": Endpoint[api_dot_v1_dot_ip__pb2.IPServiceDeleteRequest, api_dot_v1_dot_ip__pb2.IPServiceDeleteResponse](
                service_name="IPService",
                name="Delete",
                function=getattr(service, "Delete"),
                input=api_dot_v1_dot_ip__pb2.IPServiceDeleteRequest,
                output=api_dot_v1_dot_ip__pb2.IPServiceDeleteResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "api.v1.IPService"


class IPServiceClient(ConnecpyClient):
    def Get(
        self,
        request: api_dot_v1_dot_ip__pb2.IPServiceGetRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_ip__pb2.IPServiceGetResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.IPService/Get",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_ip__pb2.IPServiceGetResponse,
            method=method,
            **kwargs,
        )

    def Allocate(
        self,
        request: api_dot_v1_dot_ip__pb2.IPServiceAllocateRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_ip__pb2.IPServiceAllocateResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.IPService/Allocate",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_ip__pb2.IPServiceAllocateResponse,
            method=method,
            **kwargs,
        )

    def Update(
        self,
        request: api_dot_v1_dot_ip__pb2.IPServiceUpdateRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_ip__pb2.IPServiceUpdateResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.IPService/Update",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_ip__pb2.IPServiceUpdateResponse,
            method=method,
            **kwargs,
        )

    def List(
        self,
        request: api_dot_v1_dot_ip__pb2.IPServiceListRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_ip__pb2.IPServiceListResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.IPService/List",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_ip__pb2.IPServiceListResponse,
            method=method,
            **kwargs,
        )

    def Delete(
        self,
        request: api_dot_v1_dot_ip__pb2.IPServiceDeleteRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_ip__pb2.IPServiceDeleteResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.IPService/Delete",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_ip__pb2.IPServiceDeleteResponse,
            method=method,
            **kwargs,
        )


class AsyncIPServiceClient(AsyncConnecpyClient):
    async def Get(
        self,
        request: api_dot_v1_dot_ip__pb2.IPServiceGetRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_ip__pb2.IPServiceGetResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.IPService/Get",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_ip__pb2.IPServiceGetResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Allocate(
        self,
        request: api_dot_v1_dot_ip__pb2.IPServiceAllocateRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_ip__pb2.IPServiceAllocateResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.IPService/Allocate",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_ip__pb2.IPServiceAllocateResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Update(
        self,
        request: api_dot_v1_dot_ip__pb2.IPServiceUpdateRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_ip__pb2.IPServiceUpdateResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.IPService/Update",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_ip__pb2.IPServiceUpdateResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def List(
        self,
        request: api_dot_v1_dot_ip__pb2.IPServiceListRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_ip__pb2.IPServiceListResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.IPService/List",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_ip__pb2.IPServiceListResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Delete(
        self,
        request: api_dot_v1_dot_ip__pb2.IPServiceDeleteRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_ip__pb2.IPServiceDeleteResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.IPService/Delete",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_ip__pb2.IPServiceDeleteResponse,
            method=method,
            session=session,
            **kwargs,
        )
