# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: api/v1/token.proto

from typing import Optional, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext
import metalstackcloud.api.v1.token_pb2 as api_dot_v1_dot_token__pb2


class TokenService(Protocol):
    async def Get(self, req: api_dot_v1_dot_token__pb2.TokenServiceGetRequest, ctx: ServiceContext) -> api_dot_v1_dot_token__pb2.TokenServiceGetResponse: ...
    async def Create(self, req: api_dot_v1_dot_token__pb2.TokenServiceCreateRequest, ctx: ServiceContext) -> api_dot_v1_dot_token__pb2.TokenServiceCreateResponse: ...
    async def Update(self, req: api_dot_v1_dot_token__pb2.TokenServiceUpdateRequest, ctx: ServiceContext) -> api_dot_v1_dot_token__pb2.TokenServiceUpdateResponse: ...
    async def List(self, req: api_dot_v1_dot_token__pb2.TokenServiceListRequest, ctx: ServiceContext) -> api_dot_v1_dot_token__pb2.TokenServiceListResponse: ...
    async def Revoke(self, req: api_dot_v1_dot_token__pb2.TokenServiceRevokeRequest, ctx: ServiceContext) -> api_dot_v1_dot_token__pb2.TokenServiceRevokeResponse: ...


class TokenServiceServer(ConnecpyServer):
    def __init__(self, *, service: TokenService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/api.v1.TokenService"
        self._endpoints = {
            "Get": Endpoint[api_dot_v1_dot_token__pb2.TokenServiceGetRequest, api_dot_v1_dot_token__pb2.TokenServiceGetResponse](
                service_name="TokenService",
                name="Get",
                function=getattr(service, "Get"),
                input=api_dot_v1_dot_token__pb2.TokenServiceGetRequest,
                output=api_dot_v1_dot_token__pb2.TokenServiceGetResponse,
                allowed_methods=("POST",),
            ),
            "Create": Endpoint[api_dot_v1_dot_token__pb2.TokenServiceCreateRequest, api_dot_v1_dot_token__pb2.TokenServiceCreateResponse](
                service_name="TokenService",
                name="Create",
                function=getattr(service, "Create"),
                input=api_dot_v1_dot_token__pb2.TokenServiceCreateRequest,
                output=api_dot_v1_dot_token__pb2.TokenServiceCreateResponse,
                allowed_methods=("POST",),
            ),
            "Update": Endpoint[api_dot_v1_dot_token__pb2.TokenServiceUpdateRequest, api_dot_v1_dot_token__pb2.TokenServiceUpdateResponse](
                service_name="TokenService",
                name="Update",
                function=getattr(service, "Update"),
                input=api_dot_v1_dot_token__pb2.TokenServiceUpdateRequest,
                output=api_dot_v1_dot_token__pb2.TokenServiceUpdateResponse,
                allowed_methods=("POST",),
            ),
            "List": Endpoint[api_dot_v1_dot_token__pb2.TokenServiceListRequest, api_dot_v1_dot_token__pb2.TokenServiceListResponse](
                service_name="TokenService",
                name="List",
                function=getattr(service, "List"),
                input=api_dot_v1_dot_token__pb2.TokenServiceListRequest,
                output=api_dot_v1_dot_token__pb2.TokenServiceListResponse,
                allowed_methods=("POST",),
            ),
            "Revoke": Endpoint[api_dot_v1_dot_token__pb2.TokenServiceRevokeRequest, api_dot_v1_dot_token__pb2.TokenServiceRevokeResponse](
                service_name="TokenService",
                name="Revoke",
                function=getattr(service, "Revoke"),
                input=api_dot_v1_dot_token__pb2.TokenServiceRevokeRequest,
                output=api_dot_v1_dot_token__pb2.TokenServiceRevokeResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "api.v1.TokenService"


class TokenServiceSync(Protocol):
    def Get(self, req: api_dot_v1_dot_token__pb2.TokenServiceGetRequest, ctx: ServiceContext) -> api_dot_v1_dot_token__pb2.TokenServiceGetResponse: ...
    def Create(self, req: api_dot_v1_dot_token__pb2.TokenServiceCreateRequest, ctx: ServiceContext) -> api_dot_v1_dot_token__pb2.TokenServiceCreateResponse: ...
    def Update(self, req: api_dot_v1_dot_token__pb2.TokenServiceUpdateRequest, ctx: ServiceContext) -> api_dot_v1_dot_token__pb2.TokenServiceUpdateResponse: ...
    def List(self, req: api_dot_v1_dot_token__pb2.TokenServiceListRequest, ctx: ServiceContext) -> api_dot_v1_dot_token__pb2.TokenServiceListResponse: ...
    def Revoke(self, req: api_dot_v1_dot_token__pb2.TokenServiceRevokeRequest, ctx: ServiceContext) -> api_dot_v1_dot_token__pb2.TokenServiceRevokeResponse: ...


class TokenServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: TokenServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/api.v1.TokenService"
        self._endpoints = {
            "Get": Endpoint[api_dot_v1_dot_token__pb2.TokenServiceGetRequest, api_dot_v1_dot_token__pb2.TokenServiceGetResponse](
                service_name="TokenService",
                name="Get",
                function=getattr(service, "Get"),
                input=api_dot_v1_dot_token__pb2.TokenServiceGetRequest,
                output=api_dot_v1_dot_token__pb2.TokenServiceGetResponse,
                allowed_methods=("POST",),
            ),
            "Create": Endpoint[api_dot_v1_dot_token__pb2.TokenServiceCreateRequest, api_dot_v1_dot_token__pb2.TokenServiceCreateResponse](
                service_name="TokenService",
                name="Create",
                function=getattr(service, "Create"),
                input=api_dot_v1_dot_token__pb2.TokenServiceCreateRequest,
                output=api_dot_v1_dot_token__pb2.TokenServiceCreateResponse,
                allowed_methods=("POST",),
            ),
            "Update": Endpoint[api_dot_v1_dot_token__pb2.TokenServiceUpdateRequest, api_dot_v1_dot_token__pb2.TokenServiceUpdateResponse](
                service_name="TokenService",
                name="Update",
                function=getattr(service, "Update"),
                input=api_dot_v1_dot_token__pb2.TokenServiceUpdateRequest,
                output=api_dot_v1_dot_token__pb2.TokenServiceUpdateResponse,
                allowed_methods=("POST",),
            ),
            "List": Endpoint[api_dot_v1_dot_token__pb2.TokenServiceListRequest, api_dot_v1_dot_token__pb2.TokenServiceListResponse](
                service_name="TokenService",
                name="List",
                function=getattr(service, "List"),
                input=api_dot_v1_dot_token__pb2.TokenServiceListRequest,
                output=api_dot_v1_dot_token__pb2.TokenServiceListResponse,
                allowed_methods=("POST",),
            ),
            "Revoke": Endpoint[api_dot_v1_dot_token__pb2.TokenServiceRevokeRequest, api_dot_v1_dot_token__pb2.TokenServiceRevokeResponse](
                service_name="TokenService",
                name="Revoke",
                function=getattr(service, "Revoke"),
                input=api_dot_v1_dot_token__pb2.TokenServiceRevokeRequest,
                output=api_dot_v1_dot_token__pb2.TokenServiceRevokeResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "api.v1.TokenService"


class TokenServiceClient(ConnecpyClient):
    def Get(
        self,
        request: api_dot_v1_dot_token__pb2.TokenServiceGetRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_token__pb2.TokenServiceGetResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.TokenService/Get",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_token__pb2.TokenServiceGetResponse,
            method=method,
            **kwargs,
        )

    def Create(
        self,
        request: api_dot_v1_dot_token__pb2.TokenServiceCreateRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_token__pb2.TokenServiceCreateResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.TokenService/Create",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_token__pb2.TokenServiceCreateResponse,
            method=method,
            **kwargs,
        )

    def Update(
        self,
        request: api_dot_v1_dot_token__pb2.TokenServiceUpdateRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_token__pb2.TokenServiceUpdateResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.TokenService/Update",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_token__pb2.TokenServiceUpdateResponse,
            method=method,
            **kwargs,
        )

    def List(
        self,
        request: api_dot_v1_dot_token__pb2.TokenServiceListRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_token__pb2.TokenServiceListResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.TokenService/List",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_token__pb2.TokenServiceListResponse,
            method=method,
            **kwargs,
        )

    def Revoke(
        self,
        request: api_dot_v1_dot_token__pb2.TokenServiceRevokeRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> api_dot_v1_dot_token__pb2.TokenServiceRevokeResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/api.v1.TokenService/Revoke",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_token__pb2.TokenServiceRevokeResponse,
            method=method,
            **kwargs,
        )


class AsyncTokenServiceClient(AsyncConnecpyClient):
    async def Get(
        self,
        request: api_dot_v1_dot_token__pb2.TokenServiceGetRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_token__pb2.TokenServiceGetResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.TokenService/Get",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_token__pb2.TokenServiceGetResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Create(
        self,
        request: api_dot_v1_dot_token__pb2.TokenServiceCreateRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_token__pb2.TokenServiceCreateResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.TokenService/Create",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_token__pb2.TokenServiceCreateResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Update(
        self,
        request: api_dot_v1_dot_token__pb2.TokenServiceUpdateRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_token__pb2.TokenServiceUpdateResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.TokenService/Update",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_token__pb2.TokenServiceUpdateResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def List(
        self,
        request: api_dot_v1_dot_token__pb2.TokenServiceListRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_token__pb2.TokenServiceListResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.TokenService/List",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_token__pb2.TokenServiceListResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Revoke(
        self,
        request: api_dot_v1_dot_token__pb2.TokenServiceRevokeRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> api_dot_v1_dot_token__pb2.TokenServiceRevokeResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/api.v1.TokenService/Revoke",
            ctx=ctx,
            request=request,
            response_class=api_dot_v1_dot_token__pb2.TokenServiceRevokeResponse,
            method=method,
            session=session,
            **kwargs,
        )
