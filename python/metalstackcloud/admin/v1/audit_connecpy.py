# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: admin/v1/audit.proto

from typing import Optional, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext
import metalstackcloud.admin.v1.audit_pb2 as admin_dot_v1_dot_audit__pb2


class AuditService(Protocol):
    async def Get(self, req: admin_dot_v1_dot_audit__pb2.AuditServiceGetRequest, ctx: ServiceContext) -> admin_dot_v1_dot_audit__pb2.AuditServiceGetResponse: ...
    async def List(self, req: admin_dot_v1_dot_audit__pb2.AuditServiceListRequest, ctx: ServiceContext) -> admin_dot_v1_dot_audit__pb2.AuditServiceListResponse: ...


class AuditServiceServer(ConnecpyServer):
    def __init__(self, *, service: AuditService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/admin.v1.AuditService"
        self._endpoints = {
            "Get": Endpoint[admin_dot_v1_dot_audit__pb2.AuditServiceGetRequest, admin_dot_v1_dot_audit__pb2.AuditServiceGetResponse](
                service_name="AuditService",
                name="Get",
                function=getattr(service, "Get"),
                input=admin_dot_v1_dot_audit__pb2.AuditServiceGetRequest,
                output=admin_dot_v1_dot_audit__pb2.AuditServiceGetResponse,
                allowed_methods=("POST",),
            ),
            "List": Endpoint[admin_dot_v1_dot_audit__pb2.AuditServiceListRequest, admin_dot_v1_dot_audit__pb2.AuditServiceListResponse](
                service_name="AuditService",
                name="List",
                function=getattr(service, "List"),
                input=admin_dot_v1_dot_audit__pb2.AuditServiceListRequest,
                output=admin_dot_v1_dot_audit__pb2.AuditServiceListResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "admin.v1.AuditService"


class AuditServiceSync(Protocol):
    def Get(self, req: admin_dot_v1_dot_audit__pb2.AuditServiceGetRequest, ctx: ServiceContext) -> admin_dot_v1_dot_audit__pb2.AuditServiceGetResponse: ...
    def List(self, req: admin_dot_v1_dot_audit__pb2.AuditServiceListRequest, ctx: ServiceContext) -> admin_dot_v1_dot_audit__pb2.AuditServiceListResponse: ...


class AuditServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: AuditServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/admin.v1.AuditService"
        self._endpoints = {
            "Get": Endpoint[admin_dot_v1_dot_audit__pb2.AuditServiceGetRequest, admin_dot_v1_dot_audit__pb2.AuditServiceGetResponse](
                service_name="AuditService",
                name="Get",
                function=getattr(service, "Get"),
                input=admin_dot_v1_dot_audit__pb2.AuditServiceGetRequest,
                output=admin_dot_v1_dot_audit__pb2.AuditServiceGetResponse,
                allowed_methods=("POST",),
            ),
            "List": Endpoint[admin_dot_v1_dot_audit__pb2.AuditServiceListRequest, admin_dot_v1_dot_audit__pb2.AuditServiceListResponse](
                service_name="AuditService",
                name="List",
                function=getattr(service, "List"),
                input=admin_dot_v1_dot_audit__pb2.AuditServiceListRequest,
                output=admin_dot_v1_dot_audit__pb2.AuditServiceListResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "admin.v1.AuditService"


class AuditServiceClient(ConnecpyClient):
    def Get(
        self,
        request: admin_dot_v1_dot_audit__pb2.AuditServiceGetRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> admin_dot_v1_dot_audit__pb2.AuditServiceGetResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/admin.v1.AuditService/Get",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_audit__pb2.AuditServiceGetResponse,
            method=method,
            **kwargs,
        )

    def List(
        self,
        request: admin_dot_v1_dot_audit__pb2.AuditServiceListRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> admin_dot_v1_dot_audit__pb2.AuditServiceListResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/admin.v1.AuditService/List",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_audit__pb2.AuditServiceListResponse,
            method=method,
            **kwargs,
        )


class AsyncAuditServiceClient(AsyncConnecpyClient):
    async def Get(
        self,
        request: admin_dot_v1_dot_audit__pb2.AuditServiceGetRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> admin_dot_v1_dot_audit__pb2.AuditServiceGetResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/admin.v1.AuditService/Get",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_audit__pb2.AuditServiceGetResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def List(
        self,
        request: admin_dot_v1_dot_audit__pb2.AuditServiceListRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> admin_dot_v1_dot_audit__pb2.AuditServiceListResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/admin.v1.AuditService/List",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_audit__pb2.AuditServiceListResponse,
            method=method,
            session=session,
            **kwargs,
        )
