# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: admin/v1/storage.proto

from typing import Optional, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext
import metalstackcloud.admin.v1.storage_pb2 as admin_dot_v1_dot_storage__pb2


class StorageService(Protocol):
    async def ClusterInfo(self, req: admin_dot_v1_dot_storage__pb2.StorageServiceClusterInfoRequest, ctx: ServiceContext) -> admin_dot_v1_dot_storage__pb2.StorageServiceClusterInfoResponse: ...
    async def ListVolumes(self, req: admin_dot_v1_dot_storage__pb2.StorageServiceListVolumesRequest, ctx: ServiceContext) -> admin_dot_v1_dot_storage__pb2.StorageServiceListVolumesResponse: ...
    async def ListSnapshots(self, req: admin_dot_v1_dot_storage__pb2.StorageServiceListSnapshotsRequest, ctx: ServiceContext) -> admin_dot_v1_dot_storage__pb2.StorageServiceListSnapshotsResponse: ...


class StorageServiceServer(ConnecpyServer):
    def __init__(self, *, service: StorageService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/admin.v1.StorageService"
        self._endpoints = {
            "ClusterInfo": Endpoint[admin_dot_v1_dot_storage__pb2.StorageServiceClusterInfoRequest, admin_dot_v1_dot_storage__pb2.StorageServiceClusterInfoResponse](
                service_name="StorageService",
                name="ClusterInfo",
                function=getattr(service, "ClusterInfo"),
                input=admin_dot_v1_dot_storage__pb2.StorageServiceClusterInfoRequest,
                output=admin_dot_v1_dot_storage__pb2.StorageServiceClusterInfoResponse,
                allowed_methods=("POST",),
            ),
            "ListVolumes": Endpoint[admin_dot_v1_dot_storage__pb2.StorageServiceListVolumesRequest, admin_dot_v1_dot_storage__pb2.StorageServiceListVolumesResponse](
                service_name="StorageService",
                name="ListVolumes",
                function=getattr(service, "ListVolumes"),
                input=admin_dot_v1_dot_storage__pb2.StorageServiceListVolumesRequest,
                output=admin_dot_v1_dot_storage__pb2.StorageServiceListVolumesResponse,
                allowed_methods=("POST",),
            ),
            "ListSnapshots": Endpoint[admin_dot_v1_dot_storage__pb2.StorageServiceListSnapshotsRequest, admin_dot_v1_dot_storage__pb2.StorageServiceListSnapshotsResponse](
                service_name="StorageService",
                name="ListSnapshots",
                function=getattr(service, "ListSnapshots"),
                input=admin_dot_v1_dot_storage__pb2.StorageServiceListSnapshotsRequest,
                output=admin_dot_v1_dot_storage__pb2.StorageServiceListSnapshotsResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "admin.v1.StorageService"


class StorageServiceSync(Protocol):
    def ClusterInfo(self, req: admin_dot_v1_dot_storage__pb2.StorageServiceClusterInfoRequest, ctx: ServiceContext) -> admin_dot_v1_dot_storage__pb2.StorageServiceClusterInfoResponse: ...
    def ListVolumes(self, req: admin_dot_v1_dot_storage__pb2.StorageServiceListVolumesRequest, ctx: ServiceContext) -> admin_dot_v1_dot_storage__pb2.StorageServiceListVolumesResponse: ...
    def ListSnapshots(self, req: admin_dot_v1_dot_storage__pb2.StorageServiceListSnapshotsRequest, ctx: ServiceContext) -> admin_dot_v1_dot_storage__pb2.StorageServiceListSnapshotsResponse: ...


class StorageServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: StorageServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/admin.v1.StorageService"
        self._endpoints = {
            "ClusterInfo": Endpoint[admin_dot_v1_dot_storage__pb2.StorageServiceClusterInfoRequest, admin_dot_v1_dot_storage__pb2.StorageServiceClusterInfoResponse](
                service_name="StorageService",
                name="ClusterInfo",
                function=getattr(service, "ClusterInfo"),
                input=admin_dot_v1_dot_storage__pb2.StorageServiceClusterInfoRequest,
                output=admin_dot_v1_dot_storage__pb2.StorageServiceClusterInfoResponse,
                allowed_methods=("POST",),
            ),
            "ListVolumes": Endpoint[admin_dot_v1_dot_storage__pb2.StorageServiceListVolumesRequest, admin_dot_v1_dot_storage__pb2.StorageServiceListVolumesResponse](
                service_name="StorageService",
                name="ListVolumes",
                function=getattr(service, "ListVolumes"),
                input=admin_dot_v1_dot_storage__pb2.StorageServiceListVolumesRequest,
                output=admin_dot_v1_dot_storage__pb2.StorageServiceListVolumesResponse,
                allowed_methods=("POST",),
            ),
            "ListSnapshots": Endpoint[admin_dot_v1_dot_storage__pb2.StorageServiceListSnapshotsRequest, admin_dot_v1_dot_storage__pb2.StorageServiceListSnapshotsResponse](
                service_name="StorageService",
                name="ListSnapshots",
                function=getattr(service, "ListSnapshots"),
                input=admin_dot_v1_dot_storage__pb2.StorageServiceListSnapshotsRequest,
                output=admin_dot_v1_dot_storage__pb2.StorageServiceListSnapshotsResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "admin.v1.StorageService"


class StorageServiceClient(ConnecpyClient):
    def ClusterInfo(
        self,
        request: admin_dot_v1_dot_storage__pb2.StorageServiceClusterInfoRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> admin_dot_v1_dot_storage__pb2.StorageServiceClusterInfoResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/admin.v1.StorageService/ClusterInfo",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_storage__pb2.StorageServiceClusterInfoResponse,
            method=method,
            **kwargs,
        )

    def ListVolumes(
        self,
        request: admin_dot_v1_dot_storage__pb2.StorageServiceListVolumesRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> admin_dot_v1_dot_storage__pb2.StorageServiceListVolumesResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/admin.v1.StorageService/ListVolumes",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_storage__pb2.StorageServiceListVolumesResponse,
            method=method,
            **kwargs,
        )

    def ListSnapshots(
        self,
        request: admin_dot_v1_dot_storage__pb2.StorageServiceListSnapshotsRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> admin_dot_v1_dot_storage__pb2.StorageServiceListSnapshotsResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/admin.v1.StorageService/ListSnapshots",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_storage__pb2.StorageServiceListSnapshotsResponse,
            method=method,
            **kwargs,
        )


class AsyncStorageServiceClient(AsyncConnecpyClient):
    async def ClusterInfo(
        self,
        request: admin_dot_v1_dot_storage__pb2.StorageServiceClusterInfoRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> admin_dot_v1_dot_storage__pb2.StorageServiceClusterInfoResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/admin.v1.StorageService/ClusterInfo",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_storage__pb2.StorageServiceClusterInfoResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def ListVolumes(
        self,
        request: admin_dot_v1_dot_storage__pb2.StorageServiceListVolumesRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> admin_dot_v1_dot_storage__pb2.StorageServiceListVolumesResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/admin.v1.StorageService/ListVolumes",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_storage__pb2.StorageServiceListVolumesResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def ListSnapshots(
        self,
        request: admin_dot_v1_dot_storage__pb2.StorageServiceListSnapshotsRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> admin_dot_v1_dot_storage__pb2.StorageServiceListSnapshotsResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/admin.v1.StorageService/ListSnapshots",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_storage__pb2.StorageServiceListSnapshotsResponse,
            method=method,
            session=session,
            **kwargs,
        )
