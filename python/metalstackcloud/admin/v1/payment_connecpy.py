# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: admin/v1/payment.proto

from typing import Optional, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext
import metalstackcloud.admin.v1.payment_pb2 as admin_dot_v1_dot_payment__pb2


class PaymentService(Protocol):
    async def ListCoupons(self, req: admin_dot_v1_dot_payment__pb2.PaymentServiceListCouponsRequest, ctx: ServiceContext) -> admin_dot_v1_dot_payment__pb2.PaymentServiceListCouponsResponse: ...
    async def AddBalanceToCustomer(self, req: admin_dot_v1_dot_payment__pb2.PaymentServiceAddBalanceToCustomerRequest, ctx: ServiceContext) -> admin_dot_v1_dot_payment__pb2.PaymentServiceAddBalanceToCustomerResponse: ...


class PaymentServiceServer(ConnecpyServer):
    def __init__(self, *, service: PaymentService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/admin.v1.PaymentService"
        self._endpoints = {
            "ListCoupons": Endpoint[admin_dot_v1_dot_payment__pb2.PaymentServiceListCouponsRequest, admin_dot_v1_dot_payment__pb2.PaymentServiceListCouponsResponse](
                service_name="PaymentService",
                name="ListCoupons",
                function=getattr(service, "ListCoupons"),
                input=admin_dot_v1_dot_payment__pb2.PaymentServiceListCouponsRequest,
                output=admin_dot_v1_dot_payment__pb2.PaymentServiceListCouponsResponse,
                allowed_methods=("POST",),
            ),
            "AddBalanceToCustomer": Endpoint[admin_dot_v1_dot_payment__pb2.PaymentServiceAddBalanceToCustomerRequest, admin_dot_v1_dot_payment__pb2.PaymentServiceAddBalanceToCustomerResponse](
                service_name="PaymentService",
                name="AddBalanceToCustomer",
                function=getattr(service, "AddBalanceToCustomer"),
                input=admin_dot_v1_dot_payment__pb2.PaymentServiceAddBalanceToCustomerRequest,
                output=admin_dot_v1_dot_payment__pb2.PaymentServiceAddBalanceToCustomerResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "admin.v1.PaymentService"


class PaymentServiceSync(Protocol):
    def ListCoupons(self, req: admin_dot_v1_dot_payment__pb2.PaymentServiceListCouponsRequest, ctx: ServiceContext) -> admin_dot_v1_dot_payment__pb2.PaymentServiceListCouponsResponse: ...
    def AddBalanceToCustomer(self, req: admin_dot_v1_dot_payment__pb2.PaymentServiceAddBalanceToCustomerRequest, ctx: ServiceContext) -> admin_dot_v1_dot_payment__pb2.PaymentServiceAddBalanceToCustomerResponse: ...


class PaymentServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: PaymentServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/admin.v1.PaymentService"
        self._endpoints = {
            "ListCoupons": Endpoint[admin_dot_v1_dot_payment__pb2.PaymentServiceListCouponsRequest, admin_dot_v1_dot_payment__pb2.PaymentServiceListCouponsResponse](
                service_name="PaymentService",
                name="ListCoupons",
                function=getattr(service, "ListCoupons"),
                input=admin_dot_v1_dot_payment__pb2.PaymentServiceListCouponsRequest,
                output=admin_dot_v1_dot_payment__pb2.PaymentServiceListCouponsResponse,
                allowed_methods=("POST",),
            ),
            "AddBalanceToCustomer": Endpoint[admin_dot_v1_dot_payment__pb2.PaymentServiceAddBalanceToCustomerRequest, admin_dot_v1_dot_payment__pb2.PaymentServiceAddBalanceToCustomerResponse](
                service_name="PaymentService",
                name="AddBalanceToCustomer",
                function=getattr(service, "AddBalanceToCustomer"),
                input=admin_dot_v1_dot_payment__pb2.PaymentServiceAddBalanceToCustomerRequest,
                output=admin_dot_v1_dot_payment__pb2.PaymentServiceAddBalanceToCustomerResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "admin.v1.PaymentService"


class PaymentServiceClient(ConnecpyClient):
    def ListCoupons(
        self,
        request: admin_dot_v1_dot_payment__pb2.PaymentServiceListCouponsRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> admin_dot_v1_dot_payment__pb2.PaymentServiceListCouponsResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/admin.v1.PaymentService/ListCoupons",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_payment__pb2.PaymentServiceListCouponsResponse,
            method=method,
            **kwargs,
        )

    def AddBalanceToCustomer(
        self,
        request: admin_dot_v1_dot_payment__pb2.PaymentServiceAddBalanceToCustomerRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> admin_dot_v1_dot_payment__pb2.PaymentServiceAddBalanceToCustomerResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/admin.v1.PaymentService/AddBalanceToCustomer",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_payment__pb2.PaymentServiceAddBalanceToCustomerResponse,
            method=method,
            **kwargs,
        )


class AsyncPaymentServiceClient(AsyncConnecpyClient):
    async def ListCoupons(
        self,
        request: admin_dot_v1_dot_payment__pb2.PaymentServiceListCouponsRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> admin_dot_v1_dot_payment__pb2.PaymentServiceListCouponsResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/admin.v1.PaymentService/ListCoupons",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_payment__pb2.PaymentServiceListCouponsResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def AddBalanceToCustomer(
        self,
        request: admin_dot_v1_dot_payment__pb2.PaymentServiceAddBalanceToCustomerRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> admin_dot_v1_dot_payment__pb2.PaymentServiceAddBalanceToCustomerResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/admin.v1.PaymentService/AddBalanceToCustomer",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_payment__pb2.PaymentServiceAddBalanceToCustomerResponse,
            method=method,
            session=session,
            **kwargs,
        )
