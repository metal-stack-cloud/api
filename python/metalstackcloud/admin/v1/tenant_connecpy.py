# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: admin/v1/tenant.proto

from typing import Optional, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext
import metalstackcloud.admin.v1.tenant_pb2 as admin_dot_v1_dot_tenant__pb2


class TenantService(Protocol):
    async def List(self, req: admin_dot_v1_dot_tenant__pb2.TenantServiceListRequest, ctx: ServiceContext) -> admin_dot_v1_dot_tenant__pb2.TenantServiceListResponse: ...
    async def Admit(self, req: admin_dot_v1_dot_tenant__pb2.TenantServiceAdmitRequest, ctx: ServiceContext) -> admin_dot_v1_dot_tenant__pb2.TenantServiceAdmitResponse: ...
    async def Revoke(self, req: admin_dot_v1_dot_tenant__pb2.TenantServiceRevokeRequest, ctx: ServiceContext) -> admin_dot_v1_dot_tenant__pb2.TenantServiceRevokeResponse: ...
    async def AddMember(self, req: admin_dot_v1_dot_tenant__pb2.TenantServiceAddMemberRequest, ctx: ServiceContext) -> admin_dot_v1_dot_tenant__pb2.TenantServiceAddMemberResponse: ...


class TenantServiceServer(ConnecpyServer):
    def __init__(self, *, service: TenantService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/admin.v1.TenantService"
        self._endpoints = {
            "List": Endpoint[admin_dot_v1_dot_tenant__pb2.TenantServiceListRequest, admin_dot_v1_dot_tenant__pb2.TenantServiceListResponse](
                service_name="TenantService",
                name="List",
                function=getattr(service, "List"),
                input=admin_dot_v1_dot_tenant__pb2.TenantServiceListRequest,
                output=admin_dot_v1_dot_tenant__pb2.TenantServiceListResponse,
                allowed_methods=("POST",),
            ),
            "Admit": Endpoint[admin_dot_v1_dot_tenant__pb2.TenantServiceAdmitRequest, admin_dot_v1_dot_tenant__pb2.TenantServiceAdmitResponse](
                service_name="TenantService",
                name="Admit",
                function=getattr(service, "Admit"),
                input=admin_dot_v1_dot_tenant__pb2.TenantServiceAdmitRequest,
                output=admin_dot_v1_dot_tenant__pb2.TenantServiceAdmitResponse,
                allowed_methods=("POST",),
            ),
            "Revoke": Endpoint[admin_dot_v1_dot_tenant__pb2.TenantServiceRevokeRequest, admin_dot_v1_dot_tenant__pb2.TenantServiceRevokeResponse](
                service_name="TenantService",
                name="Revoke",
                function=getattr(service, "Revoke"),
                input=admin_dot_v1_dot_tenant__pb2.TenantServiceRevokeRequest,
                output=admin_dot_v1_dot_tenant__pb2.TenantServiceRevokeResponse,
                allowed_methods=("POST",),
            ),
            "AddMember": Endpoint[admin_dot_v1_dot_tenant__pb2.TenantServiceAddMemberRequest, admin_dot_v1_dot_tenant__pb2.TenantServiceAddMemberResponse](
                service_name="TenantService",
                name="AddMember",
                function=getattr(service, "AddMember"),
                input=admin_dot_v1_dot_tenant__pb2.TenantServiceAddMemberRequest,
                output=admin_dot_v1_dot_tenant__pb2.TenantServiceAddMemberResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "admin.v1.TenantService"


class TenantServiceSync(Protocol):
    def List(self, req: admin_dot_v1_dot_tenant__pb2.TenantServiceListRequest, ctx: ServiceContext) -> admin_dot_v1_dot_tenant__pb2.TenantServiceListResponse: ...
    def Admit(self, req: admin_dot_v1_dot_tenant__pb2.TenantServiceAdmitRequest, ctx: ServiceContext) -> admin_dot_v1_dot_tenant__pb2.TenantServiceAdmitResponse: ...
    def Revoke(self, req: admin_dot_v1_dot_tenant__pb2.TenantServiceRevokeRequest, ctx: ServiceContext) -> admin_dot_v1_dot_tenant__pb2.TenantServiceRevokeResponse: ...
    def AddMember(self, req: admin_dot_v1_dot_tenant__pb2.TenantServiceAddMemberRequest, ctx: ServiceContext) -> admin_dot_v1_dot_tenant__pb2.TenantServiceAddMemberResponse: ...


class TenantServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: TenantServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/admin.v1.TenantService"
        self._endpoints = {
            "List": Endpoint[admin_dot_v1_dot_tenant__pb2.TenantServiceListRequest, admin_dot_v1_dot_tenant__pb2.TenantServiceListResponse](
                service_name="TenantService",
                name="List",
                function=getattr(service, "List"),
                input=admin_dot_v1_dot_tenant__pb2.TenantServiceListRequest,
                output=admin_dot_v1_dot_tenant__pb2.TenantServiceListResponse,
                allowed_methods=("POST",),
            ),
            "Admit": Endpoint[admin_dot_v1_dot_tenant__pb2.TenantServiceAdmitRequest, admin_dot_v1_dot_tenant__pb2.TenantServiceAdmitResponse](
                service_name="TenantService",
                name="Admit",
                function=getattr(service, "Admit"),
                input=admin_dot_v1_dot_tenant__pb2.TenantServiceAdmitRequest,
                output=admin_dot_v1_dot_tenant__pb2.TenantServiceAdmitResponse,
                allowed_methods=("POST",),
            ),
            "Revoke": Endpoint[admin_dot_v1_dot_tenant__pb2.TenantServiceRevokeRequest, admin_dot_v1_dot_tenant__pb2.TenantServiceRevokeResponse](
                service_name="TenantService",
                name="Revoke",
                function=getattr(service, "Revoke"),
                input=admin_dot_v1_dot_tenant__pb2.TenantServiceRevokeRequest,
                output=admin_dot_v1_dot_tenant__pb2.TenantServiceRevokeResponse,
                allowed_methods=("POST",),
            ),
            "AddMember": Endpoint[admin_dot_v1_dot_tenant__pb2.TenantServiceAddMemberRequest, admin_dot_v1_dot_tenant__pb2.TenantServiceAddMemberResponse](
                service_name="TenantService",
                name="AddMember",
                function=getattr(service, "AddMember"),
                input=admin_dot_v1_dot_tenant__pb2.TenantServiceAddMemberRequest,
                output=admin_dot_v1_dot_tenant__pb2.TenantServiceAddMemberResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "admin.v1.TenantService"


class TenantServiceClient(ConnecpyClient):
    def List(
        self,
        request: admin_dot_v1_dot_tenant__pb2.TenantServiceListRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> admin_dot_v1_dot_tenant__pb2.TenantServiceListResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/admin.v1.TenantService/List",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_tenant__pb2.TenantServiceListResponse,
            method=method,
            **kwargs,
        )

    def Admit(
        self,
        request: admin_dot_v1_dot_tenant__pb2.TenantServiceAdmitRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> admin_dot_v1_dot_tenant__pb2.TenantServiceAdmitResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/admin.v1.TenantService/Admit",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_tenant__pb2.TenantServiceAdmitResponse,
            method=method,
            **kwargs,
        )

    def Revoke(
        self,
        request: admin_dot_v1_dot_tenant__pb2.TenantServiceRevokeRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> admin_dot_v1_dot_tenant__pb2.TenantServiceRevokeResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/admin.v1.TenantService/Revoke",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_tenant__pb2.TenantServiceRevokeResponse,
            method=method,
            **kwargs,
        )

    def AddMember(
        self,
        request: admin_dot_v1_dot_tenant__pb2.TenantServiceAddMemberRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> admin_dot_v1_dot_tenant__pb2.TenantServiceAddMemberResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/admin.v1.TenantService/AddMember",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_tenant__pb2.TenantServiceAddMemberResponse,
            method=method,
            **kwargs,
        )


class AsyncTenantServiceClient(AsyncConnecpyClient):
    async def List(
        self,
        request: admin_dot_v1_dot_tenant__pb2.TenantServiceListRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> admin_dot_v1_dot_tenant__pb2.TenantServiceListResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/admin.v1.TenantService/List",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_tenant__pb2.TenantServiceListResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Admit(
        self,
        request: admin_dot_v1_dot_tenant__pb2.TenantServiceAdmitRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> admin_dot_v1_dot_tenant__pb2.TenantServiceAdmitResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/admin.v1.TenantService/Admit",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_tenant__pb2.TenantServiceAdmitResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Revoke(
        self,
        request: admin_dot_v1_dot_tenant__pb2.TenantServiceRevokeRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> admin_dot_v1_dot_tenant__pb2.TenantServiceRevokeResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/admin.v1.TenantService/Revoke",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_tenant__pb2.TenantServiceRevokeResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def AddMember(
        self,
        request: admin_dot_v1_dot_tenant__pb2.TenantServiceAddMemberRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> admin_dot_v1_dot_tenant__pb2.TenantServiceAddMemberResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/admin.v1.TenantService/AddMember",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_tenant__pb2.TenantServiceAddMemberResponse,
            method=method,
            session=session,
            **kwargs,
        )
