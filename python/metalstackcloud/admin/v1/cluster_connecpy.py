# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: admin/v1/cluster.proto

from typing import Optional, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext
import metalstackcloud.admin.v1.cluster_pb2 as admin_dot_v1_dot_cluster__pb2


class ClusterService(Protocol):
    async def Get(self, req: admin_dot_v1_dot_cluster__pb2.ClusterServiceGetRequest, ctx: ServiceContext) -> admin_dot_v1_dot_cluster__pb2.ClusterServiceGetResponse: ...
    async def List(self, req: admin_dot_v1_dot_cluster__pb2.ClusterServiceListRequest, ctx: ServiceContext) -> admin_dot_v1_dot_cluster__pb2.ClusterServiceListResponse: ...
    async def Credentials(self, req: admin_dot_v1_dot_cluster__pb2.ClusterServiceCredentialsRequest, ctx: ServiceContext) -> admin_dot_v1_dot_cluster__pb2.ClusterServiceCredentialsResponse: ...


class ClusterServiceServer(ConnecpyServer):
    def __init__(self, *, service: ClusterService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/admin.v1.ClusterService"
        self._endpoints = {
            "Get": Endpoint[admin_dot_v1_dot_cluster__pb2.ClusterServiceGetRequest, admin_dot_v1_dot_cluster__pb2.ClusterServiceGetResponse](
                service_name="ClusterService",
                name="Get",
                function=getattr(service, "Get"),
                input=admin_dot_v1_dot_cluster__pb2.ClusterServiceGetRequest,
                output=admin_dot_v1_dot_cluster__pb2.ClusterServiceGetResponse,
                allowed_methods=("POST",),
            ),
            "List": Endpoint[admin_dot_v1_dot_cluster__pb2.ClusterServiceListRequest, admin_dot_v1_dot_cluster__pb2.ClusterServiceListResponse](
                service_name="ClusterService",
                name="List",
                function=getattr(service, "List"),
                input=admin_dot_v1_dot_cluster__pb2.ClusterServiceListRequest,
                output=admin_dot_v1_dot_cluster__pb2.ClusterServiceListResponse,
                allowed_methods=("POST",),
            ),
            "Credentials": Endpoint[admin_dot_v1_dot_cluster__pb2.ClusterServiceCredentialsRequest, admin_dot_v1_dot_cluster__pb2.ClusterServiceCredentialsResponse](
                service_name="ClusterService",
                name="Credentials",
                function=getattr(service, "Credentials"),
                input=admin_dot_v1_dot_cluster__pb2.ClusterServiceCredentialsRequest,
                output=admin_dot_v1_dot_cluster__pb2.ClusterServiceCredentialsResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "admin.v1.ClusterService"


class ClusterServiceSync(Protocol):
    def Get(self, req: admin_dot_v1_dot_cluster__pb2.ClusterServiceGetRequest, ctx: ServiceContext) -> admin_dot_v1_dot_cluster__pb2.ClusterServiceGetResponse: ...
    def List(self, req: admin_dot_v1_dot_cluster__pb2.ClusterServiceListRequest, ctx: ServiceContext) -> admin_dot_v1_dot_cluster__pb2.ClusterServiceListResponse: ...
    def Credentials(self, req: admin_dot_v1_dot_cluster__pb2.ClusterServiceCredentialsRequest, ctx: ServiceContext) -> admin_dot_v1_dot_cluster__pb2.ClusterServiceCredentialsResponse: ...


class ClusterServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: ClusterServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/admin.v1.ClusterService"
        self._endpoints = {
            "Get": Endpoint[admin_dot_v1_dot_cluster__pb2.ClusterServiceGetRequest, admin_dot_v1_dot_cluster__pb2.ClusterServiceGetResponse](
                service_name="ClusterService",
                name="Get",
                function=getattr(service, "Get"),
                input=admin_dot_v1_dot_cluster__pb2.ClusterServiceGetRequest,
                output=admin_dot_v1_dot_cluster__pb2.ClusterServiceGetResponse,
                allowed_methods=("POST",),
            ),
            "List": Endpoint[admin_dot_v1_dot_cluster__pb2.ClusterServiceListRequest, admin_dot_v1_dot_cluster__pb2.ClusterServiceListResponse](
                service_name="ClusterService",
                name="List",
                function=getattr(service, "List"),
                input=admin_dot_v1_dot_cluster__pb2.ClusterServiceListRequest,
                output=admin_dot_v1_dot_cluster__pb2.ClusterServiceListResponse,
                allowed_methods=("POST",),
            ),
            "Credentials": Endpoint[admin_dot_v1_dot_cluster__pb2.ClusterServiceCredentialsRequest, admin_dot_v1_dot_cluster__pb2.ClusterServiceCredentialsResponse](
                service_name="ClusterService",
                name="Credentials",
                function=getattr(service, "Credentials"),
                input=admin_dot_v1_dot_cluster__pb2.ClusterServiceCredentialsRequest,
                output=admin_dot_v1_dot_cluster__pb2.ClusterServiceCredentialsResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "admin.v1.ClusterService"


class ClusterServiceClient(ConnecpyClient):
    def Get(
        self,
        request: admin_dot_v1_dot_cluster__pb2.ClusterServiceGetRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> admin_dot_v1_dot_cluster__pb2.ClusterServiceGetResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/admin.v1.ClusterService/Get",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_cluster__pb2.ClusterServiceGetResponse,
            method=method,
            **kwargs,
        )

    def List(
        self,
        request: admin_dot_v1_dot_cluster__pb2.ClusterServiceListRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> admin_dot_v1_dot_cluster__pb2.ClusterServiceListResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/admin.v1.ClusterService/List",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_cluster__pb2.ClusterServiceListResponse,
            method=method,
            **kwargs,
        )

    def Credentials(
        self,
        request: admin_dot_v1_dot_cluster__pb2.ClusterServiceCredentialsRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> admin_dot_v1_dot_cluster__pb2.ClusterServiceCredentialsResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/admin.v1.ClusterService/Credentials",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_cluster__pb2.ClusterServiceCredentialsResponse,
            method=method,
            **kwargs,
        )


class AsyncClusterServiceClient(AsyncConnecpyClient):
    async def Get(
        self,
        request: admin_dot_v1_dot_cluster__pb2.ClusterServiceGetRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> admin_dot_v1_dot_cluster__pb2.ClusterServiceGetResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/admin.v1.ClusterService/Get",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_cluster__pb2.ClusterServiceGetResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def List(
        self,
        request: admin_dot_v1_dot_cluster__pb2.ClusterServiceListRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> admin_dot_v1_dot_cluster__pb2.ClusterServiceListResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/admin.v1.ClusterService/List",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_cluster__pb2.ClusterServiceListResponse,
            method=method,
            session=session,
            **kwargs,
        )

    async def Credentials(
        self,
        request: admin_dot_v1_dot_cluster__pb2.ClusterServiceCredentialsRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> admin_dot_v1_dot_cluster__pb2.ClusterServiceCredentialsResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/admin.v1.ClusterService/Credentials",
            ctx=ctx,
            request=request,
            response_class=admin_dot_v1_dot_cluster__pb2.ClusterServiceCredentialsResponse,
            method=method,
            session=session,
            **kwargs,
        )
