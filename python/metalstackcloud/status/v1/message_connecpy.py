# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: status/v1/message.proto

from typing import Optional, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext
import metalstackcloud.status.v1.message_pb2 as status_dot_v1_dot_message__pb2


class MessageService(Protocol):
    async def Watch(self, req: status_dot_v1_dot_message__pb2.MessageServiceWatchRequest, ctx: ServiceContext) -> status_dot_v1_dot_message__pb2.MessageServiceWatchResponse: ...


class MessageServiceServer(ConnecpyServer):
    def __init__(self, *, service: MessageService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/status.v1.MessageService"
        self._endpoints = {
            "Watch": Endpoint[status_dot_v1_dot_message__pb2.MessageServiceWatchRequest, status_dot_v1_dot_message__pb2.MessageServiceWatchResponse](
                service_name="MessageService",
                name="Watch",
                function=getattr(service, "Watch"),
                input=status_dot_v1_dot_message__pb2.MessageServiceWatchRequest,
                output=status_dot_v1_dot_message__pb2.MessageServiceWatchResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "status.v1.MessageService"


class MessageServiceSync(Protocol):
    def Watch(self, req: status_dot_v1_dot_message__pb2.MessageServiceWatchRequest, ctx: ServiceContext) -> status_dot_v1_dot_message__pb2.MessageServiceWatchResponse: ...


class MessageServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: MessageServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/status.v1.MessageService"
        self._endpoints = {
            "Watch": Endpoint[status_dot_v1_dot_message__pb2.MessageServiceWatchRequest, status_dot_v1_dot_message__pb2.MessageServiceWatchResponse](
                service_name="MessageService",
                name="Watch",
                function=getattr(service, "Watch"),
                input=status_dot_v1_dot_message__pb2.MessageServiceWatchRequest,
                output=status_dot_v1_dot_message__pb2.MessageServiceWatchResponse,
                allowed_methods=("POST",),
            ),
        }

    def serviceName(self):
        return "status.v1.MessageService"


class MessageServiceClient(ConnecpyClient):
    def Watch(
        self,
        request: status_dot_v1_dot_message__pb2.MessageServiceWatchRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        **kwargs,
    ) -> status_dot_v1_dot_message__pb2.MessageServiceWatchResponse:
        method = "POST"
        return self._make_request(
            url=f"{server_path_prefix}/status.v1.MessageService/Watch",
            ctx=ctx,
            request=request,
            response_class=status_dot_v1_dot_message__pb2.MessageServiceWatchResponse,
            method=method,
            **kwargs,
        )


class AsyncMessageServiceClient(AsyncConnecpyClient):
    async def Watch(
        self,
        request: status_dot_v1_dot_message__pb2.MessageServiceWatchRequest,
        *,
        ctx: Optional[ClientContext] = None,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> status_dot_v1_dot_message__pb2.MessageServiceWatchResponse:
        method = "POST"
        return await self._make_request(
            url=f"{server_path_prefix}/status.v1.MessageService/Watch",
            ctx=ctx,
            request=request,
            response_class=status_dot_v1_dot_message__pb2.MessageServiceWatchResponse,
            method=method,
            session=session,
            **kwargs,
        )
