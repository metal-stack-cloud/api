// Code generated by mockery v2.16.0. DO NOT EDIT.

package apiv1connect

import (
	connect "github.com/bufbuild/connect-go"
	apiv1 "github.com/metal-stack-cloud/api/go/api/v1"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ProjectServiceHandler is an autogenerated mock type for the ProjectServiceHandler type
type ProjectServiceHandler struct {
	mock.Mock
}

// WatchRevision provides a mock function with given fields: _a0, _a1, _a2
func (_m *ProjectServiceHandler) WatchRevision(_a0 context.Context, _a1 *connect.Request[apiv1.ProjectServiceWatchRevisionRequest], _a2 *connect.ServerStream[apiv1.ProjectServiceWatchRevisionResponse]) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectServiceWatchRevisionRequest], *connect.ServerStream[apiv1.ProjectServiceWatchRevisionResponse]) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProjectServiceHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewProjectServiceHandler creates a new instance of ProjectServiceHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProjectServiceHandler(t mockConstructorTestingTNewProjectServiceHandler) *ProjectServiceHandler {
	mock := &ProjectServiceHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
