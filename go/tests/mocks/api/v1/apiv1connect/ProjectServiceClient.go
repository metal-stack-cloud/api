// Code generated by mockery v2.16.0. DO NOT EDIT.

package apiv1connect

import (
	connect "github.com/bufbuild/connect-go"
	apiv1 "github.com/metal-stack-cloud/api/go/api/v1"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ProjectServiceClient is an autogenerated mock type for the ProjectServiceClient type
type ProjectServiceClient struct {
	mock.Mock
}

// WatchRevision provides a mock function with given fields: _a0, _a1
func (_m *ProjectServiceClient) WatchRevision(_a0 context.Context, _a1 *connect.Request[apiv1.ProjectServiceWatchRevisionRequest]) (*connect.ServerStreamForClient[apiv1.ProjectServiceWatchRevisionResponse], error) {
	ret := _m.Called(_a0, _a1)

	var r0 *connect.ServerStreamForClient[apiv1.ProjectServiceWatchRevisionResponse]
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectServiceWatchRevisionRequest]) *connect.ServerStreamForClient[apiv1.ProjectServiceWatchRevisionResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ServerStreamForClient[apiv1.ProjectServiceWatchRevisionResponse])
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.ProjectServiceWatchRevisionRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProjectServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewProjectServiceClient creates a new instance of ProjectServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProjectServiceClient(t mockConstructorTestingTNewProjectServiceClient) *ProjectServiceClient {
	mock := &ProjectServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
