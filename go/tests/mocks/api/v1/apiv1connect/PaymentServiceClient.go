// Code generated by mockery v2.53.0. DO NOT EDIT.

package apiv1connect

import (
	connect "connectrpc.com/connect"
	apiv1 "github.com/metal-stack-cloud/api/go/api/v1"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// PaymentServiceClient is an autogenerated mock type for the PaymentServiceClient type
type PaymentServiceClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *PaymentServiceClient) Create(_a0 context.Context, _a1 *connect.Request[apiv1.PaymentServiceCreateRequest]) (*connect.Response[apiv1.PaymentServiceCreateResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *connect.Response[apiv1.PaymentServiceCreateResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.PaymentServiceCreateRequest]) (*connect.Response[apiv1.PaymentServiceCreateResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.PaymentServiceCreateRequest]) *connect.Response[apiv1.PaymentServiceCreateResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.PaymentServiceCreateResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.PaymentServiceCreateRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *PaymentServiceClient) Delete(_a0 context.Context, _a1 *connect.Request[apiv1.PaymentServiceDeleteRequest]) (*connect.Response[apiv1.PaymentServiceDeleteResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *connect.Response[apiv1.PaymentServiceDeleteResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.PaymentServiceDeleteRequest]) (*connect.Response[apiv1.PaymentServiceDeleteResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.PaymentServiceDeleteRequest]) *connect.Response[apiv1.PaymentServiceDeleteResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.PaymentServiceDeleteResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.PaymentServiceDeleteRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *PaymentServiceClient) Get(_a0 context.Context, _a1 *connect.Request[apiv1.PaymentServiceGetRequest]) (*connect.Response[apiv1.PaymentServiceGetResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *connect.Response[apiv1.PaymentServiceGetResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.PaymentServiceGetRequest]) (*connect.Response[apiv1.PaymentServiceGetResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.PaymentServiceGetRequest]) *connect.Response[apiv1.PaymentServiceGetResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.PaymentServiceGetResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.PaymentServiceGetRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultPrices provides a mock function with given fields: _a0, _a1
func (_m *PaymentServiceClient) GetDefaultPrices(_a0 context.Context, _a1 *connect.Request[apiv1.PaymentServiceGetDefaultPricesRequest]) (*connect.Response[apiv1.PaymentServiceGetDefaultPricesResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultPrices")
	}

	var r0 *connect.Response[apiv1.PaymentServiceGetDefaultPricesResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.PaymentServiceGetDefaultPricesRequest]) (*connect.Response[apiv1.PaymentServiceGetDefaultPricesResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.PaymentServiceGetDefaultPricesRequest]) *connect.Response[apiv1.PaymentServiceGetDefaultPricesResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.PaymentServiceGetDefaultPricesResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.PaymentServiceGetDefaultPricesRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoices provides a mock function with given fields: _a0, _a1
func (_m *PaymentServiceClient) GetInvoices(_a0 context.Context, _a1 *connect.Request[apiv1.PaymentServiceGetInvoicesRequest]) (*connect.Response[apiv1.PaymentServiceGetInvoicesResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoices")
	}

	var r0 *connect.Response[apiv1.PaymentServiceGetInvoicesResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.PaymentServiceGetInvoicesRequest]) (*connect.Response[apiv1.PaymentServiceGetInvoicesResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.PaymentServiceGetInvoicesRequest]) *connect.Response[apiv1.PaymentServiceGetInvoicesResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.PaymentServiceGetInvoicesResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.PaymentServiceGetInvoicesRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptionUsage provides a mock function with given fields: _a0, _a1
func (_m *PaymentServiceClient) GetSubscriptionUsage(_a0 context.Context, _a1 *connect.Request[apiv1.PaymentServiceGetSubscriptionUsageRequest]) (*connect.Response[apiv1.PaymentServiceGetSubscriptionUsageResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriptionUsage")
	}

	var r0 *connect.Response[apiv1.PaymentServiceGetSubscriptionUsageResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.PaymentServiceGetSubscriptionUsageRequest]) (*connect.Response[apiv1.PaymentServiceGetSubscriptionUsageResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.PaymentServiceGetSubscriptionUsageRequest]) *connect.Response[apiv1.PaymentServiceGetSubscriptionUsageResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.PaymentServiceGetSubscriptionUsageResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.PaymentServiceGetSubscriptionUsageRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasChargeableResources provides a mock function with given fields: _a0, _a1
func (_m *PaymentServiceClient) HasChargeableResources(_a0 context.Context, _a1 *connect.Request[apiv1.PaymentServiceHasChargeableResourcesRequest]) (*connect.Response[apiv1.PaymentServiceHasChargeableResourcesResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for HasChargeableResources")
	}

	var r0 *connect.Response[apiv1.PaymentServiceHasChargeableResourcesResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.PaymentServiceHasChargeableResourcesRequest]) (*connect.Response[apiv1.PaymentServiceHasChargeableResourcesResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.PaymentServiceHasChargeableResourcesRequest]) *connect.Response[apiv1.PaymentServiceHasChargeableResourcesResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.PaymentServiceHasChargeableResourcesResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.PaymentServiceHasChargeableResourcesRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasPaymentMethod provides a mock function with given fields: _a0, _a1
func (_m *PaymentServiceClient) HasPaymentMethod(_a0 context.Context, _a1 *connect.Request[apiv1.PaymentServiceHasPaymentMethodRequest]) (*connect.Response[apiv1.PaymentServiceHasPaymentMethodResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for HasPaymentMethod")
	}

	var r0 *connect.Response[apiv1.PaymentServiceHasPaymentMethodResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.PaymentServiceHasPaymentMethodRequest]) (*connect.Response[apiv1.PaymentServiceHasPaymentMethodResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.PaymentServiceHasPaymentMethodRequest]) *connect.Response[apiv1.PaymentServiceHasPaymentMethodResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.PaymentServiceHasPaymentMethodResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.PaymentServiceHasPaymentMethodRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *PaymentServiceClient) Update(_a0 context.Context, _a1 *connect.Request[apiv1.PaymentServiceUpdateRequest]) (*connect.Response[apiv1.PaymentServiceUpdateResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *connect.Response[apiv1.PaymentServiceUpdateResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.PaymentServiceUpdateRequest]) (*connect.Response[apiv1.PaymentServiceUpdateResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.PaymentServiceUpdateRequest]) *connect.Response[apiv1.PaymentServiceUpdateResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.PaymentServiceUpdateResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.PaymentServiceUpdateRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaymentServiceClient creates a new instance of PaymentServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentServiceClient {
	mock := &PaymentServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
