// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin/v1/payment.proto

package adminv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/metal-stack-cloud/api/go/admin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// PaymentServiceName is the fully-qualified name of the PaymentService service.
	PaymentServiceName = "admin.v1.PaymentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PaymentServiceListCouponsProcedure is the fully-qualified name of the PaymentService's
	// ListCoupons RPC.
	PaymentServiceListCouponsProcedure = "/admin.v1.PaymentService/ListCoupons"
	// PaymentServiceAddCouponToCustomerProcedure is the fully-qualified name of the PaymentService's
	// AddCouponToCustomer RPC.
	PaymentServiceAddCouponToCustomerProcedure = "/admin.v1.PaymentService/AddCouponToCustomer"
	// PaymentServiceDeleteTestUserProcedure is the fully-qualified name of the PaymentService's
	// DeleteTestUser RPC.
	PaymentServiceDeleteTestUserProcedure = "/admin.v1.PaymentService/DeleteTestUser"
)

// PaymentServiceClient is a client for the admin.v1.PaymentService service.
type PaymentServiceClient interface {
	ListCoupons(context.Context, *connect.Request[v1.PaymentServiceListCouponsRequest]) (*connect.Response[v1.PaymentServiceListCouponsResponse], error)
	AddCouponToCustomer(context.Context, *connect.Request[v1.PaymentServiceAddCouponToCustomerRequest]) (*connect.Response[v1.PaymentServiceAddCouponToCustomerResponse], error)
	DeleteTestUser(context.Context, *connect.Request[v1.PaymentServiceDeleteTestUserRequest]) (*connect.Response[v1.PaymentServiceDeleteTestUserResponse], error)
}

// NewPaymentServiceClient constructs a client for the admin.v1.PaymentService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPaymentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PaymentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &paymentServiceClient{
		listCoupons: connect.NewClient[v1.PaymentServiceListCouponsRequest, v1.PaymentServiceListCouponsResponse](
			httpClient,
			baseURL+PaymentServiceListCouponsProcedure,
			opts...,
		),
		addCouponToCustomer: connect.NewClient[v1.PaymentServiceAddCouponToCustomerRequest, v1.PaymentServiceAddCouponToCustomerResponse](
			httpClient,
			baseURL+PaymentServiceAddCouponToCustomerProcedure,
			opts...,
		),
		deleteTestUser: connect.NewClient[v1.PaymentServiceDeleteTestUserRequest, v1.PaymentServiceDeleteTestUserResponse](
			httpClient,
			baseURL+PaymentServiceDeleteTestUserProcedure,
			opts...,
		),
	}
}

// paymentServiceClient implements PaymentServiceClient.
type paymentServiceClient struct {
	listCoupons         *connect.Client[v1.PaymentServiceListCouponsRequest, v1.PaymentServiceListCouponsResponse]
	addCouponToCustomer *connect.Client[v1.PaymentServiceAddCouponToCustomerRequest, v1.PaymentServiceAddCouponToCustomerResponse]
	deleteTestUser      *connect.Client[v1.PaymentServiceDeleteTestUserRequest, v1.PaymentServiceDeleteTestUserResponse]
}

// ListCoupons calls admin.v1.PaymentService.ListCoupons.
func (c *paymentServiceClient) ListCoupons(ctx context.Context, req *connect.Request[v1.PaymentServiceListCouponsRequest]) (*connect.Response[v1.PaymentServiceListCouponsResponse], error) {
	return c.listCoupons.CallUnary(ctx, req)
}

// AddCouponToCustomer calls admin.v1.PaymentService.AddCouponToCustomer.
func (c *paymentServiceClient) AddCouponToCustomer(ctx context.Context, req *connect.Request[v1.PaymentServiceAddCouponToCustomerRequest]) (*connect.Response[v1.PaymentServiceAddCouponToCustomerResponse], error) {
	return c.addCouponToCustomer.CallUnary(ctx, req)
}

// DeleteTestUser calls admin.v1.PaymentService.DeleteTestUser.
func (c *paymentServiceClient) DeleteTestUser(ctx context.Context, req *connect.Request[v1.PaymentServiceDeleteTestUserRequest]) (*connect.Response[v1.PaymentServiceDeleteTestUserResponse], error) {
	return c.deleteTestUser.CallUnary(ctx, req)
}

// PaymentServiceHandler is an implementation of the admin.v1.PaymentService service.
type PaymentServiceHandler interface {
	ListCoupons(context.Context, *connect.Request[v1.PaymentServiceListCouponsRequest]) (*connect.Response[v1.PaymentServiceListCouponsResponse], error)
	AddCouponToCustomer(context.Context, *connect.Request[v1.PaymentServiceAddCouponToCustomerRequest]) (*connect.Response[v1.PaymentServiceAddCouponToCustomerResponse], error)
	DeleteTestUser(context.Context, *connect.Request[v1.PaymentServiceDeleteTestUserRequest]) (*connect.Response[v1.PaymentServiceDeleteTestUserResponse], error)
}

// NewPaymentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPaymentServiceHandler(svc PaymentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	paymentServiceListCouponsHandler := connect.NewUnaryHandler(
		PaymentServiceListCouponsProcedure,
		svc.ListCoupons,
		opts...,
	)
	paymentServiceAddCouponToCustomerHandler := connect.NewUnaryHandler(
		PaymentServiceAddCouponToCustomerProcedure,
		svc.AddCouponToCustomer,
		opts...,
	)
	paymentServiceDeleteTestUserHandler := connect.NewUnaryHandler(
		PaymentServiceDeleteTestUserProcedure,
		svc.DeleteTestUser,
		opts...,
	)
	return "/admin.v1.PaymentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PaymentServiceListCouponsProcedure:
			paymentServiceListCouponsHandler.ServeHTTP(w, r)
		case PaymentServiceAddCouponToCustomerProcedure:
			paymentServiceAddCouponToCustomerHandler.ServeHTTP(w, r)
		case PaymentServiceDeleteTestUserProcedure:
			paymentServiceDeleteTestUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPaymentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPaymentServiceHandler struct{}

func (UnimplementedPaymentServiceHandler) ListCoupons(context.Context, *connect.Request[v1.PaymentServiceListCouponsRequest]) (*connect.Response[v1.PaymentServiceListCouponsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.PaymentService.ListCoupons is not implemented"))
}

func (UnimplementedPaymentServiceHandler) AddCouponToCustomer(context.Context, *connect.Request[v1.PaymentServiceAddCouponToCustomerRequest]) (*connect.Response[v1.PaymentServiceAddCouponToCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.PaymentService.AddCouponToCustomer is not implemented"))
}

func (UnimplementedPaymentServiceHandler) DeleteTestUser(context.Context, *connect.Request[v1.PaymentServiceDeleteTestUserRequest]) (*connect.Response[v1.PaymentServiceDeleteTestUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.PaymentService.DeleteTestUser is not implemented"))
}
