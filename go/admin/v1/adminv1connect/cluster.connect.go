// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin/v1/cluster.proto

package adminv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/metal-stack-cloud/api/go/admin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ClusterServiceName is the fully-qualified name of the ClusterService service.
	ClusterServiceName = "admin.v1.ClusterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClusterServiceGetProcedure is the fully-qualified name of the ClusterService's Get RPC.
	ClusterServiceGetProcedure = "/admin.v1.ClusterService/Get"
	// ClusterServiceListProcedure is the fully-qualified name of the ClusterService's List RPC.
	ClusterServiceListProcedure = "/admin.v1.ClusterService/List"
	// ClusterServiceCredentialsProcedure is the fully-qualified name of the ClusterService's
	// Credentials RPC.
	ClusterServiceCredentialsProcedure = "/admin.v1.ClusterService/Credentials"
	// ClusterServiceOperateProcedure is the fully-qualified name of the ClusterService's Operate RPC.
	ClusterServiceOperateProcedure = "/admin.v1.ClusterService/Operate"
)

// ClusterServiceClient is a client for the admin.v1.ClusterService service.
type ClusterServiceClient interface {
	Get(context.Context, *connect_go.Request[v1.ClusterServiceGetRequest]) (*connect_go.Response[v1.ClusterServiceGetResponse], error)
	List(context.Context, *connect_go.Request[v1.ClusterServiceListRequest]) (*connect_go.Response[v1.ClusterServiceListResponse], error)
	Credentials(context.Context, *connect_go.Request[v1.ClusterServiceCredentialsRequest]) (*connect_go.Response[v1.ClusterServiceCredentialsResponse], error)
	Operate(context.Context, *connect_go.Request[v1.ClusterServiceOperateRequest]) (*connect_go.Response[v1.ClusterServiceOperateResponse], error)
}

// NewClusterServiceClient constructs a client for the admin.v1.ClusterService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClusterServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ClusterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &clusterServiceClient{
		get: connect_go.NewClient[v1.ClusterServiceGetRequest, v1.ClusterServiceGetResponse](
			httpClient,
			baseURL+ClusterServiceGetProcedure,
			opts...,
		),
		list: connect_go.NewClient[v1.ClusterServiceListRequest, v1.ClusterServiceListResponse](
			httpClient,
			baseURL+ClusterServiceListProcedure,
			opts...,
		),
		credentials: connect_go.NewClient[v1.ClusterServiceCredentialsRequest, v1.ClusterServiceCredentialsResponse](
			httpClient,
			baseURL+ClusterServiceCredentialsProcedure,
			opts...,
		),
		operate: connect_go.NewClient[v1.ClusterServiceOperateRequest, v1.ClusterServiceOperateResponse](
			httpClient,
			baseURL+ClusterServiceOperateProcedure,
			opts...,
		),
	}
}

// clusterServiceClient implements ClusterServiceClient.
type clusterServiceClient struct {
	get         *connect_go.Client[v1.ClusterServiceGetRequest, v1.ClusterServiceGetResponse]
	list        *connect_go.Client[v1.ClusterServiceListRequest, v1.ClusterServiceListResponse]
	credentials *connect_go.Client[v1.ClusterServiceCredentialsRequest, v1.ClusterServiceCredentialsResponse]
	operate     *connect_go.Client[v1.ClusterServiceOperateRequest, v1.ClusterServiceOperateResponse]
}

// Get calls admin.v1.ClusterService.Get.
func (c *clusterServiceClient) Get(ctx context.Context, req *connect_go.Request[v1.ClusterServiceGetRequest]) (*connect_go.Response[v1.ClusterServiceGetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls admin.v1.ClusterService.List.
func (c *clusterServiceClient) List(ctx context.Context, req *connect_go.Request[v1.ClusterServiceListRequest]) (*connect_go.Response[v1.ClusterServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Credentials calls admin.v1.ClusterService.Credentials.
func (c *clusterServiceClient) Credentials(ctx context.Context, req *connect_go.Request[v1.ClusterServiceCredentialsRequest]) (*connect_go.Response[v1.ClusterServiceCredentialsResponse], error) {
	return c.credentials.CallUnary(ctx, req)
}

// Operate calls admin.v1.ClusterService.Operate.
func (c *clusterServiceClient) Operate(ctx context.Context, req *connect_go.Request[v1.ClusterServiceOperateRequest]) (*connect_go.Response[v1.ClusterServiceOperateResponse], error) {
	return c.operate.CallUnary(ctx, req)
}

// ClusterServiceHandler is an implementation of the admin.v1.ClusterService service.
type ClusterServiceHandler interface {
	Get(context.Context, *connect_go.Request[v1.ClusterServiceGetRequest]) (*connect_go.Response[v1.ClusterServiceGetResponse], error)
	List(context.Context, *connect_go.Request[v1.ClusterServiceListRequest]) (*connect_go.Response[v1.ClusterServiceListResponse], error)
	Credentials(context.Context, *connect_go.Request[v1.ClusterServiceCredentialsRequest]) (*connect_go.Response[v1.ClusterServiceCredentialsResponse], error)
	Operate(context.Context, *connect_go.Request[v1.ClusterServiceOperateRequest]) (*connect_go.Response[v1.ClusterServiceOperateResponse], error)
}

// NewClusterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClusterServiceHandler(svc ClusterServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	clusterServiceGetHandler := connect_go.NewUnaryHandler(
		ClusterServiceGetProcedure,
		svc.Get,
		opts...,
	)
	clusterServiceListHandler := connect_go.NewUnaryHandler(
		ClusterServiceListProcedure,
		svc.List,
		opts...,
	)
	clusterServiceCredentialsHandler := connect_go.NewUnaryHandler(
		ClusterServiceCredentialsProcedure,
		svc.Credentials,
		opts...,
	)
	clusterServiceOperateHandler := connect_go.NewUnaryHandler(
		ClusterServiceOperateProcedure,
		svc.Operate,
		opts...,
	)
	return "/admin.v1.ClusterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClusterServiceGetProcedure:
			clusterServiceGetHandler.ServeHTTP(w, r)
		case ClusterServiceListProcedure:
			clusterServiceListHandler.ServeHTTP(w, r)
		case ClusterServiceCredentialsProcedure:
			clusterServiceCredentialsHandler.ServeHTTP(w, r)
		case ClusterServiceOperateProcedure:
			clusterServiceOperateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClusterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClusterServiceHandler struct{}

func (UnimplementedClusterServiceHandler) Get(context.Context, *connect_go.Request[v1.ClusterServiceGetRequest]) (*connect_go.Response[v1.ClusterServiceGetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("admin.v1.ClusterService.Get is not implemented"))
}

func (UnimplementedClusterServiceHandler) List(context.Context, *connect_go.Request[v1.ClusterServiceListRequest]) (*connect_go.Response[v1.ClusterServiceListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("admin.v1.ClusterService.List is not implemented"))
}

func (UnimplementedClusterServiceHandler) Credentials(context.Context, *connect_go.Request[v1.ClusterServiceCredentialsRequest]) (*connect_go.Response[v1.ClusterServiceCredentialsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("admin.v1.ClusterService.Credentials is not implemented"))
}

func (UnimplementedClusterServiceHandler) Operate(context.Context, *connect_go.Request[v1.ClusterServiceOperateRequest]) (*connect_go.Response[v1.ClusterServiceOperateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("admin.v1.ClusterService.Operate is not implemented"))
}
