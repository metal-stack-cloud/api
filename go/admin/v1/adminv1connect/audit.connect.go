// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin/v1/audit.proto

package adminv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/metal-stack-cloud/api/go/admin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuditServiceName is the fully-qualified name of the AuditService service.
	AuditServiceName = "admin.v1.AuditService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuditServiceGetProcedure is the fully-qualified name of the AuditService's Get RPC.
	AuditServiceGetProcedure = "/admin.v1.AuditService/Get"
	// AuditServiceListProcedure is the fully-qualified name of the AuditService's List RPC.
	AuditServiceListProcedure = "/admin.v1.AuditService/List"
)

// AuditServiceClient is a client for the admin.v1.AuditService service.
type AuditServiceClient interface {
	// Get an audit trace
	Get(context.Context, *connect.Request[v1.AuditServiceGetRequest]) (*connect.Response[v1.AuditServiceGetResponse], error)
	// List all audit traces
	List(context.Context, *connect.Request[v1.AuditServiceListRequest]) (*connect.Response[v1.AuditServiceListResponse], error)
}

// NewAuditServiceClient constructs a client for the admin.v1.AuditService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuditServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuditServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	auditServiceMethods := v1.File_admin_v1_audit_proto.Services().ByName("AuditService").Methods()
	return &auditServiceClient{
		get: connect.NewClient[v1.AuditServiceGetRequest, v1.AuditServiceGetResponse](
			httpClient,
			baseURL+AuditServiceGetProcedure,
			connect.WithSchema(auditServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v1.AuditServiceListRequest, v1.AuditServiceListResponse](
			httpClient,
			baseURL+AuditServiceListProcedure,
			connect.WithSchema(auditServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
	}
}

// auditServiceClient implements AuditServiceClient.
type auditServiceClient struct {
	get  *connect.Client[v1.AuditServiceGetRequest, v1.AuditServiceGetResponse]
	list *connect.Client[v1.AuditServiceListRequest, v1.AuditServiceListResponse]
}

// Get calls admin.v1.AuditService.Get.
func (c *auditServiceClient) Get(ctx context.Context, req *connect.Request[v1.AuditServiceGetRequest]) (*connect.Response[v1.AuditServiceGetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls admin.v1.AuditService.List.
func (c *auditServiceClient) List(ctx context.Context, req *connect.Request[v1.AuditServiceListRequest]) (*connect.Response[v1.AuditServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// AuditServiceHandler is an implementation of the admin.v1.AuditService service.
type AuditServiceHandler interface {
	// Get an audit trace
	Get(context.Context, *connect.Request[v1.AuditServiceGetRequest]) (*connect.Response[v1.AuditServiceGetResponse], error)
	// List all audit traces
	List(context.Context, *connect.Request[v1.AuditServiceListRequest]) (*connect.Response[v1.AuditServiceListResponse], error)
}

// NewAuditServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuditServiceHandler(svc AuditServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	auditServiceMethods := v1.File_admin_v1_audit_proto.Services().ByName("AuditService").Methods()
	auditServiceGetHandler := connect.NewUnaryHandler(
		AuditServiceGetProcedure,
		svc.Get,
		connect.WithSchema(auditServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	auditServiceListHandler := connect.NewUnaryHandler(
		AuditServiceListProcedure,
		svc.List,
		connect.WithSchema(auditServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	return "/admin.v1.AuditService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuditServiceGetProcedure:
			auditServiceGetHandler.ServeHTTP(w, r)
		case AuditServiceListProcedure:
			auditServiceListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuditServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuditServiceHandler struct{}

func (UnimplementedAuditServiceHandler) Get(context.Context, *connect.Request[v1.AuditServiceGetRequest]) (*connect.Response[v1.AuditServiceGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AuditService.Get is not implemented"))
}

func (UnimplementedAuditServiceHandler) List(context.Context, *connect.Request[v1.AuditServiceListRequest]) (*connect.Response[v1.AuditServiceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AuditService.List is not implemented"))
}
