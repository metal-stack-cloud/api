// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin/v1/tenant.proto

package adminv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/metal-stack-cloud/api/go/admin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TenantServiceName is the fully-qualified name of the TenantService service.
	TenantServiceName = "admin.v1.TenantService"
)

// TenantServiceClient is a client for the admin.v1.TenantService service.
type TenantServiceClient interface {
	List(context.Context, *connect_go.Request[v1.TenantServiceListRequest]) (*connect_go.Response[v1.TenantServiceListResponse], error)
	Admit(context.Context, *connect_go.Request[v1.TenantServiceAdmitRequest]) (*connect_go.Response[v1.TenantServiceAdmitResponse], error)
}

// NewTenantServiceClient constructs a client for the admin.v1.TenantService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTenantServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TenantServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tenantServiceClient{
		list: connect_go.NewClient[v1.TenantServiceListRequest, v1.TenantServiceListResponse](
			httpClient,
			baseURL+"/admin.v1.TenantService/List",
			opts...,
		),
		admit: connect_go.NewClient[v1.TenantServiceAdmitRequest, v1.TenantServiceAdmitResponse](
			httpClient,
			baseURL+"/admin.v1.TenantService/Admit",
			opts...,
		),
	}
}

// tenantServiceClient implements TenantServiceClient.
type tenantServiceClient struct {
	list  *connect_go.Client[v1.TenantServiceListRequest, v1.TenantServiceListResponse]
	admit *connect_go.Client[v1.TenantServiceAdmitRequest, v1.TenantServiceAdmitResponse]
}

// List calls admin.v1.TenantService.List.
func (c *tenantServiceClient) List(ctx context.Context, req *connect_go.Request[v1.TenantServiceListRequest]) (*connect_go.Response[v1.TenantServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Admit calls admin.v1.TenantService.Admit.
func (c *tenantServiceClient) Admit(ctx context.Context, req *connect_go.Request[v1.TenantServiceAdmitRequest]) (*connect_go.Response[v1.TenantServiceAdmitResponse], error) {
	return c.admit.CallUnary(ctx, req)
}

// TenantServiceHandler is an implementation of the admin.v1.TenantService service.
type TenantServiceHandler interface {
	List(context.Context, *connect_go.Request[v1.TenantServiceListRequest]) (*connect_go.Response[v1.TenantServiceListResponse], error)
	Admit(context.Context, *connect_go.Request[v1.TenantServiceAdmitRequest]) (*connect_go.Response[v1.TenantServiceAdmitResponse], error)
}

// NewTenantServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTenantServiceHandler(svc TenantServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/admin.v1.TenantService/List", connect_go.NewUnaryHandler(
		"/admin.v1.TenantService/List",
		svc.List,
		opts...,
	))
	mux.Handle("/admin.v1.TenantService/Admit", connect_go.NewUnaryHandler(
		"/admin.v1.TenantService/Admit",
		svc.Admit,
		opts...,
	))
	return "/admin.v1.TenantService/", mux
}

// UnimplementedTenantServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTenantServiceHandler struct{}

func (UnimplementedTenantServiceHandler) List(context.Context, *connect_go.Request[v1.TenantServiceListRequest]) (*connect_go.Response[v1.TenantServiceListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("admin.v1.TenantService.List is not implemented"))
}

func (UnimplementedTenantServiceHandler) Admit(context.Context, *connect_go.Request[v1.TenantServiceAdmitRequest]) (*connect_go.Response[v1.TenantServiceAdmitResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("admin.v1.TenantService.Admit is not implemented"))
}
