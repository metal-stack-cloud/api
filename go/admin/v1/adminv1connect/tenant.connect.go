// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin/v1/tenant.proto

package adminv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/metal-stack-cloud/api/go/admin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TenantServiceName is the fully-qualified name of the TenantService service.
	TenantServiceName = "admin.v1.TenantService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TenantServiceListProcedure is the fully-qualified name of the TenantService's List RPC.
	TenantServiceListProcedure = "/admin.v1.TenantService/List"
	// TenantServiceAdmitProcedure is the fully-qualified name of the TenantService's Admit RPC.
	TenantServiceAdmitProcedure = "/admin.v1.TenantService/Admit"
	// TenantServiceRevokeProcedure is the fully-qualified name of the TenantService's Revoke RPC.
	TenantServiceRevokeProcedure = "/admin.v1.TenantService/Revoke"
	// TenantServiceAddMemberProcedure is the fully-qualified name of the TenantService's AddMember RPC.
	TenantServiceAddMemberProcedure = "/admin.v1.TenantService/AddMember"
	// TenantServiceRemoveMemberProcedure is the fully-qualified name of the TenantService's
	// RemoveMember RPC.
	TenantServiceRemoveMemberProcedure = "/admin.v1.TenantService/RemoveMember"
	// TenantServiceRemoveTenantProcedure is the fully-qualified name of the TenantService's
	// RemoveTenant RPC.
	TenantServiceRemoveTenantProcedure = "/admin.v1.TenantService/RemoveTenant"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	tenantServiceServiceDescriptor            = v1.File_admin_v1_tenant_proto.Services().ByName("TenantService")
	tenantServiceListMethodDescriptor         = tenantServiceServiceDescriptor.Methods().ByName("List")
	tenantServiceAdmitMethodDescriptor        = tenantServiceServiceDescriptor.Methods().ByName("Admit")
	tenantServiceRevokeMethodDescriptor       = tenantServiceServiceDescriptor.Methods().ByName("Revoke")
	tenantServiceAddMemberMethodDescriptor    = tenantServiceServiceDescriptor.Methods().ByName("AddMember")
	tenantServiceRemoveMemberMethodDescriptor = tenantServiceServiceDescriptor.Methods().ByName("RemoveMember")
	tenantServiceRemoveTenantMethodDescriptor = tenantServiceServiceDescriptor.Methods().ByName("RemoveTenant")
)

// TenantServiceClient is a client for the admin.v1.TenantService service.
type TenantServiceClient interface {
	// List tenants
	List(context.Context, *connect.Request[v1.TenantServiceListRequest]) (*connect.Response[v1.TenantServiceListResponse], error)
	// Admit a tenant
	Admit(context.Context, *connect.Request[v1.TenantServiceAdmitRequest]) (*connect.Response[v1.TenantServiceAdmitResponse], error)
	// Revoke a tenant
	Revoke(context.Context, *connect.Request[v1.TenantServiceRevokeRequest]) (*connect.Response[v1.TenantServiceRevokeResponse], error)
	// Add a member to a tenant
	AddMember(context.Context, *connect.Request[v1.TenantServiceAddMemberRequest]) (*connect.Response[v1.TenantServiceAddMemberResponse], error)
	// remove a member from a tenant
	RemoveMember(context.Context, *connect.Request[v1.TenantServiceRemoveMemberRequest]) (*connect.Response[v1.TenantServiceRemoveMemberResponse], error)
	// Remove a tenant
	RemoveTenant(context.Context, *connect.Request[v1.TenantServiceRemoveTenantRequest]) (*connect.Response[v1.TenantServiceRemoveTenantResponse], error)
}

// NewTenantServiceClient constructs a client for the admin.v1.TenantService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTenantServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TenantServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tenantServiceClient{
		list: connect.NewClient[v1.TenantServiceListRequest, v1.TenantServiceListResponse](
			httpClient,
			baseURL+TenantServiceListProcedure,
			connect.WithSchema(tenantServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		admit: connect.NewClient[v1.TenantServiceAdmitRequest, v1.TenantServiceAdmitResponse](
			httpClient,
			baseURL+TenantServiceAdmitProcedure,
			connect.WithSchema(tenantServiceAdmitMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		revoke: connect.NewClient[v1.TenantServiceRevokeRequest, v1.TenantServiceRevokeResponse](
			httpClient,
			baseURL+TenantServiceRevokeProcedure,
			connect.WithSchema(tenantServiceRevokeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addMember: connect.NewClient[v1.TenantServiceAddMemberRequest, v1.TenantServiceAddMemberResponse](
			httpClient,
			baseURL+TenantServiceAddMemberProcedure,
			connect.WithSchema(tenantServiceAddMemberMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeMember: connect.NewClient[v1.TenantServiceRemoveMemberRequest, v1.TenantServiceRemoveMemberResponse](
			httpClient,
			baseURL+TenantServiceRemoveMemberProcedure,
			connect.WithSchema(tenantServiceRemoveMemberMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeTenant: connect.NewClient[v1.TenantServiceRemoveTenantRequest, v1.TenantServiceRemoveTenantResponse](
			httpClient,
			baseURL+TenantServiceRemoveTenantProcedure,
			connect.WithSchema(tenantServiceRemoveTenantMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// tenantServiceClient implements TenantServiceClient.
type tenantServiceClient struct {
	list         *connect.Client[v1.TenantServiceListRequest, v1.TenantServiceListResponse]
	admit        *connect.Client[v1.TenantServiceAdmitRequest, v1.TenantServiceAdmitResponse]
	revoke       *connect.Client[v1.TenantServiceRevokeRequest, v1.TenantServiceRevokeResponse]
	addMember    *connect.Client[v1.TenantServiceAddMemberRequest, v1.TenantServiceAddMemberResponse]
	removeMember *connect.Client[v1.TenantServiceRemoveMemberRequest, v1.TenantServiceRemoveMemberResponse]
	removeTenant *connect.Client[v1.TenantServiceRemoveTenantRequest, v1.TenantServiceRemoveTenantResponse]
}

// List calls admin.v1.TenantService.List.
func (c *tenantServiceClient) List(ctx context.Context, req *connect.Request[v1.TenantServiceListRequest]) (*connect.Response[v1.TenantServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Admit calls admin.v1.TenantService.Admit.
func (c *tenantServiceClient) Admit(ctx context.Context, req *connect.Request[v1.TenantServiceAdmitRequest]) (*connect.Response[v1.TenantServiceAdmitResponse], error) {
	return c.admit.CallUnary(ctx, req)
}

// Revoke calls admin.v1.TenantService.Revoke.
func (c *tenantServiceClient) Revoke(ctx context.Context, req *connect.Request[v1.TenantServiceRevokeRequest]) (*connect.Response[v1.TenantServiceRevokeResponse], error) {
	return c.revoke.CallUnary(ctx, req)
}

// AddMember calls admin.v1.TenantService.AddMember.
func (c *tenantServiceClient) AddMember(ctx context.Context, req *connect.Request[v1.TenantServiceAddMemberRequest]) (*connect.Response[v1.TenantServiceAddMemberResponse], error) {
	return c.addMember.CallUnary(ctx, req)
}

// RemoveMember calls admin.v1.TenantService.RemoveMember.
func (c *tenantServiceClient) RemoveMember(ctx context.Context, req *connect.Request[v1.TenantServiceRemoveMemberRequest]) (*connect.Response[v1.TenantServiceRemoveMemberResponse], error) {
	return c.removeMember.CallUnary(ctx, req)
}

// RemoveTenant calls admin.v1.TenantService.RemoveTenant.
func (c *tenantServiceClient) RemoveTenant(ctx context.Context, req *connect.Request[v1.TenantServiceRemoveTenantRequest]) (*connect.Response[v1.TenantServiceRemoveTenantResponse], error) {
	return c.removeTenant.CallUnary(ctx, req)
}

// TenantServiceHandler is an implementation of the admin.v1.TenantService service.
type TenantServiceHandler interface {
	// List tenants
	List(context.Context, *connect.Request[v1.TenantServiceListRequest]) (*connect.Response[v1.TenantServiceListResponse], error)
	// Admit a tenant
	Admit(context.Context, *connect.Request[v1.TenantServiceAdmitRequest]) (*connect.Response[v1.TenantServiceAdmitResponse], error)
	// Revoke a tenant
	Revoke(context.Context, *connect.Request[v1.TenantServiceRevokeRequest]) (*connect.Response[v1.TenantServiceRevokeResponse], error)
	// Add a member to a tenant
	AddMember(context.Context, *connect.Request[v1.TenantServiceAddMemberRequest]) (*connect.Response[v1.TenantServiceAddMemberResponse], error)
	// remove a member from a tenant
	RemoveMember(context.Context, *connect.Request[v1.TenantServiceRemoveMemberRequest]) (*connect.Response[v1.TenantServiceRemoveMemberResponse], error)
	// Remove a tenant
	RemoveTenant(context.Context, *connect.Request[v1.TenantServiceRemoveTenantRequest]) (*connect.Response[v1.TenantServiceRemoveTenantResponse], error)
}

// NewTenantServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTenantServiceHandler(svc TenantServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tenantServiceListHandler := connect.NewUnaryHandler(
		TenantServiceListProcedure,
		svc.List,
		connect.WithSchema(tenantServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceAdmitHandler := connect.NewUnaryHandler(
		TenantServiceAdmitProcedure,
		svc.Admit,
		connect.WithSchema(tenantServiceAdmitMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceRevokeHandler := connect.NewUnaryHandler(
		TenantServiceRevokeProcedure,
		svc.Revoke,
		connect.WithSchema(tenantServiceRevokeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceAddMemberHandler := connect.NewUnaryHandler(
		TenantServiceAddMemberProcedure,
		svc.AddMember,
		connect.WithSchema(tenantServiceAddMemberMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceRemoveMemberHandler := connect.NewUnaryHandler(
		TenantServiceRemoveMemberProcedure,
		svc.RemoveMember,
		connect.WithSchema(tenantServiceRemoveMemberMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceRemoveTenantHandler := connect.NewUnaryHandler(
		TenantServiceRemoveTenantProcedure,
		svc.RemoveTenant,
		connect.WithSchema(tenantServiceRemoveTenantMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/admin.v1.TenantService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TenantServiceListProcedure:
			tenantServiceListHandler.ServeHTTP(w, r)
		case TenantServiceAdmitProcedure:
			tenantServiceAdmitHandler.ServeHTTP(w, r)
		case TenantServiceRevokeProcedure:
			tenantServiceRevokeHandler.ServeHTTP(w, r)
		case TenantServiceAddMemberProcedure:
			tenantServiceAddMemberHandler.ServeHTTP(w, r)
		case TenantServiceRemoveMemberProcedure:
			tenantServiceRemoveMemberHandler.ServeHTTP(w, r)
		case TenantServiceRemoveTenantProcedure:
			tenantServiceRemoveTenantHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTenantServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTenantServiceHandler struct{}

func (UnimplementedTenantServiceHandler) List(context.Context, *connect.Request[v1.TenantServiceListRequest]) (*connect.Response[v1.TenantServiceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TenantService.List is not implemented"))
}

func (UnimplementedTenantServiceHandler) Admit(context.Context, *connect.Request[v1.TenantServiceAdmitRequest]) (*connect.Response[v1.TenantServiceAdmitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TenantService.Admit is not implemented"))
}

func (UnimplementedTenantServiceHandler) Revoke(context.Context, *connect.Request[v1.TenantServiceRevokeRequest]) (*connect.Response[v1.TenantServiceRevokeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TenantService.Revoke is not implemented"))
}

func (UnimplementedTenantServiceHandler) AddMember(context.Context, *connect.Request[v1.TenantServiceAddMemberRequest]) (*connect.Response[v1.TenantServiceAddMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TenantService.AddMember is not implemented"))
}

func (UnimplementedTenantServiceHandler) RemoveMember(context.Context, *connect.Request[v1.TenantServiceRemoveMemberRequest]) (*connect.Response[v1.TenantServiceRemoveMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TenantService.RemoveMember is not implemented"))
}

func (UnimplementedTenantServiceHandler) RemoveTenant(context.Context, *connect.Request[v1.TenantServiceRemoveTenantRequest]) (*connect.Response[v1.TenantServiceRemoveTenantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TenantService.RemoveTenant is not implemented"))
}
