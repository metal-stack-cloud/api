// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin/v1/token.proto

package adminv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/metal-stack-cloud/api/go/admin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TokenServiceName is the fully-qualified name of the TokenService service.
	TokenServiceName = "admin.v1.TokenService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TokenServiceListProcedure is the fully-qualified name of the TokenService's List RPC.
	TokenServiceListProcedure = "/admin.v1.TokenService/List"
	// TokenServiceRevokeProcedure is the fully-qualified name of the TokenService's Revoke RPC.
	TokenServiceRevokeProcedure = "/admin.v1.TokenService/Revoke"
)

// TokenServiceClient is a client for the admin.v1.TokenService service.
type TokenServiceClient interface {
	// List tokens
	List(context.Context, *connect.Request[v1.TokenServiceListRequest]) (*connect.Response[v1.TokenServiceListResponse], error)
	// Revoke a token
	Revoke(context.Context, *connect.Request[v1.TokenServiceRevokeRequest]) (*connect.Response[v1.TokenServiceRevokeResponse], error)
}

// NewTokenServiceClient constructs a client for the admin.v1.TokenService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTokenServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TokenServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tokenServiceMethods := v1.File_admin_v1_token_proto.Services().ByName("TokenService").Methods()
	return &tokenServiceClient{
		list: connect.NewClient[v1.TokenServiceListRequest, v1.TokenServiceListResponse](
			httpClient,
			baseURL+TokenServiceListProcedure,
			connect.WithSchema(tokenServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		revoke: connect.NewClient[v1.TokenServiceRevokeRequest, v1.TokenServiceRevokeResponse](
			httpClient,
			baseURL+TokenServiceRevokeProcedure,
			connect.WithSchema(tokenServiceMethods.ByName("Revoke")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tokenServiceClient implements TokenServiceClient.
type tokenServiceClient struct {
	list   *connect.Client[v1.TokenServiceListRequest, v1.TokenServiceListResponse]
	revoke *connect.Client[v1.TokenServiceRevokeRequest, v1.TokenServiceRevokeResponse]
}

// List calls admin.v1.TokenService.List.
func (c *tokenServiceClient) List(ctx context.Context, req *connect.Request[v1.TokenServiceListRequest]) (*connect.Response[v1.TokenServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Revoke calls admin.v1.TokenService.Revoke.
func (c *tokenServiceClient) Revoke(ctx context.Context, req *connect.Request[v1.TokenServiceRevokeRequest]) (*connect.Response[v1.TokenServiceRevokeResponse], error) {
	return c.revoke.CallUnary(ctx, req)
}

// TokenServiceHandler is an implementation of the admin.v1.TokenService service.
type TokenServiceHandler interface {
	// List tokens
	List(context.Context, *connect.Request[v1.TokenServiceListRequest]) (*connect.Response[v1.TokenServiceListResponse], error)
	// Revoke a token
	Revoke(context.Context, *connect.Request[v1.TokenServiceRevokeRequest]) (*connect.Response[v1.TokenServiceRevokeResponse], error)
}

// NewTokenServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTokenServiceHandler(svc TokenServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tokenServiceMethods := v1.File_admin_v1_token_proto.Services().ByName("TokenService").Methods()
	tokenServiceListHandler := connect.NewUnaryHandler(
		TokenServiceListProcedure,
		svc.List,
		connect.WithSchema(tokenServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	tokenServiceRevokeHandler := connect.NewUnaryHandler(
		TokenServiceRevokeProcedure,
		svc.Revoke,
		connect.WithSchema(tokenServiceMethods.ByName("Revoke")),
		connect.WithHandlerOptions(opts...),
	)
	return "/admin.v1.TokenService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TokenServiceListProcedure:
			tokenServiceListHandler.ServeHTTP(w, r)
		case TokenServiceRevokeProcedure:
			tokenServiceRevokeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTokenServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTokenServiceHandler struct{}

func (UnimplementedTokenServiceHandler) List(context.Context, *connect.Request[v1.TokenServiceListRequest]) (*connect.Response[v1.TokenServiceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TokenService.List is not implemented"))
}

func (UnimplementedTokenServiceHandler) Revoke(context.Context, *connect.Request[v1.TokenServiceRevokeRequest]) (*connect.Response[v1.TokenServiceRevokeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TokenService.Revoke is not implemented"))
}
