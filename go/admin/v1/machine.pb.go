// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: admin/v1/machine.proto

package adminv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Machine is a metal-api machine
type Machine struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Uuid of this machine
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Name of the machine
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the machine
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Project this machine belongs to
	Project string `protobuf:"bytes,4,opt,name=project,proto3" json:"project,omitempty"`
	// Image which is installed on this machine
	Image string `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	// Size of this machine
	Size string `protobuf:"bytes,6,opt,name=size,proto3" json:"size,omitempty"`
	// MachineNetworks is a list of networks this machine is connected to
	MachineNetworks []*MachineNetwork `protobuf:"bytes,7,rep,name=machine_networks,json=machineNetworks,proto3" json:"machine_networks,omitempty"`
	// Hostname of this machine
	Hostname string `protobuf:"bytes,8,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// UserDate which are used for bootstrapping
	UserData string `protobuf:"bytes,9,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
	// Role of this machine, can be either machine or firewall
	Role string `protobuf:"bytes,10,opt,name=role,proto3" json:"role,omitempty"`
	// Creator is the user who ordered this machine
	Creator string `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
	// Created is the date when this machine was created
	Created *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=created,proto3" json:"created,omitempty"`
	// Partition where this machine resides
	Partition string `protobuf:"bytes,13,opt,name=partition,proto3" json:"partition,omitempty"`
	// Rack where this machine resides
	Rack string `protobuf:"bytes,14,opt,name=rack,proto3" json:"rack,omitempty"`
	// State of this machine
	State string `protobuf:"bytes,15,opt,name=state,proto3" json:"state,omitempty"`
	// Liveliness of this machine
	Liveliness string `protobuf:"bytes,16,opt,name=liveliness,proto3" json:"liveliness,omitempty"`
	// Tags put on this machine
	Tags []string `protobuf:"bytes,17,rep,name=tags,proto3" json:"tags,omitempty"`
	// Vpn details for this machine if any
	Vpn           *VPN `protobuf:"bytes,18,opt,name=vpn,proto3" json:"vpn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Machine) Reset() {
	*x = Machine{}
	mi := &file_admin_v1_machine_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Machine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine) ProtoMessage() {}

func (x *Machine) ProtoReflect() protoreflect.Message {
	mi := &file_admin_v1_machine_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machine.ProtoReflect.Descriptor instead.
func (*Machine) Descriptor() ([]byte, []int) {
	return file_admin_v1_machine_proto_rawDescGZIP(), []int{0}
}

func (x *Machine) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Machine) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Machine) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Machine) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *Machine) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Machine) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *Machine) GetMachineNetworks() []*MachineNetwork {
	if x != nil {
		return x.MachineNetworks
	}
	return nil
}

func (x *Machine) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Machine) GetUserData() string {
	if x != nil {
		return x.UserData
	}
	return ""
}

func (x *Machine) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Machine) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Machine) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Machine) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *Machine) GetRack() string {
	if x != nil {
		return x.Rack
	}
	return ""
}

func (x *Machine) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Machine) GetLiveliness() string {
	if x != nil {
		return x.Liveliness
	}
	return ""
}

func (x *Machine) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Machine) GetVpn() *VPN {
	if x != nil {
		return x.Vpn
	}
	return nil
}

// MachineNetwork describes the details of the network connectivity of a machine
type MachineNetwork struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Network is the uuid of this network
	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	// Prefixes available in this network
	Prefixes []string `protobuf:"bytes,2,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	// Ips attached for the machine in this network
	Ips []string `protobuf:"bytes,3,rep,name=ips,proto3" json:"ips,omitempty"`
	// DestinationPrefixes define for which prefixes destination routes are defined
	DestinationPrefixes []string `protobuf:"bytes,4,rep,name=destination_prefixes,json=destinationPrefixes,proto3" json:"destination_prefixes,omitempty"`
	// NetworkType of this network
	NetworkType string `protobuf:"bytes,5,opt,name=network_type,json=networkType,proto3" json:"network_type,omitempty"`
	// Vrf is the VRF number of this network
	Vrf uint32 `protobuf:"varint,6,opt,name=vrf,proto3" json:"vrf,omitempty"`
	// Asn is the ASN number of this machine in this network
	Asn           int64 `protobuf:"varint,7,opt,name=asn,proto3" json:"asn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineNetwork) Reset() {
	*x = MachineNetwork{}
	mi := &file_admin_v1_machine_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineNetwork) ProtoMessage() {}

func (x *MachineNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_admin_v1_machine_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineNetwork.ProtoReflect.Descriptor instead.
func (*MachineNetwork) Descriptor() ([]byte, []int) {
	return file_admin_v1_machine_proto_rawDescGZIP(), []int{1}
}

func (x *MachineNetwork) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *MachineNetwork) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *MachineNetwork) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *MachineNetwork) GetDestinationPrefixes() []string {
	if x != nil {
		return x.DestinationPrefixes
	}
	return nil
}

func (x *MachineNetwork) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *MachineNetwork) GetVrf() uint32 {
	if x != nil {
		return x.Vrf
	}
	return 0
}

func (x *MachineNetwork) GetAsn() int64 {
	if x != nil {
		return x.Asn
	}
	return 0
}

// VPN Details for a machine
type VPN struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Address is the ipv4 or ipv6 ip address of the machine in the VPN
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Authkey is the authentication key to join the network
	Authkey       string `protobuf:"bytes,2,opt,name=authkey,proto3" json:"authkey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VPN) Reset() {
	*x = VPN{}
	mi := &file_admin_v1_machine_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VPN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPN) ProtoMessage() {}

func (x *VPN) ProtoReflect() protoreflect.Message {
	mi := &file_admin_v1_machine_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPN.ProtoReflect.Descriptor instead.
func (*VPN) Descriptor() ([]byte, []int) {
	return file_admin_v1_machine_proto_rawDescGZIP(), []int{2}
}

func (x *VPN) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *VPN) GetAuthkey() string {
	if x != nil {
		return x.Authkey
	}
	return ""
}

var File_admin_v1_machine_proto protoreflect.FileDescriptor

const file_admin_v1_machine_proto_rawDesc = "" +
	"\n" +
	"\x16admin/v1/machine.proto\x12\badmin.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\x96\x04\n" +
	"\aMachine\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\tR\x04uuid\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x18\n" +
	"\aproject\x18\x04 \x01(\tR\aproject\x12\x14\n" +
	"\x05image\x18\x05 \x01(\tR\x05image\x12\x12\n" +
	"\x04size\x18\x06 \x01(\tR\x04size\x12C\n" +
	"\x10machine_networks\x18\a \x03(\v2\x18.admin.v1.MachineNetworkR\x0fmachineNetworks\x12\x1a\n" +
	"\bhostname\x18\b \x01(\tR\bhostname\x12\x1b\n" +
	"\tuser_data\x18\t \x01(\tR\buserData\x12\x12\n" +
	"\x04role\x18\n" +
	" \x01(\tR\x04role\x12\x18\n" +
	"\acreator\x18\v \x01(\tR\acreator\x124\n" +
	"\acreated\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\acreated\x12\x1c\n" +
	"\tpartition\x18\r \x01(\tR\tpartition\x12\x12\n" +
	"\x04rack\x18\x0e \x01(\tR\x04rack\x12\x14\n" +
	"\x05state\x18\x0f \x01(\tR\x05state\x12\x1e\n" +
	"\n" +
	"liveliness\x18\x10 \x01(\tR\n" +
	"liveliness\x12\x12\n" +
	"\x04tags\x18\x11 \x03(\tR\x04tags\x12\x1f\n" +
	"\x03vpn\x18\x12 \x01(\v2\r.admin.v1.VPNR\x03vpn\"\xd2\x01\n" +
	"\x0eMachineNetwork\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x1a\n" +
	"\bprefixes\x18\x02 \x03(\tR\bprefixes\x12\x10\n" +
	"\x03ips\x18\x03 \x03(\tR\x03ips\x121\n" +
	"\x14destination_prefixes\x18\x04 \x03(\tR\x13destinationPrefixes\x12!\n" +
	"\fnetwork_type\x18\x05 \x01(\tR\vnetworkType\x12\x10\n" +
	"\x03vrf\x18\x06 \x01(\rR\x03vrf\x12\x10\n" +
	"\x03asn\x18\a \x01(\x03R\x03asn\"9\n" +
	"\x03VPN\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x18\n" +
	"\aauthkey\x18\x02 \x01(\tR\aauthkeyB\x93\x01\n" +
	"\fcom.admin.v1B\fMachineProtoP\x01Z4github.com/metal-stack-cloud/api/go/admin/v1;adminv1\xa2\x02\x03AXX\xaa\x02\bAdmin.V1\xca\x02\bAdmin\\V1\xe2\x02\x14Admin\\V1\\GPBMetadata\xea\x02\tAdmin::V1b\x06proto3"

var (
	file_admin_v1_machine_proto_rawDescOnce sync.Once
	file_admin_v1_machine_proto_rawDescData []byte
)

func file_admin_v1_machine_proto_rawDescGZIP() []byte {
	file_admin_v1_machine_proto_rawDescOnce.Do(func() {
		file_admin_v1_machine_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_admin_v1_machine_proto_rawDesc), len(file_admin_v1_machine_proto_rawDesc)))
	})
	return file_admin_v1_machine_proto_rawDescData
}

var file_admin_v1_machine_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_admin_v1_machine_proto_goTypes = []any{
	(*Machine)(nil),               // 0: admin.v1.Machine
	(*MachineNetwork)(nil),        // 1: admin.v1.MachineNetwork
	(*VPN)(nil),                   // 2: admin.v1.VPN
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_admin_v1_machine_proto_depIdxs = []int32{
	1, // 0: admin.v1.Machine.machine_networks:type_name -> admin.v1.MachineNetwork
	3, // 1: admin.v1.Machine.created:type_name -> google.protobuf.Timestamp
	2, // 2: admin.v1.Machine.vpn:type_name -> admin.v1.VPN
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_admin_v1_machine_proto_init() }
func file_admin_v1_machine_proto_init() {
	if File_admin_v1_machine_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_admin_v1_machine_proto_rawDesc), len(file_admin_v1_machine_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_admin_v1_machine_proto_goTypes,
		DependencyIndexes: file_admin_v1_machine_proto_depIdxs,
		MessageInfos:      file_admin_v1_machine_proto_msgTypes,
	}.Build()
	File_admin_v1_machine_proto = out.File
	file_admin_v1_machine_proto_goTypes = nil
	file_admin_v1_machine_proto_depIdxs = nil
}
