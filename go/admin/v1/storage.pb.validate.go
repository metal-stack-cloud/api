// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/v1/storage.proto

package adminv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StorageServiceClusterInfoRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StorageServiceClusterInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageServiceClusterInfoRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StorageServiceClusterInfoRequestMultiError, or nil if none found.
func (m *StorageServiceClusterInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageServiceClusterInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Partition != nil {
		// no validation rules for Partition
	}

	if len(errors) > 0 {
		return StorageServiceClusterInfoRequestMultiError(errors)
	}

	return nil
}

// StorageServiceClusterInfoRequestMultiError is an error wrapping multiple
// validation errors returned by
// StorageServiceClusterInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type StorageServiceClusterInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageServiceClusterInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageServiceClusterInfoRequestMultiError) AllErrors() []error { return m }

// StorageServiceClusterInfoRequestValidationError is the validation error
// returned by StorageServiceClusterInfoRequest.Validate if the designated
// constraints aren't met.
type StorageServiceClusterInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageServiceClusterInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageServiceClusterInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageServiceClusterInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageServiceClusterInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageServiceClusterInfoRequestValidationError) ErrorName() string {
	return "StorageServiceClusterInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StorageServiceClusterInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageServiceClusterInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageServiceClusterInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageServiceClusterInfoRequestValidationError{}

// Validate checks the field values on StorageServiceClusterInfoResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StorageServiceClusterInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageServiceClusterInfoResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StorageServiceClusterInfoResponseMultiError, or nil if none found.
func (m *StorageServiceClusterInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageServiceClusterInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StorageServiceClusterInfoResponseValidationError{
						field:  fmt.Sprintf("Infos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StorageServiceClusterInfoResponseValidationError{
						field:  fmt.Sprintf("Infos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StorageServiceClusterInfoResponseValidationError{
					field:  fmt.Sprintf("Infos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StorageServiceClusterInfoResponseMultiError(errors)
	}

	return nil
}

// StorageServiceClusterInfoResponseMultiError is an error wrapping multiple
// validation errors returned by
// StorageServiceClusterInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type StorageServiceClusterInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageServiceClusterInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageServiceClusterInfoResponseMultiError) AllErrors() []error { return m }

// StorageServiceClusterInfoResponseValidationError is the validation error
// returned by StorageServiceClusterInfoResponse.Validate if the designated
// constraints aren't met.
type StorageServiceClusterInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageServiceClusterInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageServiceClusterInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageServiceClusterInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageServiceClusterInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageServiceClusterInfoResponseValidationError) ErrorName() string {
	return "StorageServiceClusterInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StorageServiceClusterInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageServiceClusterInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageServiceClusterInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageServiceClusterInfoResponseValidationError{}

// Validate checks the field values on StorageClusterInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageClusterInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageClusterInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageClusterInfoMultiError, or nil if none found.
func (m *StorageClusterInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageClusterInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Partition

	// no validation rules for Uuid

	// no validation rules for SubsystemNqn

	// no validation rules for CurrentMaxReplicas

	// no validation rules for SupportedMaxReplicas

	if all {
		switch v := interface{}(m.GetStatistics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StorageClusterInfoValidationError{
					field:  "Statistics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StorageClusterInfoValidationError{
					field:  "Statistics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatistics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StorageClusterInfoValidationError{
				field:  "Statistics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHealth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StorageClusterInfoValidationError{
					field:  "Health",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StorageClusterInfoValidationError{
					field:  "Health",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StorageClusterInfoValidationError{
				field:  "Health",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MinVersionInCluster

	// no validation rules for MinAllowedVersion

	// no validation rules for MaxAllowedVersion

	for idx, item := range m.GetServers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StorageClusterInfoValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StorageClusterInfoValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StorageClusterInfoValidationError{
					field:  fmt.Sprintf("Servers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StorageClusterInfoMultiError(errors)
	}

	return nil
}

// StorageClusterInfoMultiError is an error wrapping multiple validation errors
// returned by StorageClusterInfo.ValidateAll() if the designated constraints
// aren't met.
type StorageClusterInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageClusterInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageClusterInfoMultiError) AllErrors() []error { return m }

// StorageClusterInfoValidationError is the validation error returned by
// StorageClusterInfo.Validate if the designated constraints aren't met.
type StorageClusterInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageClusterInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageClusterInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageClusterInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageClusterInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageClusterInfoValidationError) ErrorName() string {
	return "StorageClusterInfoValidationError"
}

// Error satisfies the builtin error interface
func (e StorageClusterInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageClusterInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageClusterInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageClusterInfoValidationError{}

// Validate checks the field values on StorageServerInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StorageServerInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageServerInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageServerInfoMultiError, or nil if none found.
func (m *StorageServerInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageServerInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Name

	// no validation rules for RiskOfServiceLossState

	// no validation rules for State

	// no validation rules for LightOsVersion

	if len(errors) > 0 {
		return StorageServerInfoMultiError(errors)
	}

	return nil
}

// StorageServerInfoMultiError is an error wrapping multiple validation errors
// returned by StorageServerInfo.ValidateAll() if the designated constraints
// aren't met.
type StorageServerInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageServerInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageServerInfoMultiError) AllErrors() []error { return m }

// StorageServerInfoValidationError is the validation error returned by
// StorageServerInfo.Validate if the designated constraints aren't met.
type StorageServerInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageServerInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageServerInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageServerInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageServerInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageServerInfoValidationError) ErrorName() string {
	return "StorageServerInfoValidationError"
}

// Error satisfies the builtin error interface
func (e StorageServerInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageServerInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageServerInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageServerInfoValidationError{}

// Validate checks the field values on ClusterHealth with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClusterHealth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterHealth with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClusterHealthMultiError, or
// nil if none found.
func (m *ClusterHealth) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterHealth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	// no validation rules for NumDegradedVolumes

	// no validation rules for NumReadOnlyVolumes

	// no validation rules for NumNotAvailableVolumes

	// no validation rules for NumInactiveNodes

	if len(errors) > 0 {
		return ClusterHealthMultiError(errors)
	}

	return nil
}

// ClusterHealthMultiError is an error wrapping multiple validation errors
// returned by ClusterHealth.ValidateAll() if the designated constraints
// aren't met.
type ClusterHealthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterHealthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterHealthMultiError) AllErrors() []error { return m }

// ClusterHealthValidationError is the validation error returned by
// ClusterHealth.Validate if the designated constraints aren't met.
type ClusterHealthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterHealthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterHealthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterHealthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterHealthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterHealthValidationError) ErrorName() string { return "ClusterHealthValidationError" }

// Error satisfies the builtin error interface
func (e ClusterHealthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterHealth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterHealthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterHealthValidationError{}

// Validate checks the field values on ClusterStatisticsApi with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterStatisticsApi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterStatisticsApi with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterStatisticsApiMultiError, or nil if none found.
func (m *ClusterStatisticsApi) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterStatisticsApi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstalledPhysicalStorage

	// no validation rules for ManagedPhysicalStorage

	// no validation rules for EffectivePhysicalStorage

	// no validation rules for LogicalStorage

	// no validation rules for LogicalUsedStorage

	// no validation rules for PhysicalUsedStorage

	// no validation rules for PhysicalUsedStorageIncludingParity

	// no validation rules for FreePhysicalStorage

	// no validation rules for EstimatedFreeLogicalStorage

	// no validation rules for EstimatedLogicalStorage

	// no validation rules for CompressionRatio

	if len(errors) > 0 {
		return ClusterStatisticsApiMultiError(errors)
	}

	return nil
}

// ClusterStatisticsApiMultiError is an error wrapping multiple validation
// errors returned by ClusterStatisticsApi.ValidateAll() if the designated
// constraints aren't met.
type ClusterStatisticsApiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterStatisticsApiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterStatisticsApiMultiError) AllErrors() []error { return m }

// ClusterStatisticsApiValidationError is the validation error returned by
// ClusterStatisticsApi.Validate if the designated constraints aren't met.
type ClusterStatisticsApiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterStatisticsApiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterStatisticsApiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterStatisticsApiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterStatisticsApiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterStatisticsApiValidationError) ErrorName() string {
	return "ClusterStatisticsApiValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterStatisticsApiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterStatisticsApi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterStatisticsApiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterStatisticsApiValidationError{}
