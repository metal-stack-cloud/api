// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/v1/customer.proto

package adminv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CustomerServiceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CustomerServiceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomerServiceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CustomerServiceListRequestMultiError, or nil if none found.
func (m *CustomerServiceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomerServiceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Login != nil {
		// no validation rules for Login
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.OrganisationId != nil {
		// no validation rules for OrganisationId
	}

	if len(errors) > 0 {
		return CustomerServiceListRequestMultiError(errors)
	}

	return nil
}

// CustomerServiceListRequestMultiError is an error wrapping multiple
// validation errors returned by CustomerServiceListRequest.ValidateAll() if
// the designated constraints aren't met.
type CustomerServiceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomerServiceListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomerServiceListRequestMultiError) AllErrors() []error { return m }

// CustomerServiceListRequestValidationError is the validation error returned
// by CustomerServiceListRequest.Validate if the designated constraints aren't met.
type CustomerServiceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomerServiceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomerServiceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomerServiceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomerServiceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomerServiceListRequestValidationError) ErrorName() string {
	return "CustomerServiceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CustomerServiceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomerServiceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomerServiceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomerServiceListRequestValidationError{}

// Validate checks the field values on CustomerServiceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CustomerServiceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomerServiceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CustomerServiceListResponseMultiError, or nil if none found.
func (m *CustomerServiceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomerServiceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCustomers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CustomerServiceListResponseValidationError{
						field:  fmt.Sprintf("Customers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CustomerServiceListResponseValidationError{
						field:  fmt.Sprintf("Customers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CustomerServiceListResponseValidationError{
					field:  fmt.Sprintf("Customers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CustomerServiceListResponseMultiError(errors)
	}

	return nil
}

// CustomerServiceListResponseMultiError is an error wrapping multiple
// validation errors returned by CustomerServiceListResponse.ValidateAll() if
// the designated constraints aren't met.
type CustomerServiceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomerServiceListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomerServiceListResponseMultiError) AllErrors() []error { return m }

// CustomerServiceListResponseValidationError is the validation error returned
// by CustomerServiceListResponse.Validate if the designated constraints
// aren't met.
type CustomerServiceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomerServiceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomerServiceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomerServiceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomerServiceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomerServiceListResponseValidationError) ErrorName() string {
	return "CustomerServiceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CustomerServiceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomerServiceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomerServiceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomerServiceListResponseValidationError{}

// Validate checks the field values on CustomerServiceAdmitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CustomerServiceAdmitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomerServiceAdmitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CustomerServiceAdmitRequestMultiError, or nil if none found.
func (m *CustomerServiceAdmitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomerServiceAdmitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CustomerId

	if len(errors) > 0 {
		return CustomerServiceAdmitRequestMultiError(errors)
	}

	return nil
}

// CustomerServiceAdmitRequestMultiError is an error wrapping multiple
// validation errors returned by CustomerServiceAdmitRequest.ValidateAll() if
// the designated constraints aren't met.
type CustomerServiceAdmitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomerServiceAdmitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomerServiceAdmitRequestMultiError) AllErrors() []error { return m }

// CustomerServiceAdmitRequestValidationError is the validation error returned
// by CustomerServiceAdmitRequest.Validate if the designated constraints
// aren't met.
type CustomerServiceAdmitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomerServiceAdmitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomerServiceAdmitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomerServiceAdmitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomerServiceAdmitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomerServiceAdmitRequestValidationError) ErrorName() string {
	return "CustomerServiceAdmitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CustomerServiceAdmitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomerServiceAdmitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomerServiceAdmitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomerServiceAdmitRequestValidationError{}

// Validate checks the field values on CustomerServiceAdmitResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CustomerServiceAdmitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomerServiceAdmitResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CustomerServiceAdmitResponseMultiError, or nil if none found.
func (m *CustomerServiceAdmitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomerServiceAdmitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCustomer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CustomerServiceAdmitResponseValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CustomerServiceAdmitResponseValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CustomerServiceAdmitResponseValidationError{
				field:  "Customer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CustomerServiceAdmitResponseMultiError(errors)
	}

	return nil
}

// CustomerServiceAdmitResponseMultiError is an error wrapping multiple
// validation errors returned by CustomerServiceAdmitResponse.ValidateAll() if
// the designated constraints aren't met.
type CustomerServiceAdmitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomerServiceAdmitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomerServiceAdmitResponseMultiError) AllErrors() []error { return m }

// CustomerServiceAdmitResponseValidationError is the validation error returned
// by CustomerServiceAdmitResponse.Validate if the designated constraints
// aren't met.
type CustomerServiceAdmitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomerServiceAdmitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomerServiceAdmitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomerServiceAdmitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomerServiceAdmitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomerServiceAdmitResponseValidationError) ErrorName() string {
	return "CustomerServiceAdmitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CustomerServiceAdmitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomerServiceAdmitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomerServiceAdmitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomerServiceAdmitResponseValidationError{}
