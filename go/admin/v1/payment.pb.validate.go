// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/v1/payment.proto

package adminv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PaymentServiceListCouponsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PaymentServiceListCouponsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentServiceListCouponsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PaymentServiceListCouponsRequestMultiError, or nil if none found.
func (m *PaymentServiceListCouponsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentServiceListCouponsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PaymentServiceListCouponsRequestMultiError(errors)
	}

	return nil
}

// PaymentServiceListCouponsRequestMultiError is an error wrapping multiple
// validation errors returned by
// PaymentServiceListCouponsRequest.ValidateAll() if the designated
// constraints aren't met.
type PaymentServiceListCouponsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentServiceListCouponsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentServiceListCouponsRequestMultiError) AllErrors() []error { return m }

// PaymentServiceListCouponsRequestValidationError is the validation error
// returned by PaymentServiceListCouponsRequest.Validate if the designated
// constraints aren't met.
type PaymentServiceListCouponsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentServiceListCouponsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentServiceListCouponsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentServiceListCouponsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentServiceListCouponsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentServiceListCouponsRequestValidationError) ErrorName() string {
	return "PaymentServiceListCouponsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentServiceListCouponsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentServiceListCouponsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentServiceListCouponsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentServiceListCouponsRequestValidationError{}

// Validate checks the field values on PaymentServiceListCouponsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PaymentServiceListCouponsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentServiceListCouponsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PaymentServiceListCouponsResponseMultiError, or nil if none found.
func (m *PaymentServiceListCouponsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentServiceListCouponsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoupons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PaymentServiceListCouponsResponseValidationError{
						field:  fmt.Sprintf("Coupons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PaymentServiceListCouponsResponseValidationError{
						field:  fmt.Sprintf("Coupons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PaymentServiceListCouponsResponseValidationError{
					field:  fmt.Sprintf("Coupons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PaymentServiceListCouponsResponseMultiError(errors)
	}

	return nil
}

// PaymentServiceListCouponsResponseMultiError is an error wrapping multiple
// validation errors returned by
// PaymentServiceListCouponsResponse.ValidateAll() if the designated
// constraints aren't met.
type PaymentServiceListCouponsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentServiceListCouponsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentServiceListCouponsResponseMultiError) AllErrors() []error { return m }

// PaymentServiceListCouponsResponseValidationError is the validation error
// returned by PaymentServiceListCouponsResponse.Validate if the designated
// constraints aren't met.
type PaymentServiceListCouponsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentServiceListCouponsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentServiceListCouponsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentServiceListCouponsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentServiceListCouponsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentServiceListCouponsResponseValidationError) ErrorName() string {
	return "PaymentServiceListCouponsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentServiceListCouponsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentServiceListCouponsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentServiceListCouponsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentServiceListCouponsResponseValidationError{}

// Validate checks the field values on PaymentServiceAddCouponToCustomerRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PaymentServiceAddCouponToCustomerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PaymentServiceAddCouponToCustomerRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// PaymentServiceAddCouponToCustomerRequestMultiError, or nil if none found.
func (m *PaymentServiceAddCouponToCustomerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentServiceAddCouponToCustomerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCustomer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentServiceAddCouponToCustomerRequestValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentServiceAddCouponToCustomerRequestValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentServiceAddCouponToCustomerRequestValidationError{
				field:  "Customer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CouponId

	if len(errors) > 0 {
		return PaymentServiceAddCouponToCustomerRequestMultiError(errors)
	}

	return nil
}

// PaymentServiceAddCouponToCustomerRequestMultiError is an error wrapping
// multiple validation errors returned by
// PaymentServiceAddCouponToCustomerRequest.ValidateAll() if the designated
// constraints aren't met.
type PaymentServiceAddCouponToCustomerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentServiceAddCouponToCustomerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentServiceAddCouponToCustomerRequestMultiError) AllErrors() []error { return m }

// PaymentServiceAddCouponToCustomerRequestValidationError is the validation
// error returned by PaymentServiceAddCouponToCustomerRequest.Validate if the
// designated constraints aren't met.
type PaymentServiceAddCouponToCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentServiceAddCouponToCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentServiceAddCouponToCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentServiceAddCouponToCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentServiceAddCouponToCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentServiceAddCouponToCustomerRequestValidationError) ErrorName() string {
	return "PaymentServiceAddCouponToCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentServiceAddCouponToCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentServiceAddCouponToCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentServiceAddCouponToCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentServiceAddCouponToCustomerRequestValidationError{}

// Validate checks the field values on
// PaymentServiceAddCouponToCustomerResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentServiceAddCouponToCustomerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PaymentServiceAddCouponToCustomerResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// PaymentServiceAddCouponToCustomerResponseMultiError, or nil if none found.
func (m *PaymentServiceAddCouponToCustomerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentServiceAddCouponToCustomerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCustomer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentServiceAddCouponToCustomerResponseValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentServiceAddCouponToCustomerResponseValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentServiceAddCouponToCustomerResponseValidationError{
				field:  "Customer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PaymentServiceAddCouponToCustomerResponseMultiError(errors)
	}

	return nil
}

// PaymentServiceAddCouponToCustomerResponseMultiError is an error wrapping
// multiple validation errors returned by
// PaymentServiceAddCouponToCustomerResponse.ValidateAll() if the designated
// constraints aren't met.
type PaymentServiceAddCouponToCustomerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentServiceAddCouponToCustomerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentServiceAddCouponToCustomerResponseMultiError) AllErrors() []error { return m }

// PaymentServiceAddCouponToCustomerResponseValidationError is the validation
// error returned by PaymentServiceAddCouponToCustomerResponse.Validate if the
// designated constraints aren't met.
type PaymentServiceAddCouponToCustomerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentServiceAddCouponToCustomerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentServiceAddCouponToCustomerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentServiceAddCouponToCustomerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentServiceAddCouponToCustomerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentServiceAddCouponToCustomerResponseValidationError) ErrorName() string {
	return "PaymentServiceAddCouponToCustomerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentServiceAddCouponToCustomerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentServiceAddCouponToCustomerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentServiceAddCouponToCustomerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentServiceAddCouponToCustomerResponseValidationError{}

// Validate checks the field values on PaymentServiceDeleteTestUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PaymentServiceDeleteTestUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentServiceDeleteTestUserRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PaymentServiceDeleteTestUserRequestMultiError, or nil if none found.
func (m *PaymentServiceDeleteTestUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentServiceDeleteTestUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PaymentServiceDeleteTestUserRequestMultiError(errors)
	}

	return nil
}

// PaymentServiceDeleteTestUserRequestMultiError is an error wrapping multiple
// validation errors returned by
// PaymentServiceDeleteTestUserRequest.ValidateAll() if the designated
// constraints aren't met.
type PaymentServiceDeleteTestUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentServiceDeleteTestUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentServiceDeleteTestUserRequestMultiError) AllErrors() []error { return m }

// PaymentServiceDeleteTestUserRequestValidationError is the validation error
// returned by PaymentServiceDeleteTestUserRequest.Validate if the designated
// constraints aren't met.
type PaymentServiceDeleteTestUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentServiceDeleteTestUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentServiceDeleteTestUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentServiceDeleteTestUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentServiceDeleteTestUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentServiceDeleteTestUserRequestValidationError) ErrorName() string {
	return "PaymentServiceDeleteTestUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentServiceDeleteTestUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentServiceDeleteTestUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentServiceDeleteTestUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentServiceDeleteTestUserRequestValidationError{}

// Validate checks the field values on PaymentServiceDeleteTestUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PaymentServiceDeleteTestUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentServiceDeleteTestUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PaymentServiceDeleteTestUserResponseMultiError, or nil if none found.
func (m *PaymentServiceDeleteTestUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentServiceDeleteTestUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCustomer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentServiceDeleteTestUserResponseValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentServiceDeleteTestUserResponseValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentServiceDeleteTestUserResponseValidationError{
				field:  "Customer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PaymentServiceDeleteTestUserResponseMultiError(errors)
	}

	return nil
}

// PaymentServiceDeleteTestUserResponseMultiError is an error wrapping multiple
// validation errors returned by
// PaymentServiceDeleteTestUserResponse.ValidateAll() if the designated
// constraints aren't met.
type PaymentServiceDeleteTestUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentServiceDeleteTestUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentServiceDeleteTestUserResponseMultiError) AllErrors() []error { return m }

// PaymentServiceDeleteTestUserResponseValidationError is the validation error
// returned by PaymentServiceDeleteTestUserResponse.Validate if the designated
// constraints aren't met.
type PaymentServiceDeleteTestUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentServiceDeleteTestUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentServiceDeleteTestUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentServiceDeleteTestUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentServiceDeleteTestUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentServiceDeleteTestUserResponseValidationError) ErrorName() string {
	return "PaymentServiceDeleteTestUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentServiceDeleteTestUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentServiceDeleteTestUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentServiceDeleteTestUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentServiceDeleteTestUserResponseValidationError{}
