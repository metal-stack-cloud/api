// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/v1/cluster.proto

package adminv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _cluster_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ClusterServiceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterServiceGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterServiceGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterServiceGetRequestMultiError, or nil if none found.
func (m *ClusterServiceGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterServiceGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = ClusterServiceGetRequestValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetProject()); l < 2 || l > 128 {
		err := ClusterServiceGetRequestValidationError{
			field:  "Project",
			reason: "value length must be between 2 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClusterServiceGetRequestMultiError(errors)
	}

	return nil
}

func (m *ClusterServiceGetRequest) _validateUuid(uuid string) error {
	if matched := _cluster_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ClusterServiceGetRequestMultiError is an error wrapping multiple validation
// errors returned by ClusterServiceGetRequest.ValidateAll() if the designated
// constraints aren't met.
type ClusterServiceGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterServiceGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterServiceGetRequestMultiError) AllErrors() []error { return m }

// ClusterServiceGetRequestValidationError is the validation error returned by
// ClusterServiceGetRequest.Validate if the designated constraints aren't met.
type ClusterServiceGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterServiceGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterServiceGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterServiceGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterServiceGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterServiceGetRequestValidationError) ErrorName() string {
	return "ClusterServiceGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterServiceGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterServiceGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterServiceGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterServiceGetRequestValidationError{}

// Validate checks the field values on ClusterServiceGetCredentialsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ClusterServiceGetCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterServiceGetCredentialsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ClusterServiceGetCredentialsRequestMultiError, or nil if none found.
func (m *ClusterServiceGetCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterServiceGetCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = ClusterServiceGetCredentialsRequestValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetProject()); l < 2 || l > 128 {
		err := ClusterServiceGetCredentialsRequestValidationError{
			field:  "Project",
			reason: "value length must be between 2 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClusterServiceGetCredentialsRequestMultiError(errors)
	}

	return nil
}

func (m *ClusterServiceGetCredentialsRequest) _validateUuid(uuid string) error {
	if matched := _cluster_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ClusterServiceGetCredentialsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ClusterServiceGetCredentialsRequest.ValidateAll() if the designated
// constraints aren't met.
type ClusterServiceGetCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterServiceGetCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterServiceGetCredentialsRequestMultiError) AllErrors() []error { return m }

// ClusterServiceGetCredentialsRequestValidationError is the validation error
// returned by ClusterServiceGetCredentialsRequest.Validate if the designated
// constraints aren't met.
type ClusterServiceGetCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterServiceGetCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterServiceGetCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterServiceGetCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterServiceGetCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterServiceGetCredentialsRequestValidationError) ErrorName() string {
	return "ClusterServiceGetCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterServiceGetCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterServiceGetCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterServiceGetCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterServiceGetCredentialsRequestValidationError{}

// Validate checks the field values on ClusterServiceListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterServiceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterServiceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterServiceListRequestMultiError, or nil if none found.
func (m *ClusterServiceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterServiceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProject()); l < 2 || l > 128 {
		err := ClusterServiceListRequestValidationError{
			field:  "Project",
			reason: "value length must be between 2 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClusterServiceListRequestMultiError(errors)
	}

	return nil
}

// ClusterServiceListRequestMultiError is an error wrapping multiple validation
// errors returned by ClusterServiceListRequest.ValidateAll() if the
// designated constraints aren't met.
type ClusterServiceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterServiceListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterServiceListRequestMultiError) AllErrors() []error { return m }

// ClusterServiceListRequestValidationError is the validation error returned by
// ClusterServiceListRequest.Validate if the designated constraints aren't met.
type ClusterServiceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterServiceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterServiceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterServiceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterServiceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterServiceListRequestValidationError) ErrorName() string {
	return "ClusterServiceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterServiceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterServiceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterServiceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterServiceListRequestValidationError{}

// Validate checks the field values on ClusterServiceGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterServiceGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterServiceGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterServiceGetResponseMultiError, or nil if none found.
func (m *ClusterServiceGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterServiceGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterServiceGetResponseValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterServiceGetResponseValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterServiceGetResponseValidationError{
				field:  "Cluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ClusterServiceGetResponseMultiError(errors)
	}

	return nil
}

// ClusterServiceGetResponseMultiError is an error wrapping multiple validation
// errors returned by ClusterServiceGetResponse.ValidateAll() if the
// designated constraints aren't met.
type ClusterServiceGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterServiceGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterServiceGetResponseMultiError) AllErrors() []error { return m }

// ClusterServiceGetResponseValidationError is the validation error returned by
// ClusterServiceGetResponse.Validate if the designated constraints aren't met.
type ClusterServiceGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterServiceGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterServiceGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterServiceGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterServiceGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterServiceGetResponseValidationError) ErrorName() string {
	return "ClusterServiceGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterServiceGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterServiceGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterServiceGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterServiceGetResponseValidationError{}

// Validate checks the field values on ClusterServiceGetCredentialsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ClusterServiceGetCredentialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterServiceGetCredentialsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ClusterServiceGetCredentialsResponseMultiError, or nil if none found.
func (m *ClusterServiceGetCredentialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterServiceGetCredentialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Kubeconfig

	if len(errors) > 0 {
		return ClusterServiceGetCredentialsResponseMultiError(errors)
	}

	return nil
}

// ClusterServiceGetCredentialsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ClusterServiceGetCredentialsResponse.ValidateAll() if the designated
// constraints aren't met.
type ClusterServiceGetCredentialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterServiceGetCredentialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterServiceGetCredentialsResponseMultiError) AllErrors() []error { return m }

// ClusterServiceGetCredentialsResponseValidationError is the validation error
// returned by ClusterServiceGetCredentialsResponse.Validate if the designated
// constraints aren't met.
type ClusterServiceGetCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterServiceGetCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterServiceGetCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterServiceGetCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterServiceGetCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterServiceGetCredentialsResponseValidationError) ErrorName() string {
	return "ClusterServiceGetCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterServiceGetCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterServiceGetCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterServiceGetCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterServiceGetCredentialsResponseValidationError{}

// Validate checks the field values on ClusterServiceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterServiceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterServiceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterServiceListResponseMultiError, or nil if none found.
func (m *ClusterServiceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterServiceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetClusters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterServiceListResponseValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterServiceListResponseValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterServiceListResponseValidationError{
					field:  fmt.Sprintf("Clusters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ClusterServiceListResponseMultiError(errors)
	}

	return nil
}

// ClusterServiceListResponseMultiError is an error wrapping multiple
// validation errors returned by ClusterServiceListResponse.ValidateAll() if
// the designated constraints aren't met.
type ClusterServiceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterServiceListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterServiceListResponseMultiError) AllErrors() []error { return m }

// ClusterServiceListResponseValidationError is the validation error returned
// by ClusterServiceListResponse.Validate if the designated constraints aren't met.
type ClusterServiceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterServiceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterServiceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterServiceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterServiceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterServiceListResponseValidationError) ErrorName() string {
	return "ClusterServiceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterServiceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterServiceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterServiceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterServiceListResponseValidationError{}
