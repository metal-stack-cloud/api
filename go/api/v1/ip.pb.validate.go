// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/ip.proto

package apiv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _ip_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on IP with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *IP) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IP with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IPMultiError, or nil if none found.
func (m *IP) ValidateAll() error {
	return m.validate(true)
}

func (m *IP) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = IPValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if ip := net.ParseIP(m.GetIp()); ip == nil {
		err := IPValidationError{
			field:  "Ip",
			reason: "value must be a valid IP address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 128 {
		err := IPValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 128 {
		err := IPValidationError{
			field:  "Description",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNetwork()); l < 2 || l > 128 {
		err := IPValidationError{
			field:  "Network",
			reason: "value length must be between 2 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetProject()); l < 2 || l > 128 {
		err := IPValidationError{
			field:  "Project",
			reason: "value length must be between 2 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	if len(m.GetTags()) > 100 {
		err := IPValidationError{
			field:  "Tags",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IPValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IPValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IPValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IPValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IPValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IPValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IPValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IPValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IPValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IPMultiError(errors)
	}

	return nil
}

func (m *IP) _validateUuid(uuid string) error {
	if matched := _ip_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// IPMultiError is an error wrapping multiple validation errors returned by
// IP.ValidateAll() if the designated constraints aren't met.
type IPMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IPMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IPMultiError) AllErrors() []error { return m }

// IPValidationError is the validation error returned by IP.Validate if the
// designated constraints aren't met.
type IPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IPValidationError) ErrorName() string { return "IPValidationError" }

// Error satisfies the builtin error interface
func (e IPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IPValidationError{}

// Validate checks the field values on IPServiceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IPServiceGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IPServiceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IPServiceGetRequestMultiError, or nil if none found.
func (m *IPServiceGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IPServiceGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = IPServiceGetRequestValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetProject()); l < 2 || l > 128 {
		err := IPServiceGetRequestValidationError{
			field:  "Project",
			reason: "value length must be between 2 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IPServiceGetRequestMultiError(errors)
	}

	return nil
}

func (m *IPServiceGetRequest) _validateUuid(uuid string) error {
	if matched := _ip_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// IPServiceGetRequestMultiError is an error wrapping multiple validation
// errors returned by IPServiceGetRequest.ValidateAll() if the designated
// constraints aren't met.
type IPServiceGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IPServiceGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IPServiceGetRequestMultiError) AllErrors() []error { return m }

// IPServiceGetRequestValidationError is the validation error returned by
// IPServiceGetRequest.Validate if the designated constraints aren't met.
type IPServiceGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IPServiceGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IPServiceGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IPServiceGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IPServiceGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IPServiceGetRequestValidationError) ErrorName() string {
	return "IPServiceGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IPServiceGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIPServiceGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IPServiceGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IPServiceGetRequestValidationError{}

// Validate checks the field values on IPServiceAllocateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IPServiceAllocateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IPServiceAllocateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IPServiceAllocateRequestMultiError, or nil if none found.
func (m *IPServiceAllocateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IPServiceAllocateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProject()); l < 2 || l > 128 {
		err := IPServiceAllocateRequestValidationError{
			field:  "Project",
			reason: "value length must be between 2 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 128 {
		err := IPServiceAllocateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 128 {
		err := IPServiceAllocateRequestValidationError{
			field:  "Description",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTags()) > 100 {
		err := IPServiceAllocateRequestValidationError{
			field:  "Tags",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Static

	if len(errors) > 0 {
		return IPServiceAllocateRequestMultiError(errors)
	}

	return nil
}

// IPServiceAllocateRequestMultiError is an error wrapping multiple validation
// errors returned by IPServiceAllocateRequest.ValidateAll() if the designated
// constraints aren't met.
type IPServiceAllocateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IPServiceAllocateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IPServiceAllocateRequestMultiError) AllErrors() []error { return m }

// IPServiceAllocateRequestValidationError is the validation error returned by
// IPServiceAllocateRequest.Validate if the designated constraints aren't met.
type IPServiceAllocateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IPServiceAllocateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IPServiceAllocateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IPServiceAllocateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IPServiceAllocateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IPServiceAllocateRequestValidationError) ErrorName() string {
	return "IPServiceAllocateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IPServiceAllocateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIPServiceAllocateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IPServiceAllocateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IPServiceAllocateRequestValidationError{}

// Validate checks the field values on IPServiceUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IPServiceUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IPServiceUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IPServiceUpdateRequestMultiError, or nil if none found.
func (m *IPServiceUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IPServiceUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProject()); l < 2 || l > 128 {
		err := IPServiceUpdateRequestValidationError{
			field:  "Project",
			reason: "value length must be between 2 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetIp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IPServiceUpdateRequestValidationError{
					field:  "Ip",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IPServiceUpdateRequestValidationError{
					field:  "Ip",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IPServiceUpdateRequestValidationError{
				field:  "Ip",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IPServiceUpdateRequestMultiError(errors)
	}

	return nil
}

// IPServiceUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by IPServiceUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type IPServiceUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IPServiceUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IPServiceUpdateRequestMultiError) AllErrors() []error { return m }

// IPServiceUpdateRequestValidationError is the validation error returned by
// IPServiceUpdateRequest.Validate if the designated constraints aren't met.
type IPServiceUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IPServiceUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IPServiceUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IPServiceUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IPServiceUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IPServiceUpdateRequestValidationError) ErrorName() string {
	return "IPServiceUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IPServiceUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIPServiceUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IPServiceUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IPServiceUpdateRequestValidationError{}

// Validate checks the field values on IPServiceListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IPServiceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IPServiceListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IPServiceListRequestMultiError, or nil if none found.
func (m *IPServiceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IPServiceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProject()); l < 2 || l > 128 {
		err := IPServiceListRequestValidationError{
			field:  "Project",
			reason: "value length must be between 2 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IPServiceListRequestMultiError(errors)
	}

	return nil
}

// IPServiceListRequestMultiError is an error wrapping multiple validation
// errors returned by IPServiceListRequest.ValidateAll() if the designated
// constraints aren't met.
type IPServiceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IPServiceListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IPServiceListRequestMultiError) AllErrors() []error { return m }

// IPServiceListRequestValidationError is the validation error returned by
// IPServiceListRequest.Validate if the designated constraints aren't met.
type IPServiceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IPServiceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IPServiceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IPServiceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IPServiceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IPServiceListRequestValidationError) ErrorName() string {
	return "IPServiceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IPServiceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIPServiceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IPServiceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IPServiceListRequestValidationError{}

// Validate checks the field values on IPServiceDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IPServiceDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IPServiceDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IPServiceDeleteRequestMultiError, or nil if none found.
func (m *IPServiceDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IPServiceDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = IPServiceDeleteRequestValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetProject()); l < 2 || l > 128 {
		err := IPServiceDeleteRequestValidationError{
			field:  "Project",
			reason: "value length must be between 2 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IPServiceDeleteRequestMultiError(errors)
	}

	return nil
}

func (m *IPServiceDeleteRequest) _validateUuid(uuid string) error {
	if matched := _ip_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// IPServiceDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by IPServiceDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type IPServiceDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IPServiceDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IPServiceDeleteRequestMultiError) AllErrors() []error { return m }

// IPServiceDeleteRequestValidationError is the validation error returned by
// IPServiceDeleteRequest.Validate if the designated constraints aren't met.
type IPServiceDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IPServiceDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IPServiceDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IPServiceDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IPServiceDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IPServiceDeleteRequestValidationError) ErrorName() string {
	return "IPServiceDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IPServiceDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIPServiceDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IPServiceDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IPServiceDeleteRequestValidationError{}

// Validate checks the field values on IPServiceGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IPServiceGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IPServiceGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IPServiceGetResponseMultiError, or nil if none found.
func (m *IPServiceGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IPServiceGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IPServiceGetResponseValidationError{
					field:  "Ip",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IPServiceGetResponseValidationError{
					field:  "Ip",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IPServiceGetResponseValidationError{
				field:  "Ip",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IPServiceGetResponseMultiError(errors)
	}

	return nil
}

// IPServiceGetResponseMultiError is an error wrapping multiple validation
// errors returned by IPServiceGetResponse.ValidateAll() if the designated
// constraints aren't met.
type IPServiceGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IPServiceGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IPServiceGetResponseMultiError) AllErrors() []error { return m }

// IPServiceGetResponseValidationError is the validation error returned by
// IPServiceGetResponse.Validate if the designated constraints aren't met.
type IPServiceGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IPServiceGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IPServiceGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IPServiceGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IPServiceGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IPServiceGetResponseValidationError) ErrorName() string {
	return "IPServiceGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IPServiceGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIPServiceGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IPServiceGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IPServiceGetResponseValidationError{}

// Validate checks the field values on IPServiceUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IPServiceUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IPServiceUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IPServiceUpdateResponseMultiError, or nil if none found.
func (m *IPServiceUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IPServiceUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IPServiceUpdateResponseValidationError{
					field:  "Ip",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IPServiceUpdateResponseValidationError{
					field:  "Ip",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IPServiceUpdateResponseValidationError{
				field:  "Ip",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IPServiceUpdateResponseMultiError(errors)
	}

	return nil
}

// IPServiceUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by IPServiceUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type IPServiceUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IPServiceUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IPServiceUpdateResponseMultiError) AllErrors() []error { return m }

// IPServiceUpdateResponseValidationError is the validation error returned by
// IPServiceUpdateResponse.Validate if the designated constraints aren't met.
type IPServiceUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IPServiceUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IPServiceUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IPServiceUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IPServiceUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IPServiceUpdateResponseValidationError) ErrorName() string {
	return "IPServiceUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IPServiceUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIPServiceUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IPServiceUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IPServiceUpdateResponseValidationError{}

// Validate checks the field values on IPServiceAllocateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IPServiceAllocateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IPServiceAllocateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IPServiceAllocateResponseMultiError, or nil if none found.
func (m *IPServiceAllocateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IPServiceAllocateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IPServiceAllocateResponseValidationError{
					field:  "Ip",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IPServiceAllocateResponseValidationError{
					field:  "Ip",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IPServiceAllocateResponseValidationError{
				field:  "Ip",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IPServiceAllocateResponseMultiError(errors)
	}

	return nil
}

// IPServiceAllocateResponseMultiError is an error wrapping multiple validation
// errors returned by IPServiceAllocateResponse.ValidateAll() if the
// designated constraints aren't met.
type IPServiceAllocateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IPServiceAllocateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IPServiceAllocateResponseMultiError) AllErrors() []error { return m }

// IPServiceAllocateResponseValidationError is the validation error returned by
// IPServiceAllocateResponse.Validate if the designated constraints aren't met.
type IPServiceAllocateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IPServiceAllocateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IPServiceAllocateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IPServiceAllocateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IPServiceAllocateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IPServiceAllocateResponseValidationError) ErrorName() string {
	return "IPServiceAllocateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IPServiceAllocateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIPServiceAllocateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IPServiceAllocateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IPServiceAllocateResponseValidationError{}

// Validate checks the field values on IPServiceStaticResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IPServiceStaticResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IPServiceStaticResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IPServiceStaticResponseMultiError, or nil if none found.
func (m *IPServiceStaticResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IPServiceStaticResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IPServiceStaticResponseValidationError{
					field:  "Ip",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IPServiceStaticResponseValidationError{
					field:  "Ip",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IPServiceStaticResponseValidationError{
				field:  "Ip",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IPServiceStaticResponseMultiError(errors)
	}

	return nil
}

// IPServiceStaticResponseMultiError is an error wrapping multiple validation
// errors returned by IPServiceStaticResponse.ValidateAll() if the designated
// constraints aren't met.
type IPServiceStaticResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IPServiceStaticResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IPServiceStaticResponseMultiError) AllErrors() []error { return m }

// IPServiceStaticResponseValidationError is the validation error returned by
// IPServiceStaticResponse.Validate if the designated constraints aren't met.
type IPServiceStaticResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IPServiceStaticResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IPServiceStaticResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IPServiceStaticResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IPServiceStaticResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IPServiceStaticResponseValidationError) ErrorName() string {
	return "IPServiceStaticResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IPServiceStaticResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIPServiceStaticResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IPServiceStaticResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IPServiceStaticResponseValidationError{}

// Validate checks the field values on IPServiceListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IPServiceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IPServiceListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IPServiceListResponseMultiError, or nil if none found.
func (m *IPServiceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IPServiceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IPServiceListResponseValidationError{
						field:  fmt.Sprintf("Ips[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IPServiceListResponseValidationError{
						field:  fmt.Sprintf("Ips[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IPServiceListResponseValidationError{
					field:  fmt.Sprintf("Ips[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IPServiceListResponseMultiError(errors)
	}

	return nil
}

// IPServiceListResponseMultiError is an error wrapping multiple validation
// errors returned by IPServiceListResponse.ValidateAll() if the designated
// constraints aren't met.
type IPServiceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IPServiceListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IPServiceListResponseMultiError) AllErrors() []error { return m }

// IPServiceListResponseValidationError is the validation error returned by
// IPServiceListResponse.Validate if the designated constraints aren't met.
type IPServiceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IPServiceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IPServiceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IPServiceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IPServiceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IPServiceListResponseValidationError) ErrorName() string {
	return "IPServiceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IPServiceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIPServiceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IPServiceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IPServiceListResponseValidationError{}

// Validate checks the field values on IPServiceDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IPServiceDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IPServiceDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IPServiceDeleteResponseMultiError, or nil if none found.
func (m *IPServiceDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IPServiceDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IPServiceDeleteResponseValidationError{
					field:  "Ip",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IPServiceDeleteResponseValidationError{
					field:  "Ip",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IPServiceDeleteResponseValidationError{
				field:  "Ip",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IPServiceDeleteResponseMultiError(errors)
	}

	return nil
}

// IPServiceDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by IPServiceDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type IPServiceDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IPServiceDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IPServiceDeleteResponseMultiError) AllErrors() []error { return m }

// IPServiceDeleteResponseValidationError is the validation error returned by
// IPServiceDeleteResponse.Validate if the designated constraints aren't met.
type IPServiceDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IPServiceDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IPServiceDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IPServiceDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IPServiceDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IPServiceDeleteResponseValidationError) ErrorName() string {
	return "IPServiceDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IPServiceDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIPServiceDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IPServiceDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IPServiceDeleteResponseValidationError{}
