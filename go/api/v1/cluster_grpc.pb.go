// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClusterServiceClient is the client API for ClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterServiceClient interface {
	Create(ctx context.Context, in *ClusterServiceCreateRequest, opts ...grpc.CallOption) (*ClusterServiceCreateResponse, error)
	Get(ctx context.Context, in *ClusterServiceGetRequest, opts ...grpc.CallOption) (*ClusterServiceGetResponse, error)
	List(ctx context.Context, in *ClusterServiceListRequest, opts ...grpc.CallOption) (*ClusterServiceListResponse, error)
	WatchStatus(ctx context.Context, in *ClusterServiceWatchStatusRequest, opts ...grpc.CallOption) (ClusterService_WatchStatusClient, error)
	Delete(ctx context.Context, in *ClusterServiceDeleteRequest, opts ...grpc.CallOption) (*ClusterServiceDeleteResponse, error)
	Update(ctx context.Context, in *ClusterServiceUpdateRequest, opts ...grpc.CallOption) (*ClusterServiceUpdateResponse, error)
	GetCredentials(ctx context.Context, in *ClusterServiceGetCredentialsRequest, opts ...grpc.CallOption) (*ClusterServiceGetCredentialsResponse, error)
}

type clusterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterServiceClient(cc grpc.ClientConnInterface) ClusterServiceClient {
	return &clusterServiceClient{cc}
}

func (c *clusterServiceClient) Create(ctx context.Context, in *ClusterServiceCreateRequest, opts ...grpc.CallOption) (*ClusterServiceCreateResponse, error) {
	out := new(ClusterServiceCreateResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ClusterService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Get(ctx context.Context, in *ClusterServiceGetRequest, opts ...grpc.CallOption) (*ClusterServiceGetResponse, error) {
	out := new(ClusterServiceGetResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ClusterService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) List(ctx context.Context, in *ClusterServiceListRequest, opts ...grpc.CallOption) (*ClusterServiceListResponse, error) {
	out := new(ClusterServiceListResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ClusterService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) WatchStatus(ctx context.Context, in *ClusterServiceWatchStatusRequest, opts ...grpc.CallOption) (ClusterService_WatchStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClusterService_ServiceDesc.Streams[0], "/api.v1.ClusterService/WatchStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterServiceWatchStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterService_WatchStatusClient interface {
	Recv() (*ClusterServiceWatchStatusResponse, error)
	grpc.ClientStream
}

type clusterServiceWatchStatusClient struct {
	grpc.ClientStream
}

func (x *clusterServiceWatchStatusClient) Recv() (*ClusterServiceWatchStatusResponse, error) {
	m := new(ClusterServiceWatchStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterServiceClient) Delete(ctx context.Context, in *ClusterServiceDeleteRequest, opts ...grpc.CallOption) (*ClusterServiceDeleteResponse, error) {
	out := new(ClusterServiceDeleteResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ClusterService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Update(ctx context.Context, in *ClusterServiceUpdateRequest, opts ...grpc.CallOption) (*ClusterServiceUpdateResponse, error) {
	out := new(ClusterServiceUpdateResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ClusterService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) GetCredentials(ctx context.Context, in *ClusterServiceGetCredentialsRequest, opts ...grpc.CallOption) (*ClusterServiceGetCredentialsResponse, error) {
	out := new(ClusterServiceGetCredentialsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ClusterService/GetCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServiceServer is the server API for ClusterService service.
// All implementations should embed UnimplementedClusterServiceServer
// for forward compatibility
type ClusterServiceServer interface {
	Create(context.Context, *ClusterServiceCreateRequest) (*ClusterServiceCreateResponse, error)
	Get(context.Context, *ClusterServiceGetRequest) (*ClusterServiceGetResponse, error)
	List(context.Context, *ClusterServiceListRequest) (*ClusterServiceListResponse, error)
	WatchStatus(*ClusterServiceWatchStatusRequest, ClusterService_WatchStatusServer) error
	Delete(context.Context, *ClusterServiceDeleteRequest) (*ClusterServiceDeleteResponse, error)
	Update(context.Context, *ClusterServiceUpdateRequest) (*ClusterServiceUpdateResponse, error)
	GetCredentials(context.Context, *ClusterServiceGetCredentialsRequest) (*ClusterServiceGetCredentialsResponse, error)
}

// UnimplementedClusterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedClusterServiceServer struct {
}

func (UnimplementedClusterServiceServer) Create(context.Context, *ClusterServiceCreateRequest) (*ClusterServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedClusterServiceServer) Get(context.Context, *ClusterServiceGetRequest) (*ClusterServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedClusterServiceServer) List(context.Context, *ClusterServiceListRequest) (*ClusterServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedClusterServiceServer) WatchStatus(*ClusterServiceWatchStatusRequest, ClusterService_WatchStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchStatus not implemented")
}
func (UnimplementedClusterServiceServer) Delete(context.Context, *ClusterServiceDeleteRequest) (*ClusterServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedClusterServiceServer) Update(context.Context, *ClusterServiceUpdateRequest) (*ClusterServiceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedClusterServiceServer) GetCredentials(context.Context, *ClusterServiceGetCredentialsRequest) (*ClusterServiceGetCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentials not implemented")
}

// UnsafeClusterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterServiceServer will
// result in compilation errors.
type UnsafeClusterServiceServer interface {
	mustEmbedUnimplementedClusterServiceServer()
}

func RegisterClusterServiceServer(s grpc.ServiceRegistrar, srv ClusterServiceServer) {
	s.RegisterService(&ClusterService_ServiceDesc, srv)
}

func _ClusterService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ClusterService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Create(ctx, req.(*ClusterServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ClusterService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Get(ctx, req.(*ClusterServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ClusterService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).List(ctx, req.(*ClusterServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_WatchStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClusterServiceWatchStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterServiceServer).WatchStatus(m, &clusterServiceWatchStatusServer{stream})
}

type ClusterService_WatchStatusServer interface {
	Send(*ClusterServiceWatchStatusResponse) error
	grpc.ServerStream
}

type clusterServiceWatchStatusServer struct {
	grpc.ServerStream
}

func (x *clusterServiceWatchStatusServer) Send(m *ClusterServiceWatchStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ClusterService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Delete(ctx, req.(*ClusterServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ClusterService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Update(ctx, req.(*ClusterServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_GetCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterServiceGetCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).GetCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ClusterService/GetCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).GetCredentials(ctx, req.(*ClusterServiceGetCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterService_ServiceDesc is the grpc.ServiceDesc for ClusterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.ClusterService",
	HandlerType: (*ClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ClusterService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ClusterService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ClusterService_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ClusterService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ClusterService_Update_Handler,
		},
		{
			MethodName: "GetCredentials",
			Handler:    _ClusterService_GetCredentials_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchStatus",
			Handler:       _ClusterService_WatchStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/cluster.proto",
}
