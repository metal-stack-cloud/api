// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/project.proto

package apiv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProjectServiceWatchRevisionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ProjectServiceWatchRevisionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectServiceWatchRevisionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ProjectServiceWatchRevisionRequestMultiError, or nil if none found.
func (m *ProjectServiceWatchRevisionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectServiceWatchRevisionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProject()); l < 2 || l > 128 {
		err := ProjectServiceWatchRevisionRequestValidationError{
			field:  "Project",
			reason: "value length must be between 2 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProjectServiceWatchRevisionRequestMultiError(errors)
	}

	return nil
}

// ProjectServiceWatchRevisionRequestMultiError is an error wrapping multiple
// validation errors returned by
// ProjectServiceWatchRevisionRequest.ValidateAll() if the designated
// constraints aren't met.
type ProjectServiceWatchRevisionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectServiceWatchRevisionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectServiceWatchRevisionRequestMultiError) AllErrors() []error { return m }

// ProjectServiceWatchRevisionRequestValidationError is the validation error
// returned by ProjectServiceWatchRevisionRequest.Validate if the designated
// constraints aren't met.
type ProjectServiceWatchRevisionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectServiceWatchRevisionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectServiceWatchRevisionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectServiceWatchRevisionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectServiceWatchRevisionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectServiceWatchRevisionRequestValidationError) ErrorName() string {
	return "ProjectServiceWatchRevisionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectServiceWatchRevisionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectServiceWatchRevisionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectServiceWatchRevisionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectServiceWatchRevisionRequestValidationError{}

// Validate checks the field values on ProjectServiceWatchRevisionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ProjectServiceWatchRevisionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectServiceWatchRevisionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ProjectServiceWatchRevisionResponseMultiError, or nil if none found.
func (m *ProjectServiceWatchRevisionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectServiceWatchRevisionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Project

	// no validation rules for Revision

	if all {
		switch v := interface{}(m.GetResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectServiceWatchRevisionResponseValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectServiceWatchRevisionResponseValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectServiceWatchRevisionResponseValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProjectServiceWatchRevisionResponseMultiError(errors)
	}

	return nil
}

// ProjectServiceWatchRevisionResponseMultiError is an error wrapping multiple
// validation errors returned by
// ProjectServiceWatchRevisionResponse.ValidateAll() if the designated
// constraints aren't met.
type ProjectServiceWatchRevisionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectServiceWatchRevisionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectServiceWatchRevisionResponseMultiError) AllErrors() []error { return m }

// ProjectServiceWatchRevisionResponseValidationError is the validation error
// returned by ProjectServiceWatchRevisionResponse.Validate if the designated
// constraints aren't met.
type ProjectServiceWatchRevisionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectServiceWatchRevisionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectServiceWatchRevisionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectServiceWatchRevisionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectServiceWatchRevisionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectServiceWatchRevisionResponseValidationError) ErrorName() string {
	return "ProjectServiceWatchRevisionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectServiceWatchRevisionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectServiceWatchRevisionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectServiceWatchRevisionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectServiceWatchRevisionResponseValidationError{}

// Validate checks the field values on ResourceRevisions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResourceRevisions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceRevisions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceRevisionsMultiError, or nil if none found.
func (m *ResourceRevisions) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceRevisions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cluster

	// no validation rules for Volume

	// no validation rules for Ip

	if len(errors) > 0 {
		return ResourceRevisionsMultiError(errors)
	}

	return nil
}

// ResourceRevisionsMultiError is an error wrapping multiple validation errors
// returned by ResourceRevisions.ValidateAll() if the designated constraints
// aren't met.
type ResourceRevisionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceRevisionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceRevisionsMultiError) AllErrors() []error { return m }

// ResourceRevisionsValidationError is the validation error returned by
// ResourceRevisions.Validate if the designated constraints aren't met.
type ResourceRevisionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceRevisionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceRevisionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceRevisionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceRevisionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceRevisionsValidationError) ErrorName() string {
	return "ResourceRevisionsValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceRevisionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceRevisions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceRevisionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceRevisionsValidationError{}
