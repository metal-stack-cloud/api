// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/tenant.proto

package apiv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/metal-stack-cloud/api/go/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TenantServiceName is the fully-qualified name of the TenantService service.
	TenantServiceName = "api.v1.TenantService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TenantServiceCreateProcedure is the fully-qualified name of the TenantService's Create RPC.
	TenantServiceCreateProcedure = "/api.v1.TenantService/Create"
	// TenantServiceCreateOrUpdateProcedure is the fully-qualified name of the TenantService's
	// CreateOrUpdate RPC.
	TenantServiceCreateOrUpdateProcedure = "/api.v1.TenantService/CreateOrUpdate"
	// TenantServiceGetProcedure is the fully-qualified name of the TenantService's Get RPC.
	TenantServiceGetProcedure = "/api.v1.TenantService/Get"
	// TenantServiceUpdateProcedure is the fully-qualified name of the TenantService's Update RPC.
	TenantServiceUpdateProcedure = "/api.v1.TenantService/Update"
	// TenantServiceDeleteProcedure is the fully-qualified name of the TenantService's Delete RPC.
	TenantServiceDeleteProcedure = "/api.v1.TenantService/Delete"
)

// TenantServiceClient is a client for the api.v1.TenantService service.
type TenantServiceClient interface {
	Create(context.Context, *connect_go.Request[v1.TenantServiceCreateRequest]) (*connect_go.Response[v1.TenantServiceCreateResponse], error)
	// CreateOrUpdate should only be used from within the application
	// will check if tenant already exists and updates if necessary, otherwise create a new tenant
	CreateOrUpdate(context.Context, *connect_go.Request[v1.TenantServiceCreateOrUpdateRequest]) (*connect_go.Response[v1.TenantServiceCreateOrUpdateResponse], error)
	Get(context.Context, *connect_go.Request[v1.TenantServiceGetRequest]) (*connect_go.Response[v1.TenantServiceGetResponse], error)
	Update(context.Context, *connect_go.Request[v1.TenantServiceUpdateRequest]) (*connect_go.Response[v1.TenantServiceUpdateResponse], error)
	Delete(context.Context, *connect_go.Request[v1.TenantServiceDeleteRequest]) (*connect_go.Response[v1.TenantServiceDeleteResponse], error)
}

// NewTenantServiceClient constructs a client for the api.v1.TenantService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTenantServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TenantServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tenantServiceClient{
		create: connect_go.NewClient[v1.TenantServiceCreateRequest, v1.TenantServiceCreateResponse](
			httpClient,
			baseURL+TenantServiceCreateProcedure,
			opts...,
		),
		createOrUpdate: connect_go.NewClient[v1.TenantServiceCreateOrUpdateRequest, v1.TenantServiceCreateOrUpdateResponse](
			httpClient,
			baseURL+TenantServiceCreateOrUpdateProcedure,
			opts...,
		),
		get: connect_go.NewClient[v1.TenantServiceGetRequest, v1.TenantServiceGetResponse](
			httpClient,
			baseURL+TenantServiceGetProcedure,
			opts...,
		),
		update: connect_go.NewClient[v1.TenantServiceUpdateRequest, v1.TenantServiceUpdateResponse](
			httpClient,
			baseURL+TenantServiceUpdateProcedure,
			opts...,
		),
		delete: connect_go.NewClient[v1.TenantServiceDeleteRequest, v1.TenantServiceDeleteResponse](
			httpClient,
			baseURL+TenantServiceDeleteProcedure,
			opts...,
		),
	}
}

// tenantServiceClient implements TenantServiceClient.
type tenantServiceClient struct {
	create         *connect_go.Client[v1.TenantServiceCreateRequest, v1.TenantServiceCreateResponse]
	createOrUpdate *connect_go.Client[v1.TenantServiceCreateOrUpdateRequest, v1.TenantServiceCreateOrUpdateResponse]
	get            *connect_go.Client[v1.TenantServiceGetRequest, v1.TenantServiceGetResponse]
	update         *connect_go.Client[v1.TenantServiceUpdateRequest, v1.TenantServiceUpdateResponse]
	delete         *connect_go.Client[v1.TenantServiceDeleteRequest, v1.TenantServiceDeleteResponse]
}

// Create calls api.v1.TenantService.Create.
func (c *tenantServiceClient) Create(ctx context.Context, req *connect_go.Request[v1.TenantServiceCreateRequest]) (*connect_go.Response[v1.TenantServiceCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// CreateOrUpdate calls api.v1.TenantService.CreateOrUpdate.
func (c *tenantServiceClient) CreateOrUpdate(ctx context.Context, req *connect_go.Request[v1.TenantServiceCreateOrUpdateRequest]) (*connect_go.Response[v1.TenantServiceCreateOrUpdateResponse], error) {
	return c.createOrUpdate.CallUnary(ctx, req)
}

// Get calls api.v1.TenantService.Get.
func (c *tenantServiceClient) Get(ctx context.Context, req *connect_go.Request[v1.TenantServiceGetRequest]) (*connect_go.Response[v1.TenantServiceGetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Update calls api.v1.TenantService.Update.
func (c *tenantServiceClient) Update(ctx context.Context, req *connect_go.Request[v1.TenantServiceUpdateRequest]) (*connect_go.Response[v1.TenantServiceUpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls api.v1.TenantService.Delete.
func (c *tenantServiceClient) Delete(ctx context.Context, req *connect_go.Request[v1.TenantServiceDeleteRequest]) (*connect_go.Response[v1.TenantServiceDeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// TenantServiceHandler is an implementation of the api.v1.TenantService service.
type TenantServiceHandler interface {
	Create(context.Context, *connect_go.Request[v1.TenantServiceCreateRequest]) (*connect_go.Response[v1.TenantServiceCreateResponse], error)
	// CreateOrUpdate should only be used from within the application
	// will check if tenant already exists and updates if necessary, otherwise create a new tenant
	CreateOrUpdate(context.Context, *connect_go.Request[v1.TenantServiceCreateOrUpdateRequest]) (*connect_go.Response[v1.TenantServiceCreateOrUpdateResponse], error)
	Get(context.Context, *connect_go.Request[v1.TenantServiceGetRequest]) (*connect_go.Response[v1.TenantServiceGetResponse], error)
	Update(context.Context, *connect_go.Request[v1.TenantServiceUpdateRequest]) (*connect_go.Response[v1.TenantServiceUpdateResponse], error)
	Delete(context.Context, *connect_go.Request[v1.TenantServiceDeleteRequest]) (*connect_go.Response[v1.TenantServiceDeleteResponse], error)
}

// NewTenantServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTenantServiceHandler(svc TenantServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	tenantServiceCreateHandler := connect_go.NewUnaryHandler(
		TenantServiceCreateProcedure,
		svc.Create,
		opts...,
	)
	tenantServiceCreateOrUpdateHandler := connect_go.NewUnaryHandler(
		TenantServiceCreateOrUpdateProcedure,
		svc.CreateOrUpdate,
		opts...,
	)
	tenantServiceGetHandler := connect_go.NewUnaryHandler(
		TenantServiceGetProcedure,
		svc.Get,
		opts...,
	)
	tenantServiceUpdateHandler := connect_go.NewUnaryHandler(
		TenantServiceUpdateProcedure,
		svc.Update,
		opts...,
	)
	tenantServiceDeleteHandler := connect_go.NewUnaryHandler(
		TenantServiceDeleteProcedure,
		svc.Delete,
		opts...,
	)
	return "/api.v1.TenantService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TenantServiceCreateProcedure:
			tenantServiceCreateHandler.ServeHTTP(w, r)
		case TenantServiceCreateOrUpdateProcedure:
			tenantServiceCreateOrUpdateHandler.ServeHTTP(w, r)
		case TenantServiceGetProcedure:
			tenantServiceGetHandler.ServeHTTP(w, r)
		case TenantServiceUpdateProcedure:
			tenantServiceUpdateHandler.ServeHTTP(w, r)
		case TenantServiceDeleteProcedure:
			tenantServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTenantServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTenantServiceHandler struct{}

func (UnimplementedTenantServiceHandler) Create(context.Context, *connect_go.Request[v1.TenantServiceCreateRequest]) (*connect_go.Response[v1.TenantServiceCreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.TenantService.Create is not implemented"))
}

func (UnimplementedTenantServiceHandler) CreateOrUpdate(context.Context, *connect_go.Request[v1.TenantServiceCreateOrUpdateRequest]) (*connect_go.Response[v1.TenantServiceCreateOrUpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.TenantService.CreateOrUpdate is not implemented"))
}

func (UnimplementedTenantServiceHandler) Get(context.Context, *connect_go.Request[v1.TenantServiceGetRequest]) (*connect_go.Response[v1.TenantServiceGetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.TenantService.Get is not implemented"))
}

func (UnimplementedTenantServiceHandler) Update(context.Context, *connect_go.Request[v1.TenantServiceUpdateRequest]) (*connect_go.Response[v1.TenantServiceUpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.TenantService.Update is not implemented"))
}

func (UnimplementedTenantServiceHandler) Delete(context.Context, *connect_go.Request[v1.TenantServiceDeleteRequest]) (*connect_go.Response[v1.TenantServiceDeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.TenantService.Delete is not implemented"))
}
