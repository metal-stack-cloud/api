// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/machine.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/metal-stack-cloud/api/go/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MachineServiceName is the fully-qualified name of the MachineService service.
	MachineServiceName = "api.v1.MachineService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MachineServiceCreateProcedure is the fully-qualified name of the MachineService's Create RPC.
	MachineServiceCreateProcedure = "/api.v1.MachineService/Create"
	// MachineServiceGetProcedure is the fully-qualified name of the MachineService's Get RPC.
	MachineServiceGetProcedure = "/api.v1.MachineService/Get"
	// MachineServiceListProcedure is the fully-qualified name of the MachineService's List RPC.
	MachineServiceListProcedure = "/api.v1.MachineService/List"
	// MachineServiceDeleteProcedure is the fully-qualified name of the MachineService's Delete RPC.
	MachineServiceDeleteProcedure = "/api.v1.MachineService/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	machineServiceServiceDescriptor      = v1.File_api_v1_machine_proto.Services().ByName("MachineService")
	machineServiceCreateMethodDescriptor = machineServiceServiceDescriptor.Methods().ByName("Create")
	machineServiceGetMethodDescriptor    = machineServiceServiceDescriptor.Methods().ByName("Get")
	machineServiceListMethodDescriptor   = machineServiceServiceDescriptor.Methods().ByName("List")
	machineServiceDeleteMethodDescriptor = machineServiceServiceDescriptor.Methods().ByName("Delete")
)

// MachineServiceClient is a client for the api.v1.MachineService service.
type MachineServiceClient interface {
	// Create a machine
	Create(context.Context, *connect.Request[v1.MachineServiceCreateRequest]) (*connect.Response[v1.MachineServiceCreateResponse], error)
	// Get a machine
	Get(context.Context, *connect.Request[v1.MachineServiceGetRequest]) (*connect.Response[v1.MachineServiceGetResponse], error)
	// List machines
	List(context.Context, *connect.Request[v1.MachineServiceListRequest]) (*connect.Response[v1.MachineServiceListResponse], error)
	// Delete a machine
	Delete(context.Context, *connect.Request[v1.MachineServiceDeleteRequest]) (*connect.Response[v1.MachineServiceDeleteResponse], error)
}

// NewMachineServiceClient constructs a client for the api.v1.MachineService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMachineServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MachineServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &machineServiceClient{
		create: connect.NewClient[v1.MachineServiceCreateRequest, v1.MachineServiceCreateResponse](
			httpClient,
			baseURL+MachineServiceCreateProcedure,
			connect.WithSchema(machineServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.MachineServiceGetRequest, v1.MachineServiceGetResponse](
			httpClient,
			baseURL+MachineServiceGetProcedure,
			connect.WithSchema(machineServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v1.MachineServiceListRequest, v1.MachineServiceListResponse](
			httpClient,
			baseURL+MachineServiceListProcedure,
			connect.WithSchema(machineServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.MachineServiceDeleteRequest, v1.MachineServiceDeleteResponse](
			httpClient,
			baseURL+MachineServiceDeleteProcedure,
			connect.WithSchema(machineServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// machineServiceClient implements MachineServiceClient.
type machineServiceClient struct {
	create *connect.Client[v1.MachineServiceCreateRequest, v1.MachineServiceCreateResponse]
	get    *connect.Client[v1.MachineServiceGetRequest, v1.MachineServiceGetResponse]
	list   *connect.Client[v1.MachineServiceListRequest, v1.MachineServiceListResponse]
	delete *connect.Client[v1.MachineServiceDeleteRequest, v1.MachineServiceDeleteResponse]
}

// Create calls api.v1.MachineService.Create.
func (c *machineServiceClient) Create(ctx context.Context, req *connect.Request[v1.MachineServiceCreateRequest]) (*connect.Response[v1.MachineServiceCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Get calls api.v1.MachineService.Get.
func (c *machineServiceClient) Get(ctx context.Context, req *connect.Request[v1.MachineServiceGetRequest]) (*connect.Response[v1.MachineServiceGetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls api.v1.MachineService.List.
func (c *machineServiceClient) List(ctx context.Context, req *connect.Request[v1.MachineServiceListRequest]) (*connect.Response[v1.MachineServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Delete calls api.v1.MachineService.Delete.
func (c *machineServiceClient) Delete(ctx context.Context, req *connect.Request[v1.MachineServiceDeleteRequest]) (*connect.Response[v1.MachineServiceDeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// MachineServiceHandler is an implementation of the api.v1.MachineService service.
type MachineServiceHandler interface {
	// Create a machine
	Create(context.Context, *connect.Request[v1.MachineServiceCreateRequest]) (*connect.Response[v1.MachineServiceCreateResponse], error)
	// Get a machine
	Get(context.Context, *connect.Request[v1.MachineServiceGetRequest]) (*connect.Response[v1.MachineServiceGetResponse], error)
	// List machines
	List(context.Context, *connect.Request[v1.MachineServiceListRequest]) (*connect.Response[v1.MachineServiceListResponse], error)
	// Delete a machine
	Delete(context.Context, *connect.Request[v1.MachineServiceDeleteRequest]) (*connect.Response[v1.MachineServiceDeleteResponse], error)
}

// NewMachineServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMachineServiceHandler(svc MachineServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	machineServiceCreateHandler := connect.NewUnaryHandler(
		MachineServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(machineServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceGetHandler := connect.NewUnaryHandler(
		MachineServiceGetProcedure,
		svc.Get,
		connect.WithSchema(machineServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceListHandler := connect.NewUnaryHandler(
		MachineServiceListProcedure,
		svc.List,
		connect.WithSchema(machineServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	machineServiceDeleteHandler := connect.NewUnaryHandler(
		MachineServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(machineServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.MachineService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MachineServiceCreateProcedure:
			machineServiceCreateHandler.ServeHTTP(w, r)
		case MachineServiceGetProcedure:
			machineServiceGetHandler.ServeHTTP(w, r)
		case MachineServiceListProcedure:
			machineServiceListHandler.ServeHTTP(w, r)
		case MachineServiceDeleteProcedure:
			machineServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMachineServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMachineServiceHandler struct{}

func (UnimplementedMachineServiceHandler) Create(context.Context, *connect.Request[v1.MachineServiceCreateRequest]) (*connect.Response[v1.MachineServiceCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.MachineService.Create is not implemented"))
}

func (UnimplementedMachineServiceHandler) Get(context.Context, *connect.Request[v1.MachineServiceGetRequest]) (*connect.Response[v1.MachineServiceGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.MachineService.Get is not implemented"))
}

func (UnimplementedMachineServiceHandler) List(context.Context, *connect.Request[v1.MachineServiceListRequest]) (*connect.Response[v1.MachineServiceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.MachineService.List is not implemented"))
}

func (UnimplementedMachineServiceHandler) Delete(context.Context, *connect.Request[v1.MachineServiceDeleteRequest]) (*connect.Response[v1.MachineServiceDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.MachineService.Delete is not implemented"))
}
