// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: api/v1/cluster.proto

package apiv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Operate defines the types of reconciliation to be triggered
type Operate int32

const (
	// OPERATE_UNSPECIFIED is not specified
	Operate_OPERATE_UNSPECIFIED Operate = 0
	// OPERATE_RECONCILE reconcile the cluster
	Operate_OPERATE_RECONCILE Operate = 1
	// OPERATE_MAINTAIN maintain the cluster
	Operate_OPERATE_MAINTAIN Operate = 2
	// OPERATE_RETRY retry the reconciliation of the cluster
	Operate_OPERATE_RETRY Operate = 3
)

// Enum value maps for Operate.
var (
	Operate_name = map[int32]string{
		0: "OPERATE_UNSPECIFIED",
		1: "OPERATE_RECONCILE",
		2: "OPERATE_MAINTAIN",
		3: "OPERATE_RETRY",
	}
	Operate_value = map[string]int32{
		"OPERATE_UNSPECIFIED": 0,
		"OPERATE_RECONCILE":   1,
		"OPERATE_MAINTAIN":    2,
		"OPERATE_RETRY":       3,
	}
)

func (x Operate) Enum() *Operate {
	p := new(Operate)
	*p = x
	return p
}

func (x Operate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operate) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_cluster_proto_enumTypes[0].Descriptor()
}

func (Operate) Type() protoreflect.EnumType {
	return &file_api_v1_cluster_proto_enumTypes[0]
}

func (x Operate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operate.Descriptor instead.
func (Operate) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{0}
}

// Cluster describes a kubernetes cluster
type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uuid of the cluster
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Name of the cluster
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Project where this cluster belongs to
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// Partition where this cluster was created
	Partition string `protobuf:"bytes,4,opt,name=partition,proto3" json:"partition,omitempty"`
	// Kubernetes defines the kubernetes specifications of this cluster
	Kubernetes *KubernetesSpec `protobuf:"bytes,5,opt,name=kubernetes,proto3" json:"kubernetes,omitempty"`
	// Workers defines the list of worker groups with their specification
	Workers []*Worker `protobuf:"bytes,6,rep,name=workers,proto3" json:"workers,omitempty"`
	// Maintenance defines when automated actions on this cluster should be scheduled
	Maintenance *Maintenance `protobuf:"bytes,7,opt,name=maintenance,proto3" json:"maintenance,omitempty"`
	// Tenant where this cluster belongs to
	Tenant string `protobuf:"bytes,8,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// CreatedAt defines the date when this cluster was created
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// UpdatedAt defines the date when this cluster was updated
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// DeletedAt defines the date when this cluster was deleted
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Status of this cluster
	Status *ClusterStatus `protobuf:"bytes,20,opt,name=status,proto3" json:"status,omitempty"`
	// Purpose of this cluster, can be for example production, development or evaluation
	Purpose *string `protobuf:"bytes,21,opt,name=purpose,proto3,oneof" json:"purpose,omitempty"`
	// Monitoring details for this cluster
	Monitoring *ClusterMonitoring `protobuf:"bytes,22,opt,name=monitoring,proto3" json:"monitoring,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	mi := &file_api_v1_cluster_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *Cluster) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *Cluster) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *Cluster) GetKubernetes() *KubernetesSpec {
	if x != nil {
		return x.Kubernetes
	}
	return nil
}

func (x *Cluster) GetWorkers() []*Worker {
	if x != nil {
		return x.Workers
	}
	return nil
}

func (x *Cluster) GetMaintenance() *Maintenance {
	if x != nil {
		return x.Maintenance
	}
	return nil
}

func (x *Cluster) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *Cluster) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Cluster) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Cluster) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Cluster) GetStatus() *ClusterStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Cluster) GetPurpose() string {
	if x != nil && x.Purpose != nil {
		return *x.Purpose
	}
	return ""
}

func (x *Cluster) GetMonitoring() *ClusterMonitoring {
	if x != nil {
		return x.Monitoring
	}
	return nil
}

// KubernetesSpec details of kubernetes this cluster
type KubernetesSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of kubernetes
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *KubernetesSpec) Reset() {
	*x = KubernetesSpec{}
	mi := &file_api_v1_cluster_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesSpec) ProtoMessage() {}

func (x *KubernetesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesSpec.ProtoReflect.Descriptor instead.
func (*KubernetesSpec) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *KubernetesSpec) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Maintenance defines when automatic actions should be scheduled on this cluster
type Maintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KubernetesAutoupdate if set to true, kubernetes patch version updates will be done in the maintenance window
	KubernetesAutoupdate *bool `protobuf:"varint,1,opt,name=kubernetes_autoupdate,json=kubernetesAutoupdate,proto3,oneof" json:"kubernetes_autoupdate,omitempty"`
	// MachineimageAutoupdate if set to true, machine images will be automatically update by rolling nodes in the maintenance window
	MachineimageAutoupdate *bool `protobuf:"varint,2,opt,name=machineimage_autoupdate,json=machineimageAutoupdate,proto3,oneof" json:"machineimage_autoupdate,omitempty"`
	// TimeWindow defines the start time and duration during which automatic actions will be performed
	TimeWindow *MaintenanceTimeWindow `protobuf:"bytes,3,opt,name=time_window,json=timeWindow,proto3" json:"time_window,omitempty"`
}

func (x *Maintenance) Reset() {
	*x = Maintenance{}
	mi := &file_api_v1_cluster_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Maintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Maintenance) ProtoMessage() {}

func (x *Maintenance) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Maintenance.ProtoReflect.Descriptor instead.
func (*Maintenance) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *Maintenance) GetKubernetesAutoupdate() bool {
	if x != nil && x.KubernetesAutoupdate != nil {
		return *x.KubernetesAutoupdate
	}
	return false
}

func (x *Maintenance) GetMachineimageAutoupdate() bool {
	if x != nil && x.MachineimageAutoupdate != nil {
		return *x.MachineimageAutoupdate
	}
	return false
}

func (x *Maintenance) GetTimeWindow() *MaintenanceTimeWindow {
	if x != nil {
		return x.TimeWindow
	}
	return nil
}

// MaintenanceTimeWindow defines the start time and duration during which automatic actions will be performed
type MaintenanceTimeWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Begin of the MaintenanceTimeWindow
	Begin *Time `protobuf:"bytes,1,opt,name=begin,proto3" json:"begin,omitempty"`
	// Duration of the MaintenanceTimeWindow
	Duration *durationpb.Duration `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *MaintenanceTimeWindow) Reset() {
	*x = MaintenanceTimeWindow{}
	mi := &file_api_v1_cluster_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaintenanceTimeWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaintenanceTimeWindow) ProtoMessage() {}

func (x *MaintenanceTimeWindow) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaintenanceTimeWindow.ProtoReflect.Descriptor instead.
func (*MaintenanceTimeWindow) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *MaintenanceTimeWindow) GetBegin() *Time {
	if x != nil {
		return x.Begin
	}
	return nil
}

func (x *MaintenanceTimeWindow) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

// Time of day
type Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hour begin of the maintenance window, specified in 24 hour format.
	Hour uint32 `protobuf:"varint,1,opt,name=hour,proto3" json:"hour,omitempty"`
	// hour:minute begin of the maintenance window.
	Minute uint32 `protobuf:"varint,2,opt,name=minute,proto3" json:"minute,omitempty"`
	// timezone specifies for which region in the world the given hour:minute should apply.
	Timezone string `protobuf:"bytes,3,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *Time) Reset() {
	*x = Time{}
	mi := &file_api_v1_cluster_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Time) ProtoMessage() {}

func (x *Time) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Time.ProtoReflect.Descriptor instead.
func (*Time) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *Time) GetHour() uint32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *Time) GetMinute() uint32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *Time) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

// Worker defines a set of worker nodes with identical properties
type Worker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of this worker group
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// MachineType of machines which should be used for the worker nodes in this group
	MachineType string `protobuf:"bytes,2,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	// Minsize defines the minimum amount of machines present in this worker group
	Minsize uint32 `protobuf:"varint,3,opt,name=minsize,proto3" json:"minsize,omitempty"`
	// Maxsize defines the maximum amount of machines present in this worker group
	Maxsize uint32 `protobuf:"varint,4,opt,name=maxsize,proto3" json:"maxsize,omitempty"`
	// Maxsurge defines the maximum amount of machines which are spun up in this worker group during a rolling upgrade
	Maxsurge uint32 `protobuf:"varint,5,opt,name=maxsurge,proto3" json:"maxsurge,omitempty"`
	// Maxunavailable defines the maximum amount of not available machines in this worker group during a rolling upgrade
	Maxunavailable uint32 `protobuf:"varint,6,opt,name=maxunavailable,proto3" json:"maxunavailable,omitempty"`
}

func (x *Worker) Reset() {
	*x = Worker{}
	mi := &file_api_v1_cluster_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Worker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worker) ProtoMessage() {}

func (x *Worker) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worker.ProtoReflect.Descriptor instead.
func (*Worker) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *Worker) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Worker) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *Worker) GetMinsize() uint32 {
	if x != nil {
		return x.Minsize
	}
	return 0
}

func (x *Worker) GetMaxsize() uint32 {
	if x != nil {
		return x.Maxsize
	}
	return 0
}

func (x *Worker) GetMaxsurge() uint32 {
	if x != nil {
		return x.Maxsurge
	}
	return 0
}

func (x *Worker) GetMaxunavailable() uint32 {
	if x != nil {
		return x.Maxunavailable
	}
	return 0
}

// WorkerUpdate is used to update a Worker group
type WorkerUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the worker group to update
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// MachineType to change in this worker group
	MachineType *string `protobuf:"bytes,2,opt,name=machine_type,json=machineType,proto3,oneof" json:"machine_type,omitempty"`
	// Minsize defines the minimum amount of machines present in this worker group
	Minsize *uint32 `protobuf:"varint,3,opt,name=minsize,proto3,oneof" json:"minsize,omitempty"`
	// Maxsize defines the maximum amount of machines present in this worker group
	Maxsize *uint32 `protobuf:"varint,4,opt,name=maxsize,proto3,oneof" json:"maxsize,omitempty"`
	// Maxsurge defines the maximum amount of machines which are spun up in this worker group during a rolling upgrade
	Maxsurge *uint32 `protobuf:"varint,5,opt,name=maxsurge,proto3,oneof" json:"maxsurge,omitempty"`
	// Maxunavailable defines the maximum amount of not available machines in this worker group during a rolling upgrade
	Maxunavailable *uint32 `protobuf:"varint,6,opt,name=maxunavailable,proto3,oneof" json:"maxunavailable,omitempty"`
}

func (x *WorkerUpdate) Reset() {
	*x = WorkerUpdate{}
	mi := &file_api_v1_cluster_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerUpdate) ProtoMessage() {}

func (x *WorkerUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerUpdate.ProtoReflect.Descriptor instead.
func (*WorkerUpdate) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{6}
}

func (x *WorkerUpdate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkerUpdate) GetMachineType() string {
	if x != nil && x.MachineType != nil {
		return *x.MachineType
	}
	return ""
}

func (x *WorkerUpdate) GetMinsize() uint32 {
	if x != nil && x.Minsize != nil {
		return *x.Minsize
	}
	return 0
}

func (x *WorkerUpdate) GetMaxsize() uint32 {
	if x != nil && x.Maxsize != nil {
		return *x.Maxsize
	}
	return 0
}

func (x *WorkerUpdate) GetMaxsurge() uint32 {
	if x != nil && x.Maxsurge != nil {
		return *x.Maxsurge
	}
	return 0
}

func (x *WorkerUpdate) GetMaxunavailable() uint32 {
	if x != nil && x.Maxunavailable != nil {
		return *x.Maxunavailable
	}
	return 0
}

// ClusterServiceGetRequest is the request payload for a cluster get request
type ClusterServiceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uuid of the cluster
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Project of the cluster
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *ClusterServiceGetRequest) Reset() {
	*x = ClusterServiceGetRequest{}
	mi := &file_api_v1_cluster_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterServiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceGetRequest) ProtoMessage() {}

func (x *ClusterServiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceGetRequest.ProtoReflect.Descriptor instead.
func (*ClusterServiceGetRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{7}
}

func (x *ClusterServiceGetRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterServiceGetRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// ClusterServiceOperateRequest is the request payload for the cluster operate request
type ClusterServiceOperateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uuid of the cluster
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Project of the cluster
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Operate is the operation which should be performed
	Operate Operate `protobuf:"varint,3,opt,name=operate,proto3,enum=api.v1.Operate" json:"operate,omitempty"`
}

func (x *ClusterServiceOperateRequest) Reset() {
	*x = ClusterServiceOperateRequest{}
	mi := &file_api_v1_cluster_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterServiceOperateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceOperateRequest) ProtoMessage() {}

func (x *ClusterServiceOperateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceOperateRequest.ProtoReflect.Descriptor instead.
func (*ClusterServiceOperateRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{8}
}

func (x *ClusterServiceOperateRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterServiceOperateRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ClusterServiceOperateRequest) GetOperate() Operate {
	if x != nil {
		return x.Operate
	}
	return Operate_OPERATE_UNSPECIFIED
}

// ClusterServiceGetRequest is the request payload for a cluster get request
type ClusterServiceGetCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uuid of the cluster
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Project of the cluster
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Expiration defines the duration after which the requested kubernetes access token can not be used anymore
	Expiration *durationpb.Duration `protobuf:"bytes,4,opt,name=expiration,proto3,oneof" json:"expiration,omitempty"`
}

func (x *ClusterServiceGetCredentialsRequest) Reset() {
	*x = ClusterServiceGetCredentialsRequest{}
	mi := &file_api_v1_cluster_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterServiceGetCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceGetCredentialsRequest) ProtoMessage() {}

func (x *ClusterServiceGetCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceGetCredentialsRequest.ProtoReflect.Descriptor instead.
func (*ClusterServiceGetCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{9}
}

func (x *ClusterServiceGetCredentialsRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterServiceGetCredentialsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ClusterServiceGetCredentialsRequest) GetExpiration() *durationpb.Duration {
	if x != nil {
		return x.Expiration
	}
	return nil
}

// ClusterServiceListRequest is the request payload for a cluster list request
type ClusterServiceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Project of the cluster
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *ClusterServiceListRequest) Reset() {
	*x = ClusterServiceListRequest{}
	mi := &file_api_v1_cluster_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceListRequest) ProtoMessage() {}

func (x *ClusterServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceListRequest.ProtoReflect.Descriptor instead.
func (*ClusterServiceListRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{10}
}

func (x *ClusterServiceListRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// ClusterServiceCreateRequest is the request payload for a cluster create request
type ClusterServiceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the cluster to create
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Project of the cluster
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// Partition of the cluster
	Partition string `protobuf:"bytes,4,opt,name=partition,proto3" json:"partition,omitempty"`
	// Kubernetes specification of the cluster
	Kubernetes *KubernetesSpec `protobuf:"bytes,6,opt,name=kubernetes,proto3" json:"kubernetes,omitempty"`
	// Worker specification of the cluster
	Workers []*Worker `protobuf:"bytes,7,rep,name=workers,proto3" json:"workers,omitempty"`
	// Maintenance specification of the cluster
	Maintenance *Maintenance `protobuf:"bytes,8,opt,name=maintenance,proto3" json:"maintenance,omitempty"`
}

func (x *ClusterServiceCreateRequest) Reset() {
	*x = ClusterServiceCreateRequest{}
	mi := &file_api_v1_cluster_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterServiceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceCreateRequest) ProtoMessage() {}

func (x *ClusterServiceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceCreateRequest.ProtoReflect.Descriptor instead.
func (*ClusterServiceCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{11}
}

func (x *ClusterServiceCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterServiceCreateRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ClusterServiceCreateRequest) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *ClusterServiceCreateRequest) GetKubernetes() *KubernetesSpec {
	if x != nil {
		return x.Kubernetes
	}
	return nil
}

func (x *ClusterServiceCreateRequest) GetWorkers() []*Worker {
	if x != nil {
		return x.Workers
	}
	return nil
}

func (x *ClusterServiceCreateRequest) GetMaintenance() *Maintenance {
	if x != nil {
		return x.Maintenance
	}
	return nil
}

// ClusterServiceUpdateRequest is the request payload for a cluster update request
type ClusterServiceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uuid of the cluster
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Project of the cluster
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Kubernetes specification of the cluster
	Kubernetes *KubernetesSpec `protobuf:"bytes,3,opt,name=kubernetes,proto3,oneof" json:"kubernetes,omitempty"`
	// Worker specification of the cluster
	Workers []*WorkerUpdate `protobuf:"bytes,4,rep,name=workers,proto3" json:"workers,omitempty"`
	// Maintenance specification of the cluster
	Maintenance *Maintenance `protobuf:"bytes,5,opt,name=maintenance,proto3,oneof" json:"maintenance,omitempty"`
}

func (x *ClusterServiceUpdateRequest) Reset() {
	*x = ClusterServiceUpdateRequest{}
	mi := &file_api_v1_cluster_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterServiceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceUpdateRequest) ProtoMessage() {}

func (x *ClusterServiceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceUpdateRequest.ProtoReflect.Descriptor instead.
func (*ClusterServiceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{12}
}

func (x *ClusterServiceUpdateRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterServiceUpdateRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ClusterServiceUpdateRequest) GetKubernetes() *KubernetesSpec {
	if x != nil {
		return x.Kubernetes
	}
	return nil
}

func (x *ClusterServiceUpdateRequest) GetWorkers() []*WorkerUpdate {
	if x != nil {
		return x.Workers
	}
	return nil
}

func (x *ClusterServiceUpdateRequest) GetMaintenance() *Maintenance {
	if x != nil {
		return x.Maintenance
	}
	return nil
}

// ClusterServiceDeleteRequest is the request payload for a cluster delete request
type ClusterServiceDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uuid of the cluster
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Project of the cluster
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *ClusterServiceDeleteRequest) Reset() {
	*x = ClusterServiceDeleteRequest{}
	mi := &file_api_v1_cluster_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterServiceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceDeleteRequest) ProtoMessage() {}

func (x *ClusterServiceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceDeleteRequest.ProtoReflect.Descriptor instead.
func (*ClusterServiceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{13}
}

func (x *ClusterServiceDeleteRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterServiceDeleteRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// ClusterServiceWatchStatusRequest is the request payload for a cluster watch status request
type ClusterServiceWatchStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uuid of the cluster
	Uuid *string `protobuf:"bytes,1,opt,name=uuid,proto3,oneof" json:"uuid,omitempty"`
	// Project of the cluster
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *ClusterServiceWatchStatusRequest) Reset() {
	*x = ClusterServiceWatchStatusRequest{}
	mi := &file_api_v1_cluster_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterServiceWatchStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceWatchStatusRequest) ProtoMessage() {}

func (x *ClusterServiceWatchStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceWatchStatusRequest.ProtoReflect.Descriptor instead.
func (*ClusterServiceWatchStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{14}
}

func (x *ClusterServiceWatchStatusRequest) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *ClusterServiceWatchStatusRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// ClusterStatus
type ClusterStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uuid of the cluster
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Progress of the cluster reconciliation
	Progress uint32 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	// State of the cluster
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// Type of the cluster status
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// ApiServerReady represents the ready state of the kubernetes api server
	ApiServerReady string `protobuf:"bytes,10,opt,name=api_server_ready,json=apiServerReady,proto3" json:"api_server_ready,omitempty"`
	// ControlPlaneReady represents the ready state of the control plane components
	ControlPlaneReady string `protobuf:"bytes,11,opt,name=control_plane_ready,json=controlPlaneReady,proto3" json:"control_plane_ready,omitempty"`
	// NodesReady represents the ready state of the worker nodes
	NodesReady string `protobuf:"bytes,12,opt,name=nodes_ready,json=nodesReady,proto3" json:"nodes_ready,omitempty"`
	// SystemComponentsReady represents the ready state of the system components
	SystemComponentsReady string `protobuf:"bytes,13,opt,name=system_components_ready,json=systemComponentsReady,proto3" json:"system_components_ready,omitempty"`
	// LastErrors is a list of the last known errors occurred during the cluster reconciliation
	LastErrors []*ClusterStatusLastError `protobuf:"bytes,14,rep,name=last_errors,json=lastErrors,proto3" json:"last_errors,omitempty"`
	// ClusterStatusConditions is a list of status conditions of the cluster
	Conditions []*ClusterStatusCondition `protobuf:"bytes,15,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *ClusterStatus) Reset() {
	*x = ClusterStatus{}
	mi := &file_api_v1_cluster_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStatus) ProtoMessage() {}

func (x *ClusterStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStatus.ProtoReflect.Descriptor instead.
func (*ClusterStatus) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{15}
}

func (x *ClusterStatus) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClusterStatus) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *ClusterStatus) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ClusterStatus) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ClusterStatus) GetApiServerReady() string {
	if x != nil {
		return x.ApiServerReady
	}
	return ""
}

func (x *ClusterStatus) GetControlPlaneReady() string {
	if x != nil {
		return x.ControlPlaneReady
	}
	return ""
}

func (x *ClusterStatus) GetNodesReady() string {
	if x != nil {
		return x.NodesReady
	}
	return ""
}

func (x *ClusterStatus) GetSystemComponentsReady() string {
	if x != nil {
		return x.SystemComponentsReady
	}
	return ""
}

func (x *ClusterStatus) GetLastErrors() []*ClusterStatusLastError {
	if x != nil {
		return x.LastErrors
	}
	return nil
}

func (x *ClusterStatus) GetConditions() []*ClusterStatusCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

// ClusterStatusLastError is the last known cluster status error
type ClusterStatusLastError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description a human readable message indicating details about the last error
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// TaskId ID of the task which caused this last error
	TaskId *string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3,oneof" json:"task_id,omitempty"`
	// LastUpdateTime last time the error was reported
	LastUpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
}

func (x *ClusterStatusLastError) Reset() {
	*x = ClusterStatusLastError{}
	mi := &file_api_v1_cluster_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterStatusLastError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStatusLastError) ProtoMessage() {}

func (x *ClusterStatusLastError) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStatusLastError.ProtoReflect.Descriptor instead.
func (*ClusterStatusLastError) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{16}
}

func (x *ClusterStatusLastError) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterStatusLastError) GetTaskId() string {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return ""
}

func (x *ClusterStatusLastError) GetLastUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateTime
	}
	return nil
}

// ClusterStatusCondition contains status conditions of a cluster
type ClusterStatusCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type is the type of the condition
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Status is the status of the condition
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Reason describes the reason for the condition's last transition
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// StatusMessage is a human readable message indicating details about the transition
	StatusMessage string `protobuf:"bytes,4,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// LastUpdateTime last time the condition transitioned
	LastTransitionTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty"`
	// LastUpdateTime last time the condition was updated
	LastUpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
}

func (x *ClusterStatusCondition) Reset() {
	*x = ClusterStatusCondition{}
	mi := &file_api_v1_cluster_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterStatusCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStatusCondition) ProtoMessage() {}

func (x *ClusterStatusCondition) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStatusCondition.ProtoReflect.Descriptor instead.
func (*ClusterStatusCondition) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{17}
}

func (x *ClusterStatusCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ClusterStatusCondition) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ClusterStatusCondition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ClusterStatusCondition) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *ClusterStatusCondition) GetLastTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTransitionTime
	}
	return nil
}

func (x *ClusterStatusCondition) GetLastUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateTime
	}
	return nil
}

// ClusterMonitoring contains details howto access the cluster monitoring
type ClusterMonitoring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Username to access the monitoring
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Password to access the monitoring
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Endpoint is the url to access the monitoring
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *ClusterMonitoring) Reset() {
	*x = ClusterMonitoring{}
	mi := &file_api_v1_cluster_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterMonitoring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMonitoring) ProtoMessage() {}

func (x *ClusterMonitoring) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMonitoring.ProtoReflect.Descriptor instead.
func (*ClusterMonitoring) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{18}
}

func (x *ClusterMonitoring) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ClusterMonitoring) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ClusterMonitoring) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

// ClusterServiceCreateResponse is the response payload of a cluster create request
type ClusterServiceCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster is the cluster
	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *ClusterServiceCreateResponse) Reset() {
	*x = ClusterServiceCreateResponse{}
	mi := &file_api_v1_cluster_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterServiceCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceCreateResponse) ProtoMessage() {}

func (x *ClusterServiceCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceCreateResponse.ProtoReflect.Descriptor instead.
func (*ClusterServiceCreateResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{19}
}

func (x *ClusterServiceCreateResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// ClusterServiceGetResponse is the response payload of a cluster get request
type ClusterServiceGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster is the cluster
	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *ClusterServiceGetResponse) Reset() {
	*x = ClusterServiceGetResponse{}
	mi := &file_api_v1_cluster_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterServiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceGetResponse) ProtoMessage() {}

func (x *ClusterServiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceGetResponse.ProtoReflect.Descriptor instead.
func (*ClusterServiceGetResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{20}
}

func (x *ClusterServiceGetResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// ClusterServiceGetCredentialsResponse is the response payload of a cluster get credentials request
type ClusterServiceGetCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster is the cluster
	Kubeconfig string `protobuf:"bytes,1,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"`
}

func (x *ClusterServiceGetCredentialsResponse) Reset() {
	*x = ClusterServiceGetCredentialsResponse{}
	mi := &file_api_v1_cluster_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterServiceGetCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceGetCredentialsResponse) ProtoMessage() {}

func (x *ClusterServiceGetCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceGetCredentialsResponse.ProtoReflect.Descriptor instead.
func (*ClusterServiceGetCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{21}
}

func (x *ClusterServiceGetCredentialsResponse) GetKubeconfig() string {
	if x != nil {
		return x.Kubeconfig
	}
	return ""
}

// ClusterServiceDeleteResponse is the response payload of a cluster delete request
type ClusterServiceDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster is the cluster
	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *ClusterServiceDeleteResponse) Reset() {
	*x = ClusterServiceDeleteResponse{}
	mi := &file_api_v1_cluster_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterServiceDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceDeleteResponse) ProtoMessage() {}

func (x *ClusterServiceDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceDeleteResponse.ProtoReflect.Descriptor instead.
func (*ClusterServiceDeleteResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{22}
}

func (x *ClusterServiceDeleteResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// ClusterServiceUpdateResponse is the response payload of a cluster update request
type ClusterServiceUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster is the cluster
	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *ClusterServiceUpdateResponse) Reset() {
	*x = ClusterServiceUpdateResponse{}
	mi := &file_api_v1_cluster_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterServiceUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceUpdateResponse) ProtoMessage() {}

func (x *ClusterServiceUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceUpdateResponse.ProtoReflect.Descriptor instead.
func (*ClusterServiceUpdateResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{23}
}

func (x *ClusterServiceUpdateResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// ClusterServiceListResponse is the response payload of a cluster list request
type ClusterServiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Clusters a list of clusters
	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *ClusterServiceListResponse) Reset() {
	*x = ClusterServiceListResponse{}
	mi := &file_api_v1_cluster_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceListResponse) ProtoMessage() {}

func (x *ClusterServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceListResponse.ProtoReflect.Descriptor instead.
func (*ClusterServiceListResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{24}
}

func (x *ClusterServiceListResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

// ClusterServiceWatchStatusResponse is the response payload of a cluster watch status request
type ClusterServiceWatchStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status the cluster status
	Status *ClusterStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ClusterServiceWatchStatusResponse) Reset() {
	*x = ClusterServiceWatchStatusResponse{}
	mi := &file_api_v1_cluster_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterServiceWatchStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceWatchStatusResponse) ProtoMessage() {}

func (x *ClusterServiceWatchStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceWatchStatusResponse.ProtoReflect.Descriptor instead.
func (*ClusterServiceWatchStatusResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{25}
}

func (x *ClusterServiceWatchStatusResponse) GetStatus() *ClusterStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// ClusterServiceOperateResponse is the response payload for the cluster operate request
type ClusterServiceOperateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster is the cluster
	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *ClusterServiceOperateResponse) Reset() {
	*x = ClusterServiceOperateResponse{}
	mi := &file_api_v1_cluster_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterServiceOperateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceOperateResponse) ProtoMessage() {}

func (x *ClusterServiceOperateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_cluster_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceOperateResponse.ProtoReflect.Descriptor instead.
func (*ClusterServiceOperateResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_cluster_proto_rawDescGZIP(), []int{26}
}

func (x *ClusterServiceOperateResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

var File_api_v1_cluster_proto protoreflect.FileDescriptor

var file_api_v1_cluster_proto_rawDesc = []byte{
	0x0a, 0x14, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x13,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x81, 0x05, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04,
	0x10, 0x02, 0x18, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07,
	0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x12, 0x35, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x22, 0x48, 0x0a, 0x0e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x48, 0x19, 0x72, 0x17, 0x28,
	0x08, 0x32, 0x13, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x2e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b,
	0x2e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xfb, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x38, 0x0a, 0x15, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x14, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x75, 0x74, 0x6f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x17, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x16, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x84, 0x01,
	0x0a, 0x15, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x22, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0xba, 0x48, 0x0d, 0xaa, 0x01, 0x0a,
	0x1a, 0x03, 0x08, 0xc0, 0x70, 0x32, 0x03, 0x08, 0x90, 0x1c, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04,
	0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a,
	0x02, 0x18, 0x18, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02,
	0x18, 0x3c, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x06, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x02,
	0x18, 0x80, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x18, 0x20, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x18, 0x40, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x73, 0x75, 0x72,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x18,
	0x40, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x73, 0x75, 0x72, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x0e, 0x6d,
	0x61, 0x78, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x18, 0x40, 0x52, 0x0e, 0x6d, 0x61,
	0x78, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xdb, 0x02, 0x0a,
	0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07,
	0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x01, 0x48,
	0x00, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x18, 0x20, 0x48, 0x01, 0x52, 0x07, 0x6d,
	0x69, 0x6e, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a,
	0x02, 0x18, 0x40, 0x48, 0x02, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x73, 0x75, 0x72, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x18, 0x40, 0x48, 0x03, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x73, 0x75, 0x72, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0e, 0x6d,
	0x61, 0x78, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x18, 0x40, 0x48, 0x04, 0x52, 0x0e,
	0x6d, 0x61, 0x78, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x69, 0x6e, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x78, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d,
	0x61, 0x78, 0x73, 0x75, 0x72, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x78, 0x75,
	0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x5e, 0x0a, 0x18, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80,
	0x01, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x1c, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72,
	0x05, 0x10, 0x02, 0x18, 0x80, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x33, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x23, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07,
	0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x41, 0x0a, 0x19, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba,
	0x48, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0x9b, 0x02, 0x0a, 0x1b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0xba, 0x48, 0x08, 0x72, 0x06, 0x10, 0x02, 0x18, 0x0c, 0x68, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x01,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x12,
	0x28, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x6d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0xa9, 0x02, 0x0a, 0x1b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63,
	0x48, 0x00, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x61, 0x0a, 0x1b,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72,
	0x05, 0x10, 0x02, 0x18, 0x80, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0x74, 0x0a, 0x20, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x02,
	0x18, 0x80, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x22, 0x9d, 0x03, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x69,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x36, 0x0a, 0x17,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x12, 0x3f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x16, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x22, 0x97, 0x02, 0x0a, 0x16, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x11,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x1c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x22, 0x46, 0x0a, 0x19, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x46, 0x0a, 0x24, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x49, 0x0a, 0x1c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x49, 0x0a, 0x1c, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x49, 0x0a, 0x1a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x52, 0x0a, 0x21, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4a, 0x0a, 0x1d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2a, 0x62, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x54, 0x52, 0x59, 0x10, 0x03, 0x32, 0xac, 0x06, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0a, 0xca,
	0xf3, 0x18, 0x02, 0x01, 0x02, 0xe0, 0xf3, 0x18, 0x01, 0x12, 0x57, 0x0a, 0x03, 0x47, 0x65, 0x74,
	0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0b, 0xca, 0xf3, 0x18, 0x03, 0x01, 0x02, 0x03, 0xe8, 0xf3,
	0x18, 0x02, 0x12, 0x5a, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x0b, 0xca, 0xf3, 0x18, 0x03, 0x01, 0x02, 0x03, 0xe8, 0xf3, 0x18, 0x02, 0x12, 0x71,
	0x0a, 0x0b, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x0b, 0xca, 0xf3, 0x18, 0x03, 0x01, 0x02, 0x03, 0xe8, 0xf3, 0x18, 0x02, 0x30,
	0x01, 0x12, 0x5b, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xca, 0xf3, 0x18, 0x02, 0x01, 0x02, 0x12, 0x5f,
	0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x0a, 0xca, 0xf3, 0x18, 0x02, 0x01, 0x02, 0xe0, 0xf3, 0x18, 0x01, 0x12,
	0x73, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xca, 0xf3,
	0x18, 0x02, 0x01, 0x02, 0x12, 0x5e, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0xca, 0xf3,
	0x18, 0x02, 0x01, 0x02, 0x42, 0x85, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x42, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b,
	0x61, 0x70, 0x69, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x41, 0x70,
	0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x06, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x12,
	0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x07, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_cluster_proto_rawDescOnce sync.Once
	file_api_v1_cluster_proto_rawDescData = file_api_v1_cluster_proto_rawDesc
)

func file_api_v1_cluster_proto_rawDescGZIP() []byte {
	file_api_v1_cluster_proto_rawDescOnce.Do(func() {
		file_api_v1_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_cluster_proto_rawDescData)
	})
	return file_api_v1_cluster_proto_rawDescData
}

var file_api_v1_cluster_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v1_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_api_v1_cluster_proto_goTypes = []any{
	(Operate)(0),                                 // 0: api.v1.Operate
	(*Cluster)(nil),                              // 1: api.v1.Cluster
	(*KubernetesSpec)(nil),                       // 2: api.v1.KubernetesSpec
	(*Maintenance)(nil),                          // 3: api.v1.Maintenance
	(*MaintenanceTimeWindow)(nil),                // 4: api.v1.MaintenanceTimeWindow
	(*Time)(nil),                                 // 5: api.v1.Time
	(*Worker)(nil),                               // 6: api.v1.Worker
	(*WorkerUpdate)(nil),                         // 7: api.v1.WorkerUpdate
	(*ClusterServiceGetRequest)(nil),             // 8: api.v1.ClusterServiceGetRequest
	(*ClusterServiceOperateRequest)(nil),         // 9: api.v1.ClusterServiceOperateRequest
	(*ClusterServiceGetCredentialsRequest)(nil),  // 10: api.v1.ClusterServiceGetCredentialsRequest
	(*ClusterServiceListRequest)(nil),            // 11: api.v1.ClusterServiceListRequest
	(*ClusterServiceCreateRequest)(nil),          // 12: api.v1.ClusterServiceCreateRequest
	(*ClusterServiceUpdateRequest)(nil),          // 13: api.v1.ClusterServiceUpdateRequest
	(*ClusterServiceDeleteRequest)(nil),          // 14: api.v1.ClusterServiceDeleteRequest
	(*ClusterServiceWatchStatusRequest)(nil),     // 15: api.v1.ClusterServiceWatchStatusRequest
	(*ClusterStatus)(nil),                        // 16: api.v1.ClusterStatus
	(*ClusterStatusLastError)(nil),               // 17: api.v1.ClusterStatusLastError
	(*ClusterStatusCondition)(nil),               // 18: api.v1.ClusterStatusCondition
	(*ClusterMonitoring)(nil),                    // 19: api.v1.ClusterMonitoring
	(*ClusterServiceCreateResponse)(nil),         // 20: api.v1.ClusterServiceCreateResponse
	(*ClusterServiceGetResponse)(nil),            // 21: api.v1.ClusterServiceGetResponse
	(*ClusterServiceGetCredentialsResponse)(nil), // 22: api.v1.ClusterServiceGetCredentialsResponse
	(*ClusterServiceDeleteResponse)(nil),         // 23: api.v1.ClusterServiceDeleteResponse
	(*ClusterServiceUpdateResponse)(nil),         // 24: api.v1.ClusterServiceUpdateResponse
	(*ClusterServiceListResponse)(nil),           // 25: api.v1.ClusterServiceListResponse
	(*ClusterServiceWatchStatusResponse)(nil),    // 26: api.v1.ClusterServiceWatchStatusResponse
	(*ClusterServiceOperateResponse)(nil),        // 27: api.v1.ClusterServiceOperateResponse
	(*timestamppb.Timestamp)(nil),                // 28: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                  // 29: google.protobuf.Duration
}
var file_api_v1_cluster_proto_depIdxs = []int32{
	2,  // 0: api.v1.Cluster.kubernetes:type_name -> api.v1.KubernetesSpec
	6,  // 1: api.v1.Cluster.workers:type_name -> api.v1.Worker
	3,  // 2: api.v1.Cluster.maintenance:type_name -> api.v1.Maintenance
	28, // 3: api.v1.Cluster.created_at:type_name -> google.protobuf.Timestamp
	28, // 4: api.v1.Cluster.updated_at:type_name -> google.protobuf.Timestamp
	28, // 5: api.v1.Cluster.deleted_at:type_name -> google.protobuf.Timestamp
	16, // 6: api.v1.Cluster.status:type_name -> api.v1.ClusterStatus
	19, // 7: api.v1.Cluster.monitoring:type_name -> api.v1.ClusterMonitoring
	4,  // 8: api.v1.Maintenance.time_window:type_name -> api.v1.MaintenanceTimeWindow
	5,  // 9: api.v1.MaintenanceTimeWindow.begin:type_name -> api.v1.Time
	29, // 10: api.v1.MaintenanceTimeWindow.duration:type_name -> google.protobuf.Duration
	0,  // 11: api.v1.ClusterServiceOperateRequest.operate:type_name -> api.v1.Operate
	29, // 12: api.v1.ClusterServiceGetCredentialsRequest.expiration:type_name -> google.protobuf.Duration
	2,  // 13: api.v1.ClusterServiceCreateRequest.kubernetes:type_name -> api.v1.KubernetesSpec
	6,  // 14: api.v1.ClusterServiceCreateRequest.workers:type_name -> api.v1.Worker
	3,  // 15: api.v1.ClusterServiceCreateRequest.maintenance:type_name -> api.v1.Maintenance
	2,  // 16: api.v1.ClusterServiceUpdateRequest.kubernetes:type_name -> api.v1.KubernetesSpec
	7,  // 17: api.v1.ClusterServiceUpdateRequest.workers:type_name -> api.v1.WorkerUpdate
	3,  // 18: api.v1.ClusterServiceUpdateRequest.maintenance:type_name -> api.v1.Maintenance
	17, // 19: api.v1.ClusterStatus.last_errors:type_name -> api.v1.ClusterStatusLastError
	18, // 20: api.v1.ClusterStatus.conditions:type_name -> api.v1.ClusterStatusCondition
	28, // 21: api.v1.ClusterStatusLastError.last_update_time:type_name -> google.protobuf.Timestamp
	28, // 22: api.v1.ClusterStatusCondition.last_transition_time:type_name -> google.protobuf.Timestamp
	28, // 23: api.v1.ClusterStatusCondition.last_update_time:type_name -> google.protobuf.Timestamp
	1,  // 24: api.v1.ClusterServiceCreateResponse.cluster:type_name -> api.v1.Cluster
	1,  // 25: api.v1.ClusterServiceGetResponse.cluster:type_name -> api.v1.Cluster
	1,  // 26: api.v1.ClusterServiceDeleteResponse.cluster:type_name -> api.v1.Cluster
	1,  // 27: api.v1.ClusterServiceUpdateResponse.cluster:type_name -> api.v1.Cluster
	1,  // 28: api.v1.ClusterServiceListResponse.clusters:type_name -> api.v1.Cluster
	16, // 29: api.v1.ClusterServiceWatchStatusResponse.status:type_name -> api.v1.ClusterStatus
	1,  // 30: api.v1.ClusterServiceOperateResponse.cluster:type_name -> api.v1.Cluster
	12, // 31: api.v1.ClusterService.Create:input_type -> api.v1.ClusterServiceCreateRequest
	8,  // 32: api.v1.ClusterService.Get:input_type -> api.v1.ClusterServiceGetRequest
	11, // 33: api.v1.ClusterService.List:input_type -> api.v1.ClusterServiceListRequest
	15, // 34: api.v1.ClusterService.WatchStatus:input_type -> api.v1.ClusterServiceWatchStatusRequest
	14, // 35: api.v1.ClusterService.Delete:input_type -> api.v1.ClusterServiceDeleteRequest
	13, // 36: api.v1.ClusterService.Update:input_type -> api.v1.ClusterServiceUpdateRequest
	10, // 37: api.v1.ClusterService.GetCredentials:input_type -> api.v1.ClusterServiceGetCredentialsRequest
	9,  // 38: api.v1.ClusterService.Operate:input_type -> api.v1.ClusterServiceOperateRequest
	20, // 39: api.v1.ClusterService.Create:output_type -> api.v1.ClusterServiceCreateResponse
	21, // 40: api.v1.ClusterService.Get:output_type -> api.v1.ClusterServiceGetResponse
	25, // 41: api.v1.ClusterService.List:output_type -> api.v1.ClusterServiceListResponse
	26, // 42: api.v1.ClusterService.WatchStatus:output_type -> api.v1.ClusterServiceWatchStatusResponse
	23, // 43: api.v1.ClusterService.Delete:output_type -> api.v1.ClusterServiceDeleteResponse
	24, // 44: api.v1.ClusterService.Update:output_type -> api.v1.ClusterServiceUpdateResponse
	22, // 45: api.v1.ClusterService.GetCredentials:output_type -> api.v1.ClusterServiceGetCredentialsResponse
	27, // 46: api.v1.ClusterService.Operate:output_type -> api.v1.ClusterServiceOperateResponse
	39, // [39:47] is the sub-list for method output_type
	31, // [31:39] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_api_v1_cluster_proto_init() }
func file_api_v1_cluster_proto_init() {
	if File_api_v1_cluster_proto != nil {
		return
	}
	file_api_v1_common_proto_init()
	file_api_v1_cluster_proto_msgTypes[0].OneofWrappers = []any{}
	file_api_v1_cluster_proto_msgTypes[2].OneofWrappers = []any{}
	file_api_v1_cluster_proto_msgTypes[6].OneofWrappers = []any{}
	file_api_v1_cluster_proto_msgTypes[9].OneofWrappers = []any{}
	file_api_v1_cluster_proto_msgTypes[12].OneofWrappers = []any{}
	file_api_v1_cluster_proto_msgTypes[14].OneofWrappers = []any{}
	file_api_v1_cluster_proto_msgTypes[16].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_cluster_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_cluster_proto_goTypes,
		DependencyIndexes: file_api_v1_cluster_proto_depIdxs,
		EnumInfos:         file_api_v1_cluster_proto_enumTypes,
		MessageInfos:      file_api_v1_cluster_proto_msgTypes,
	}.Build()
	File_api_v1_cluster_proto = out.File
	file_api_v1_cluster_proto_rawDesc = nil
	file_api_v1_cluster_proto_goTypes = nil
	file_api_v1_cluster_proto_depIdxs = nil
}
