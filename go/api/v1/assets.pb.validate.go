// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/assets.proto

package apiv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Asset with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Asset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Asset with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AssetMultiError, or nil if none found.
func (m *Asset) ValidateAll() error {
	return m.validate(true)
}

func (m *Asset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRegion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "Region",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "Region",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetValidationError{
				field:  "Region",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetMachineTypes()))
		i := 0
		for key := range m.GetMachineTypes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMachineTypes()[key]
			_ = val

			// no validation rules for MachineTypes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, AssetValidationError{
							field:  fmt.Sprintf("MachineTypes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, AssetValidationError{
							field:  fmt.Sprintf("MachineTypes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return AssetValidationError{
						field:  fmt.Sprintf("MachineTypes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetKubernetes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetValidationError{
						field:  fmt.Sprintf("Kubernetes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetValidationError{
						field:  fmt.Sprintf("Kubernetes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetValidationError{
					field:  fmt.Sprintf("Kubernetes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AssetMultiError(errors)
	}

	return nil
}

// AssetMultiError is an error wrapping multiple validation errors returned by
// Asset.ValidateAll() if the designated constraints aren't met.
type AssetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetMultiError) AllErrors() []error { return m }

// AssetValidationError is the validation error returned by Asset.Validate if
// the designated constraints aren't met.
type AssetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetValidationError) ErrorName() string { return "AssetValidationError" }

// Error satisfies the builtin error interface
func (e AssetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAsset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetValidationError{}

// Validate checks the field values on Region with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Region) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Region with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RegionMultiError, or nil if none found.
func (m *Region) ValidateAll() error {
	return m.validate(true)
}

func (m *Region) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Address

	// no validation rules for Active

	{
		sorted_keys := make([]string, len(m.GetPartitions()))
		i := 0
		for key := range m.GetPartitions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPartitions()[key]
			_ = val

			// no validation rules for Partitions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RegionValidationError{
							field:  fmt.Sprintf("Partitions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RegionValidationError{
							field:  fmt.Sprintf("Partitions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RegionValidationError{
						field:  fmt.Sprintf("Partitions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetDefaults()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegionValidationError{
					field:  "Defaults",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegionValidationError{
					field:  "Defaults",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefaults()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegionValidationError{
				field:  "Defaults",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegionMultiError(errors)
	}

	return nil
}

// RegionMultiError is an error wrapping multiple validation errors returned by
// Region.ValidateAll() if the designated constraints aren't met.
type RegionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegionMultiError) AllErrors() []error { return m }

// RegionValidationError is the validation error returned by Region.Validate if
// the designated constraints aren't met.
type RegionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegionValidationError) ErrorName() string { return "RegionValidationError" }

// Error satisfies the builtin error interface
func (e RegionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegionValidationError{}

// Validate checks the field values on Partition with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Partition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Partition with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PartitionMultiError, or nil
// if none found.
func (m *Partition) ValidateAll() error {
	return m.validate(true)
}

func (m *Partition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Address

	// no validation rules for Active

	if len(errors) > 0 {
		return PartitionMultiError(errors)
	}

	return nil
}

// PartitionMultiError is an error wrapping multiple validation errors returned
// by Partition.ValidateAll() if the designated constraints aren't met.
type PartitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartitionMultiError) AllErrors() []error { return m }

// PartitionValidationError is the validation error returned by
// Partition.Validate if the designated constraints aren't met.
type PartitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartitionValidationError) ErrorName() string { return "PartitionValidationError" }

// Error satisfies the builtin error interface
func (e PartitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartitionValidationError{}

// Validate checks the field values on MachineType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MachineType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MachineTypeMultiError, or
// nil if none found.
func (m *MachineType) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Cpus

	// no validation rules for Memory

	// no validation rules for Storage

	// no validation rules for CpuDescription

	// no validation rules for StorageDesription

	if len(errors) > 0 {
		return MachineTypeMultiError(errors)
	}

	return nil
}

// MachineTypeMultiError is an error wrapping multiple validation errors
// returned by MachineType.ValidateAll() if the designated constraints aren't met.
type MachineTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineTypeMultiError) AllErrors() []error { return m }

// MachineTypeValidationError is the validation error returned by
// MachineType.Validate if the designated constraints aren't met.
type MachineTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineTypeValidationError) ErrorName() string { return "MachineTypeValidationError" }

// Error satisfies the builtin error interface
func (e MachineTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineTypeValidationError{}

// Validate checks the field values on Kubernetes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Kubernetes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Kubernetes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KubernetesMultiError, or
// nil if none found.
func (m *Kubernetes) ValidateAll() error {
	return m.validate(true)
}

func (m *Kubernetes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if len(errors) > 0 {
		return KubernetesMultiError(errors)
	}

	return nil
}

// KubernetesMultiError is an error wrapping multiple validation errors
// returned by Kubernetes.ValidateAll() if the designated constraints aren't met.
type KubernetesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubernetesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubernetesMultiError) AllErrors() []error { return m }

// KubernetesValidationError is the validation error returned by
// Kubernetes.Validate if the designated constraints aren't met.
type KubernetesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubernetesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubernetesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubernetesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubernetesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubernetesValidationError) ErrorName() string { return "KubernetesValidationError" }

// Error satisfies the builtin error interface
func (e KubernetesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubernetes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubernetesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubernetesValidationError{}

// Validate checks the field values on AssetDefaults with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AssetDefaults) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetDefaults with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AssetDefaultsMultiError, or
// nil if none found.
func (m *AssetDefaults) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetDefaults) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MachineType

	// no validation rules for KubernetesVersion

	// no validation rules for WorkerMin

	// no validation rules for WorkerMax

	// no validation rules for Partition

	if len(errors) > 0 {
		return AssetDefaultsMultiError(errors)
	}

	return nil
}

// AssetDefaultsMultiError is an error wrapping multiple validation errors
// returned by AssetDefaults.ValidateAll() if the designated constraints
// aren't met.
type AssetDefaultsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetDefaultsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetDefaultsMultiError) AllErrors() []error { return m }

// AssetDefaultsValidationError is the validation error returned by
// AssetDefaults.Validate if the designated constraints aren't met.
type AssetDefaultsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetDefaultsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetDefaultsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetDefaultsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetDefaultsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetDefaultsValidationError) ErrorName() string { return "AssetDefaultsValidationError" }

// Error satisfies the builtin error interface
func (e AssetDefaultsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetDefaults.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetDefaultsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetDefaultsValidationError{}

// Validate checks the field values on AssetServiceListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssetServiceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetServiceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetServiceListRequestMultiError, or nil if none found.
func (m *AssetServiceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetServiceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AssetServiceListRequestMultiError(errors)
	}

	return nil
}

// AssetServiceListRequestMultiError is an error wrapping multiple validation
// errors returned by AssetServiceListRequest.ValidateAll() if the designated
// constraints aren't met.
type AssetServiceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetServiceListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetServiceListRequestMultiError) AllErrors() []error { return m }

// AssetServiceListRequestValidationError is the validation error returned by
// AssetServiceListRequest.Validate if the designated constraints aren't met.
type AssetServiceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetServiceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetServiceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetServiceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetServiceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetServiceListRequestValidationError) ErrorName() string {
	return "AssetServiceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssetServiceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetServiceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetServiceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetServiceListRequestValidationError{}

// Validate checks the field values on AssetServiceListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssetServiceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetServiceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetServiceListResponseMultiError, or nil if none found.
func (m *AssetServiceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetServiceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAssets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetServiceListResponseValidationError{
						field:  fmt.Sprintf("Assets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetServiceListResponseValidationError{
						field:  fmt.Sprintf("Assets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetServiceListResponseValidationError{
					field:  fmt.Sprintf("Assets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AssetServiceListResponseMultiError(errors)
	}

	return nil
}

// AssetServiceListResponseMultiError is an error wrapping multiple validation
// errors returned by AssetServiceListResponse.ValidateAll() if the designated
// constraints aren't met.
type AssetServiceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetServiceListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetServiceListResponseMultiError) AllErrors() []error { return m }

// AssetServiceListResponseValidationError is the validation error returned by
// AssetServiceListResponse.Validate if the designated constraints aren't met.
type AssetServiceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetServiceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetServiceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetServiceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetServiceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetServiceListResponseValidationError) ErrorName() string {
	return "AssetServiceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssetServiceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetServiceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetServiceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetServiceListResponseValidationError{}
