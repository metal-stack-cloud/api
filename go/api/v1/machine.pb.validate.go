// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/machine.proto

package apiv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _machine_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Machine with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Machine) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Machine with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MachineMultiError, or nil if none found.
func (m *Machine) ValidateAll() error {
	return m.validate(true)
}

func (m *Machine) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = MachineValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 12 {
		err := MachineValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 12 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetProject()); l < 2 || l > 128 {
		err := MachineValidationError{
			field:  "Project",
			reason: "value length must be between 2 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetAllocationUuid()); err != nil {
		err = MachineValidationError{
			field:  "AllocationUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Hostname

	// no validation rules for Role

	// no validation rules for Partition

	// no validation rules for Image

	// no validation rules for Size

	// no validation rules for Tags

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MachineValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MachineValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MachineValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MachineValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MachineValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MachineValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MachineValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MachineValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MachineValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MachineValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MachineValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MachineValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MachineMultiError(errors)
	}

	return nil
}

func (m *Machine) _validateUuid(uuid string) error {
	if matched := _machine_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// MachineMultiError is an error wrapping multiple validation errors returned
// by Machine.ValidateAll() if the designated constraints aren't met.
type MachineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineMultiError) AllErrors() []error { return m }

// MachineValidationError is the validation error returned by Machine.Validate
// if the designated constraints aren't met.
type MachineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineValidationError) ErrorName() string { return "MachineValidationError" }

// Error satisfies the builtin error interface
func (e MachineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachine.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineValidationError{}

// Validate checks the field values on MachineServiceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MachineServiceGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineServiceGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MachineServiceGetRequestMultiError, or nil if none found.
func (m *MachineServiceGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineServiceGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = MachineServiceGetRequestValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetProject()); l < 2 || l > 128 {
		err := MachineServiceGetRequestValidationError{
			field:  "Project",
			reason: "value length must be between 2 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MachineServiceGetRequestMultiError(errors)
	}

	return nil
}

func (m *MachineServiceGetRequest) _validateUuid(uuid string) error {
	if matched := _machine_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// MachineServiceGetRequestMultiError is an error wrapping multiple validation
// errors returned by MachineServiceGetRequest.ValidateAll() if the designated
// constraints aren't met.
type MachineServiceGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineServiceGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineServiceGetRequestMultiError) AllErrors() []error { return m }

// MachineServiceGetRequestValidationError is the validation error returned by
// MachineServiceGetRequest.Validate if the designated constraints aren't met.
type MachineServiceGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineServiceGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineServiceGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineServiceGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineServiceGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineServiceGetRequestValidationError) ErrorName() string {
	return "MachineServiceGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MachineServiceGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineServiceGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineServiceGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineServiceGetRequestValidationError{}

// Validate checks the field values on MachineServiceListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MachineServiceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineServiceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MachineServiceListRequestMultiError, or nil if none found.
func (m *MachineServiceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineServiceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetProject()); l < 2 || l > 128 {
		err := MachineServiceListRequestValidationError{
			field:  "Project",
			reason: "value length must be between 2 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MachineServiceListRequestMultiError(errors)
	}

	return nil
}

// MachineServiceListRequestMultiError is an error wrapping multiple validation
// errors returned by MachineServiceListRequest.ValidateAll() if the
// designated constraints aren't met.
type MachineServiceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineServiceListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineServiceListRequestMultiError) AllErrors() []error { return m }

// MachineServiceListRequestValidationError is the validation error returned by
// MachineServiceListRequest.Validate if the designated constraints aren't met.
type MachineServiceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineServiceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineServiceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineServiceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineServiceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineServiceListRequestValidationError) ErrorName() string {
	return "MachineServiceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MachineServiceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineServiceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineServiceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineServiceListRequestValidationError{}

// Validate checks the field values on MachineServiceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MachineServiceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineServiceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MachineServiceCreateRequestMultiError, or nil if none found.
func (m *MachineServiceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineServiceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 12 {
		err := MachineServiceCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 12 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateHostname(m.GetName()); err != nil {
		err = MachineServiceCreateRequestValidationError{
			field:  "Name",
			reason: "value must be a valid hostname",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetProject()); l < 2 || l > 128 {
		err := MachineServiceCreateRequestValidationError{
			field:  "Project",
			reason: "value length must be between 2 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Partition

	// no validation rules for Size

	// no validation rules for Image

	// no validation rules for UserData

	// no validation rules for Tags

	if len(errors) > 0 {
		return MachineServiceCreateRequestMultiError(errors)
	}

	return nil
}

func (m *MachineServiceCreateRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

// MachineServiceCreateRequestMultiError is an error wrapping multiple
// validation errors returned by MachineServiceCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type MachineServiceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineServiceCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineServiceCreateRequestMultiError) AllErrors() []error { return m }

// MachineServiceCreateRequestValidationError is the validation error returned
// by MachineServiceCreateRequest.Validate if the designated constraints
// aren't met.
type MachineServiceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineServiceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineServiceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineServiceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineServiceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineServiceCreateRequestValidationError) ErrorName() string {
	return "MachineServiceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MachineServiceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineServiceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineServiceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineServiceCreateRequestValidationError{}

// Validate checks the field values on MachineServiceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MachineServiceDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineServiceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MachineServiceDeleteRequestMultiError, or nil if none found.
func (m *MachineServiceDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineServiceDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = MachineServiceDeleteRequestValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetProject()); l < 2 || l > 128 {
		err := MachineServiceDeleteRequestValidationError{
			field:  "Project",
			reason: "value length must be between 2 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MachineServiceDeleteRequestMultiError(errors)
	}

	return nil
}

func (m *MachineServiceDeleteRequest) _validateUuid(uuid string) error {
	if matched := _machine_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// MachineServiceDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by MachineServiceDeleteRequest.ValidateAll() if
// the designated constraints aren't met.
type MachineServiceDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineServiceDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineServiceDeleteRequestMultiError) AllErrors() []error { return m }

// MachineServiceDeleteRequestValidationError is the validation error returned
// by MachineServiceDeleteRequest.Validate if the designated constraints
// aren't met.
type MachineServiceDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineServiceDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineServiceDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineServiceDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineServiceDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineServiceDeleteRequestValidationError) ErrorName() string {
	return "MachineServiceDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MachineServiceDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineServiceDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineServiceDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineServiceDeleteRequestValidationError{}

// Validate checks the field values on MachineStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MachineStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MachineStatusMultiError, or
// nil if none found.
func (m *MachineStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	// no validation rules for StateMessage

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MachineStatusValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MachineStatusValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MachineStatusValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MachineStatusMultiError(errors)
	}

	return nil
}

// MachineStatusMultiError is an error wrapping multiple validation errors
// returned by MachineStatus.ValidateAll() if the designated constraints
// aren't met.
type MachineStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineStatusMultiError) AllErrors() []error { return m }

// MachineStatusValidationError is the validation error returned by
// MachineStatus.Validate if the designated constraints aren't met.
type MachineStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineStatusValidationError) ErrorName() string { return "MachineStatusValidationError" }

// Error satisfies the builtin error interface
func (e MachineStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineStatusValidationError{}

// Validate checks the field values on MachineServiceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MachineServiceCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineServiceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MachineServiceCreateResponseMultiError, or nil if none found.
func (m *MachineServiceCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineServiceCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMachine()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MachineServiceCreateResponseValidationError{
					field:  "Machine",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MachineServiceCreateResponseValidationError{
					field:  "Machine",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMachine()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MachineServiceCreateResponseValidationError{
				field:  "Machine",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MachineServiceCreateResponseMultiError(errors)
	}

	return nil
}

// MachineServiceCreateResponseMultiError is an error wrapping multiple
// validation errors returned by MachineServiceCreateResponse.ValidateAll() if
// the designated constraints aren't met.
type MachineServiceCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineServiceCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineServiceCreateResponseMultiError) AllErrors() []error { return m }

// MachineServiceCreateResponseValidationError is the validation error returned
// by MachineServiceCreateResponse.Validate if the designated constraints
// aren't met.
type MachineServiceCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineServiceCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineServiceCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineServiceCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineServiceCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineServiceCreateResponseValidationError) ErrorName() string {
	return "MachineServiceCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MachineServiceCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineServiceCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineServiceCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineServiceCreateResponseValidationError{}

// Validate checks the field values on MachineServiceGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MachineServiceGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineServiceGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MachineServiceGetResponseMultiError, or nil if none found.
func (m *MachineServiceGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineServiceGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMachine()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MachineServiceGetResponseValidationError{
					field:  "Machine",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MachineServiceGetResponseValidationError{
					field:  "Machine",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMachine()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MachineServiceGetResponseValidationError{
				field:  "Machine",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MachineServiceGetResponseMultiError(errors)
	}

	return nil
}

// MachineServiceGetResponseMultiError is an error wrapping multiple validation
// errors returned by MachineServiceGetResponse.ValidateAll() if the
// designated constraints aren't met.
type MachineServiceGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineServiceGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineServiceGetResponseMultiError) AllErrors() []error { return m }

// MachineServiceGetResponseValidationError is the validation error returned by
// MachineServiceGetResponse.Validate if the designated constraints aren't met.
type MachineServiceGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineServiceGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineServiceGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineServiceGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineServiceGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineServiceGetResponseValidationError) ErrorName() string {
	return "MachineServiceGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MachineServiceGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineServiceGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineServiceGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineServiceGetResponseValidationError{}

// Validate checks the field values on MachineServiceDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MachineServiceDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineServiceDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MachineServiceDeleteResponseMultiError, or nil if none found.
func (m *MachineServiceDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineServiceDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMachine()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MachineServiceDeleteResponseValidationError{
					field:  "Machine",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MachineServiceDeleteResponseValidationError{
					field:  "Machine",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMachine()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MachineServiceDeleteResponseValidationError{
				field:  "Machine",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MachineServiceDeleteResponseMultiError(errors)
	}

	return nil
}

// MachineServiceDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by MachineServiceDeleteResponse.ValidateAll() if
// the designated constraints aren't met.
type MachineServiceDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineServiceDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineServiceDeleteResponseMultiError) AllErrors() []error { return m }

// MachineServiceDeleteResponseValidationError is the validation error returned
// by MachineServiceDeleteResponse.Validate if the designated constraints
// aren't met.
type MachineServiceDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineServiceDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineServiceDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineServiceDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineServiceDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineServiceDeleteResponseValidationError) ErrorName() string {
	return "MachineServiceDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MachineServiceDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineServiceDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineServiceDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineServiceDeleteResponseValidationError{}

// Validate checks the field values on MachineServiceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MachineServiceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MachineServiceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MachineServiceListResponseMultiError, or nil if none found.
func (m *MachineServiceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MachineServiceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMachines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MachineServiceListResponseValidationError{
						field:  fmt.Sprintf("Machines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MachineServiceListResponseValidationError{
						field:  fmt.Sprintf("Machines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MachineServiceListResponseValidationError{
					field:  fmt.Sprintf("Machines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MachineServiceListResponseMultiError(errors)
	}

	return nil
}

// MachineServiceListResponseMultiError is an error wrapping multiple
// validation errors returned by MachineServiceListResponse.ValidateAll() if
// the designated constraints aren't met.
type MachineServiceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MachineServiceListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MachineServiceListResponseMultiError) AllErrors() []error { return m }

// MachineServiceListResponseValidationError is the validation error returned
// by MachineServiceListResponse.Validate if the designated constraints aren't met.
type MachineServiceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MachineServiceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MachineServiceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MachineServiceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MachineServiceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MachineServiceListResponseValidationError) ErrorName() string {
	return "MachineServiceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MachineServiceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMachineServiceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MachineServiceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MachineServiceListResponseValidationError{}
