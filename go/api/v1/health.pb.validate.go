// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/health.proto

package apiv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Health with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Health) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Health with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HealthMultiError, or nil if none found.
func (m *Health) ValidateAll() error {
	return m.validate(true)
}

func (m *Health) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HealthValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HealthValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HealthValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HealthMultiError(errors)
	}

	return nil
}

// HealthMultiError is an error wrapping multiple validation errors returned by
// Health.ValidateAll() if the designated constraints aren't met.
type HealthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthMultiError) AllErrors() []error { return m }

// HealthValidationError is the validation error returned by Health.Validate if
// the designated constraints aren't met.
type HealthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthValidationError) ErrorName() string { return "HealthValidationError" }

// Error satisfies the builtin error interface
func (e HealthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthValidationError{}

// Validate checks the field values on HealthStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HealthStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HealthStatusMultiError, or
// nil if none found.
func (m *HealthStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for Message

	{
		sorted_keys := make([]string, len(m.GetPartitions()))
		i := 0
		for key := range m.GetPartitions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPartitions()[key]
			_ = val

			// no validation rules for Partitions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, HealthStatusValidationError{
							field:  fmt.Sprintf("Partitions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, HealthStatusValidationError{
							field:  fmt.Sprintf("Partitions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return HealthStatusValidationError{
						field:  fmt.Sprintf("Partitions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return HealthStatusMultiError(errors)
	}

	return nil
}

// HealthStatusMultiError is an error wrapping multiple validation errors
// returned by HealthStatus.ValidateAll() if the designated constraints aren't met.
type HealthStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthStatusMultiError) AllErrors() []error { return m }

// HealthStatusValidationError is the validation error returned by
// HealthStatus.Validate if the designated constraints aren't met.
type HealthStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthStatusValidationError) ErrorName() string { return "HealthStatusValidationError" }

// Error satisfies the builtin error interface
func (e HealthStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthStatusValidationError{}

// Validate checks the field values on PartitionHealth with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PartitionHealth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartitionHealth with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartitionHealthMultiError, or nil if none found.
func (m *PartitionHealth) ValidateAll() error {
	return m.validate(true)
}

func (m *PartitionHealth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if len(errors) > 0 {
		return PartitionHealthMultiError(errors)
	}

	return nil
}

// PartitionHealthMultiError is an error wrapping multiple validation errors
// returned by PartitionHealth.ValidateAll() if the designated constraints
// aren't met.
type PartitionHealthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartitionHealthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartitionHealthMultiError) AllErrors() []error { return m }

// PartitionHealthValidationError is the validation error returned by
// PartitionHealth.Validate if the designated constraints aren't met.
type PartitionHealthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartitionHealthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartitionHealthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartitionHealthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartitionHealthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartitionHealthValidationError) ErrorName() string { return "PartitionHealthValidationError" }

// Error satisfies the builtin error interface
func (e PartitionHealthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartitionHealth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartitionHealthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartitionHealthValidationError{}

// Validate checks the field values on HealthServiceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HealthServiceGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthServiceGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HealthServiceGetRequestMultiError, or nil if none found.
func (m *HealthServiceGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthServiceGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HealthServiceGetRequestMultiError(errors)
	}

	return nil
}

// HealthServiceGetRequestMultiError is an error wrapping multiple validation
// errors returned by HealthServiceGetRequest.ValidateAll() if the designated
// constraints aren't met.
type HealthServiceGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthServiceGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthServiceGetRequestMultiError) AllErrors() []error { return m }

// HealthServiceGetRequestValidationError is the validation error returned by
// HealthServiceGetRequest.Validate if the designated constraints aren't met.
type HealthServiceGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthServiceGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthServiceGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthServiceGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthServiceGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthServiceGetRequestValidationError) ErrorName() string {
	return "HealthServiceGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HealthServiceGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthServiceGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthServiceGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthServiceGetRequestValidationError{}

// Validate checks the field values on HealthServiceGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HealthServiceGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthServiceGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HealthServiceGetResponseMultiError, or nil if none found.
func (m *HealthServiceGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthServiceGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHealth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HealthServiceGetResponseValidationError{
					field:  "Health",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HealthServiceGetResponseValidationError{
					field:  "Health",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HealthServiceGetResponseValidationError{
				field:  "Health",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HealthServiceGetResponseMultiError(errors)
	}

	return nil
}

// HealthServiceGetResponseMultiError is an error wrapping multiple validation
// errors returned by HealthServiceGetResponse.ValidateAll() if the designated
// constraints aren't met.
type HealthServiceGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthServiceGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthServiceGetResponseMultiError) AllErrors() []error { return m }

// HealthServiceGetResponseValidationError is the validation error returned by
// HealthServiceGetResponse.Validate if the designated constraints aren't met.
type HealthServiceGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthServiceGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthServiceGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthServiceGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthServiceGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthServiceGetResponseValidationError) ErrorName() string {
	return "HealthServiceGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HealthServiceGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthServiceGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthServiceGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthServiceGetResponseValidationError{}
