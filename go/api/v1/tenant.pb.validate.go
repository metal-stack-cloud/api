// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/tenant.proto

package apiv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Tenant with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tenant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tenant with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TenantMultiError, or nil if none found.
func (m *Tenant) ValidateAll() error {
	return m.validate(true)
}

func (m *Tenant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for AvatarUrl

	// no validation rules for OauthProvider

	if all {
		switch v := interface{}(m.GetPaymentDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "PaymentDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "PaymentDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantValidationError{
				field:  "PaymentDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Admitted

	// no validation rules for PhoneNumber

	if all {
		switch v := interface{}(m.GetTermsAndConditions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "TermsAndConditions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "TermsAndConditions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTermsAndConditions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantValidationError{
				field:  "TermsAndConditions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EmailConsent

	// no validation rules for Onboarded

	for idx, item := range m.GetTenantMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TenantValidationError{
						field:  fmt.Sprintf("TenantMembers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TenantValidationError{
						field:  fmt.Sprintf("TenantMembers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TenantValidationError{
					field:  fmt.Sprintf("TenantMembers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantMultiError(errors)
	}

	return nil
}

// TenantMultiError is an error wrapping multiple validation errors returned by
// Tenant.ValidateAll() if the designated constraints aren't met.
type TenantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantMultiError) AllErrors() []error { return m }

// TenantValidationError is the validation error returned by Tenant.Validate if
// the designated constraints aren't met.
type TenantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantValidationError) ErrorName() string { return "TenantValidationError" }

// Error satisfies the builtin error interface
func (e TenantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantValidationError{}

// Validate checks the field values on TenantMember with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TenantMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantMember with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TenantMemberMultiError, or
// nil if none found.
func (m *TenantMember) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Role

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantMemberValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantMemberValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantMemberValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantMemberMultiError(errors)
	}

	return nil
}

// TenantMemberMultiError is an error wrapping multiple validation errors
// returned by TenantMember.ValidateAll() if the designated constraints aren't met.
type TenantMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantMemberMultiError) AllErrors() []error { return m }

// TenantMemberValidationError is the validation error returned by
// TenantMember.Validate if the designated constraints aren't met.
type TenantMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantMemberValidationError) ErrorName() string { return "TenantMemberValidationError" }

// Error satisfies the builtin error interface
func (e TenantMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantMemberValidationError{}

// Validate checks the field values on TenantInvite with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TenantInvite) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantInvite with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TenantInviteMultiError, or
// nil if none found.
func (m *TenantInvite) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantInvite) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Secret

	// no validation rules for TargetTenant

	// no validation rules for Role

	// no validation rules for Joined

	// no validation rules for TargetTenantName

	// no validation rules for Tenant

	// no validation rules for TenantName

	if all {
		switch v := interface{}(m.GetExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantInviteValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantInviteValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantInviteValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetJoinedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantInviteValidationError{
					field:  "JoinedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantInviteValidationError{
					field:  "JoinedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJoinedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantInviteValidationError{
				field:  "JoinedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantInviteMultiError(errors)
	}

	return nil
}

// TenantInviteMultiError is an error wrapping multiple validation errors
// returned by TenantInvite.ValidateAll() if the designated constraints aren't met.
type TenantInviteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantInviteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantInviteMultiError) AllErrors() []error { return m }

// TenantInviteValidationError is the validation error returned by
// TenantInvite.Validate if the designated constraints aren't met.
type TenantInviteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantInviteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantInviteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantInviteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantInviteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantInviteValidationError) ErrorName() string { return "TenantInviteValidationError" }

// Error satisfies the builtin error interface
func (e TenantInviteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantInvite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantInviteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantInviteValidationError{}

// Validate checks the field values on PaymentDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentDetails with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaymentDetailsMultiError,
// or nil if none found.
func (m *PaymentDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CustomerId

	// no validation rules for SubscriptionId

	for idx, item := range m.GetCoupons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PaymentDetailsValidationError{
						field:  fmt.Sprintf("Coupons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PaymentDetailsValidationError{
						field:  fmt.Sprintf("Coupons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PaymentDetailsValidationError{
					field:  fmt.Sprintf("Coupons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Vat

	if m.PaymentMethodId != nil {
		// no validation rules for PaymentMethodId
	}

	if len(errors) > 0 {
		return PaymentDetailsMultiError(errors)
	}

	return nil
}

// PaymentDetailsMultiError is an error wrapping multiple validation errors
// returned by PaymentDetails.ValidateAll() if the designated constraints
// aren't met.
type PaymentDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentDetailsMultiError) AllErrors() []error { return m }

// PaymentDetailsValidationError is the validation error returned by
// PaymentDetails.Validate if the designated constraints aren't met.
type PaymentDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentDetailsValidationError) ErrorName() string { return "PaymentDetailsValidationError" }

// Error satisfies the builtin error interface
func (e PaymentDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentDetailsValidationError{}

// Validate checks the field values on PaymentDetailsUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaymentDetailsUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentDetailsUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentDetailsUpdateMultiError, or nil if none found.
func (m *PaymentDetailsUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentDetailsUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.CustomerId != nil {
		// no validation rules for CustomerId
	}

	if m.PaymentMethodId != nil {
		// no validation rules for PaymentMethodId
	}

	if m.SubscriptionId != nil {
		// no validation rules for SubscriptionId
	}

	if m.Vat != nil {
		// no validation rules for Vat
	}

	if len(errors) > 0 {
		return PaymentDetailsUpdateMultiError(errors)
	}

	return nil
}

// PaymentDetailsUpdateMultiError is an error wrapping multiple validation
// errors returned by PaymentDetailsUpdate.ValidateAll() if the designated
// constraints aren't met.
type PaymentDetailsUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentDetailsUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentDetailsUpdateMultiError) AllErrors() []error { return m }

// PaymentDetailsUpdateValidationError is the validation error returned by
// PaymentDetailsUpdate.Validate if the designated constraints aren't met.
type PaymentDetailsUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentDetailsUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentDetailsUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentDetailsUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentDetailsUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentDetailsUpdateValidationError) ErrorName() string {
	return "PaymentDetailsUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentDetailsUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentDetailsUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentDetailsUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentDetailsUpdateValidationError{}

// Validate checks the field values on TermsAndConditions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TermsAndConditions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TermsAndConditions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TermsAndConditionsMultiError, or nil if none found.
func (m *TermsAndConditions) ValidateAll() error {
	return m.validate(true)
}

func (m *TermsAndConditions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Accepted

	if all {
		switch v := interface{}(m.GetWhen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TermsAndConditionsValidationError{
					field:  "When",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TermsAndConditionsValidationError{
					field:  "When",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWhen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TermsAndConditionsValidationError{
				field:  "When",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TermsAndConditionsMultiError(errors)
	}

	return nil
}

// TermsAndConditionsMultiError is an error wrapping multiple validation errors
// returned by TermsAndConditions.ValidateAll() if the designated constraints
// aren't met.
type TermsAndConditionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TermsAndConditionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TermsAndConditionsMultiError) AllErrors() []error { return m }

// TermsAndConditionsValidationError is the validation error returned by
// TermsAndConditions.Validate if the designated constraints aren't met.
type TermsAndConditionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TermsAndConditionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TermsAndConditionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TermsAndConditionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TermsAndConditionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TermsAndConditionsValidationError) ErrorName() string {
	return "TermsAndConditionsValidationError"
}

// Error satisfies the builtin error interface
func (e TermsAndConditionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTermsAndConditions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TermsAndConditionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TermsAndConditionsValidationError{}

// Validate checks the field values on TermsAndConditionsUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TermsAndConditionsUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TermsAndConditionsUpdate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TermsAndConditionsUpdateMultiError, or nil if none found.
func (m *TermsAndConditionsUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *TermsAndConditionsUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Accepted != nil {
		// no validation rules for Accepted
	}

	if m.When != nil {

		if all {
			switch v := interface{}(m.GetWhen()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TermsAndConditionsUpdateValidationError{
						field:  "When",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TermsAndConditionsUpdateValidationError{
						field:  "When",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWhen()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TermsAndConditionsUpdateValidationError{
					field:  "When",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TermsAndConditionsUpdateMultiError(errors)
	}

	return nil
}

// TermsAndConditionsUpdateMultiError is an error wrapping multiple validation
// errors returned by TermsAndConditionsUpdate.ValidateAll() if the designated
// constraints aren't met.
type TermsAndConditionsUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TermsAndConditionsUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TermsAndConditionsUpdateMultiError) AllErrors() []error { return m }

// TermsAndConditionsUpdateValidationError is the validation error returned by
// TermsAndConditionsUpdate.Validate if the designated constraints aren't met.
type TermsAndConditionsUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TermsAndConditionsUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TermsAndConditionsUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TermsAndConditionsUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TermsAndConditionsUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TermsAndConditionsUpdateValidationError) ErrorName() string {
	return "TermsAndConditionsUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e TermsAndConditionsUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTermsAndConditionsUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TermsAndConditionsUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TermsAndConditionsUpdateValidationError{}

// Validate checks the field values on TenantServiceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantServiceGetRequestMultiError, or nil if none found.
func (m *TenantServiceGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	if len(errors) > 0 {
		return TenantServiceGetRequestMultiError(errors)
	}

	return nil
}

// TenantServiceGetRequestMultiError is an error wrapping multiple validation
// errors returned by TenantServiceGetRequest.ValidateAll() if the designated
// constraints aren't met.
type TenantServiceGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceGetRequestMultiError) AllErrors() []error { return m }

// TenantServiceGetRequestValidationError is the validation error returned by
// TenantServiceGetRequest.Validate if the designated constraints aren't met.
type TenantServiceGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceGetRequestValidationError) ErrorName() string {
	return "TenantServiceGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceGetRequestValidationError{}

// Validate checks the field values on TenantServiceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantServiceCreateRequestMultiError, or nil if none found.
func (m *TenantServiceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for AvatarUrl

	// no validation rules for PhoneNumber

	if len(errors) > 0 {
		return TenantServiceCreateRequestMultiError(errors)
	}

	return nil
}

// TenantServiceCreateRequestMultiError is an error wrapping multiple
// validation errors returned by TenantServiceCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type TenantServiceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceCreateRequestMultiError) AllErrors() []error { return m }

// TenantServiceCreateRequestValidationError is the validation error returned
// by TenantServiceCreateRequest.Validate if the designated constraints aren't met.
type TenantServiceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceCreateRequestValidationError) ErrorName() string {
	return "TenantServiceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceCreateRequestValidationError{}

// Validate checks the field values on TenantServiceCreateOrUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TenantServiceCreateOrUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceCreateOrUpdateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TenantServiceCreateOrUpdateRequestMultiError, or nil if none found.
func (m *TenantServiceCreateOrUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceCreateOrUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantServiceCreateOrUpdateRequestValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantServiceCreateOrUpdateRequestValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantServiceCreateOrUpdateRequestValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantServiceCreateOrUpdateRequestMultiError(errors)
	}

	return nil
}

// TenantServiceCreateOrUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by
// TenantServiceCreateOrUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type TenantServiceCreateOrUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceCreateOrUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceCreateOrUpdateRequestMultiError) AllErrors() []error { return m }

// TenantServiceCreateOrUpdateRequestValidationError is the validation error
// returned by TenantServiceCreateOrUpdateRequest.Validate if the designated
// constraints aren't met.
type TenantServiceCreateOrUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceCreateOrUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceCreateOrUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceCreateOrUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceCreateOrUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceCreateOrUpdateRequestValidationError) ErrorName() string {
	return "TenantServiceCreateOrUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceCreateOrUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceCreateOrUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceCreateOrUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceCreateOrUpdateRequestValidationError{}

// Validate checks the field values on TenantServiceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantServiceUpdateRequestMultiError, or nil if none found.
func (m *TenantServiceUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.AvatarUrl != nil {
		// no validation rules for AvatarUrl
	}

	if m.PaymentDetails != nil {

		if all {
			switch v := interface{}(m.GetPaymentDetails()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TenantServiceUpdateRequestValidationError{
						field:  "PaymentDetails",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TenantServiceUpdateRequestValidationError{
						field:  "PaymentDetails",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPaymentDetails()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TenantServiceUpdateRequestValidationError{
					field:  "PaymentDetails",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.TermsAndConditions != nil {

		if all {
			switch v := interface{}(m.GetTermsAndConditions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TenantServiceUpdateRequestValidationError{
						field:  "TermsAndConditions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TenantServiceUpdateRequestValidationError{
						field:  "TermsAndConditions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTermsAndConditions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TenantServiceUpdateRequestValidationError{
					field:  "TermsAndConditions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Onboarded != nil {
		// no validation rules for Onboarded
	}

	if len(errors) > 0 {
		return TenantServiceUpdateRequestMultiError(errors)
	}

	return nil
}

// TenantServiceUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by TenantServiceUpdateRequest.ValidateAll() if
// the designated constraints aren't met.
type TenantServiceUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceUpdateRequestMultiError) AllErrors() []error { return m }

// TenantServiceUpdateRequestValidationError is the validation error returned
// by TenantServiceUpdateRequest.Validate if the designated constraints aren't met.
type TenantServiceUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceUpdateRequestValidationError) ErrorName() string {
	return "TenantServiceUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceUpdateRequestValidationError{}

// Validate checks the field values on TenantServiceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantServiceDeleteRequestMultiError, or nil if none found.
func (m *TenantServiceDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	if len(errors) > 0 {
		return TenantServiceDeleteRequestMultiError(errors)
	}

	return nil
}

// TenantServiceDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by TenantServiceDeleteRequest.ValidateAll() if
// the designated constraints aren't met.
type TenantServiceDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceDeleteRequestMultiError) AllErrors() []error { return m }

// TenantServiceDeleteRequestValidationError is the validation error returned
// by TenantServiceDeleteRequest.Validate if the designated constraints aren't met.
type TenantServiceDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceDeleteRequestValidationError) ErrorName() string {
	return "TenantServiceDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceDeleteRequestValidationError{}

// Validate checks the field values on TenantServiceGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantServiceGetResponseMultiError, or nil if none found.
func (m *TenantServiceGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantServiceGetResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantServiceGetResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantServiceGetResponseValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantServiceGetResponseMultiError(errors)
	}

	return nil
}

// TenantServiceGetResponseMultiError is an error wrapping multiple validation
// errors returned by TenantServiceGetResponse.ValidateAll() if the designated
// constraints aren't met.
type TenantServiceGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceGetResponseMultiError) AllErrors() []error { return m }

// TenantServiceGetResponseValidationError is the validation error returned by
// TenantServiceGetResponse.Validate if the designated constraints aren't met.
type TenantServiceGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceGetResponseValidationError) ErrorName() string {
	return "TenantServiceGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceGetResponseValidationError{}

// Validate checks the field values on TenantServiceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantServiceCreateResponseMultiError, or nil if none found.
func (m *TenantServiceCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantServiceCreateResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantServiceCreateResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantServiceCreateResponseValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantServiceCreateResponseMultiError(errors)
	}

	return nil
}

// TenantServiceCreateResponseMultiError is an error wrapping multiple
// validation errors returned by TenantServiceCreateResponse.ValidateAll() if
// the designated constraints aren't met.
type TenantServiceCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceCreateResponseMultiError) AllErrors() []error { return m }

// TenantServiceCreateResponseValidationError is the validation error returned
// by TenantServiceCreateResponse.Validate if the designated constraints
// aren't met.
type TenantServiceCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceCreateResponseValidationError) ErrorName() string {
	return "TenantServiceCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceCreateResponseValidationError{}

// Validate checks the field values on TenantServiceCreateOrUpdateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TenantServiceCreateOrUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceCreateOrUpdateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TenantServiceCreateOrUpdateResponseMultiError, or nil if none found.
func (m *TenantServiceCreateOrUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceCreateOrUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantServiceCreateOrUpdateResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantServiceCreateOrUpdateResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantServiceCreateOrUpdateResponseValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantServiceCreateOrUpdateResponseMultiError(errors)
	}

	return nil
}

// TenantServiceCreateOrUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by
// TenantServiceCreateOrUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type TenantServiceCreateOrUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceCreateOrUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceCreateOrUpdateResponseMultiError) AllErrors() []error { return m }

// TenantServiceCreateOrUpdateResponseValidationError is the validation error
// returned by TenantServiceCreateOrUpdateResponse.Validate if the designated
// constraints aren't met.
type TenantServiceCreateOrUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceCreateOrUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceCreateOrUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceCreateOrUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceCreateOrUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceCreateOrUpdateResponseValidationError) ErrorName() string {
	return "TenantServiceCreateOrUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceCreateOrUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceCreateOrUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceCreateOrUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceCreateOrUpdateResponseValidationError{}

// Validate checks the field values on TenantServiceUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantServiceUpdateResponseMultiError, or nil if none found.
func (m *TenantServiceUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantServiceUpdateResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantServiceUpdateResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantServiceUpdateResponseValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantServiceUpdateResponseMultiError(errors)
	}

	return nil
}

// TenantServiceUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by TenantServiceUpdateResponse.ValidateAll() if
// the designated constraints aren't met.
type TenantServiceUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceUpdateResponseMultiError) AllErrors() []error { return m }

// TenantServiceUpdateResponseValidationError is the validation error returned
// by TenantServiceUpdateResponse.Validate if the designated constraints
// aren't met.
type TenantServiceUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceUpdateResponseValidationError) ErrorName() string {
	return "TenantServiceUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceUpdateResponseValidationError{}

// Validate checks the field values on TenantServiceDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantServiceDeleteResponseMultiError, or nil if none found.
func (m *TenantServiceDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantServiceDeleteResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantServiceDeleteResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantServiceDeleteResponseValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantServiceDeleteResponseMultiError(errors)
	}

	return nil
}

// TenantServiceDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by TenantServiceDeleteResponse.ValidateAll() if
// the designated constraints aren't met.
type TenantServiceDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceDeleteResponseMultiError) AllErrors() []error { return m }

// TenantServiceDeleteResponseValidationError is the validation error returned
// by TenantServiceDeleteResponse.Validate if the designated constraints
// aren't met.
type TenantServiceDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceDeleteResponseValidationError) ErrorName() string {
	return "TenantServiceDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceDeleteResponseValidationError{}

// Validate checks the field values on TenantServiceInviteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceInviteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceInviteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantServiceInviteRequestMultiError, or nil if none found.
func (m *TenantServiceInviteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceInviteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	// no validation rules for Role

	if len(errors) > 0 {
		return TenantServiceInviteRequestMultiError(errors)
	}

	return nil
}

// TenantServiceInviteRequestMultiError is an error wrapping multiple
// validation errors returned by TenantServiceInviteRequest.ValidateAll() if
// the designated constraints aren't met.
type TenantServiceInviteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceInviteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceInviteRequestMultiError) AllErrors() []error { return m }

// TenantServiceInviteRequestValidationError is the validation error returned
// by TenantServiceInviteRequest.Validate if the designated constraints aren't met.
type TenantServiceInviteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceInviteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceInviteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceInviteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceInviteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceInviteRequestValidationError) ErrorName() string {
	return "TenantServiceInviteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceInviteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceInviteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceInviteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceInviteRequestValidationError{}

// Validate checks the field values on TenantServiceInviteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceInviteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceInviteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantServiceInviteResponseMultiError, or nil if none found.
func (m *TenantServiceInviteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceInviteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInvite()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantServiceInviteResponseValidationError{
					field:  "Invite",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantServiceInviteResponseValidationError{
					field:  "Invite",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInvite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantServiceInviteResponseValidationError{
				field:  "Invite",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantServiceInviteResponseMultiError(errors)
	}

	return nil
}

// TenantServiceInviteResponseMultiError is an error wrapping multiple
// validation errors returned by TenantServiceInviteResponse.ValidateAll() if
// the designated constraints aren't met.
type TenantServiceInviteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceInviteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceInviteResponseMultiError) AllErrors() []error { return m }

// TenantServiceInviteResponseValidationError is the validation error returned
// by TenantServiceInviteResponse.Validate if the designated constraints
// aren't met.
type TenantServiceInviteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceInviteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceInviteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceInviteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceInviteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceInviteResponseValidationError) ErrorName() string {
	return "TenantServiceInviteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceInviteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceInviteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceInviteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceInviteResponseValidationError{}

// Validate checks the field values on TenantServiceInvitesListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceInvitesListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceInvitesListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TenantServiceInvitesListRequestMultiError, or nil if none found.
func (m *TenantServiceInvitesListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceInvitesListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	if len(errors) > 0 {
		return TenantServiceInvitesListRequestMultiError(errors)
	}

	return nil
}

// TenantServiceInvitesListRequestMultiError is an error wrapping multiple
// validation errors returned by TenantServiceInvitesListRequest.ValidateAll()
// if the designated constraints aren't met.
type TenantServiceInvitesListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceInvitesListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceInvitesListRequestMultiError) AllErrors() []error { return m }

// TenantServiceInvitesListRequestValidationError is the validation error
// returned by TenantServiceInvitesListRequest.Validate if the designated
// constraints aren't met.
type TenantServiceInvitesListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceInvitesListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceInvitesListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceInvitesListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceInvitesListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceInvitesListRequestValidationError) ErrorName() string {
	return "TenantServiceInvitesListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceInvitesListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceInvitesListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceInvitesListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceInvitesListRequestValidationError{}

// Validate checks the field values on TenantServiceInvitesListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TenantServiceInvitesListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceInvitesListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TenantServiceInvitesListResponseMultiError, or nil if none found.
func (m *TenantServiceInvitesListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceInvitesListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInvites() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TenantServiceInvitesListResponseValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TenantServiceInvitesListResponseValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TenantServiceInvitesListResponseValidationError{
					field:  fmt.Sprintf("Invites[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TenantServiceInvitesListResponseMultiError(errors)
	}

	return nil
}

// TenantServiceInvitesListResponseMultiError is an error wrapping multiple
// validation errors returned by
// TenantServiceInvitesListResponse.ValidateAll() if the designated
// constraints aren't met.
type TenantServiceInvitesListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceInvitesListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceInvitesListResponseMultiError) AllErrors() []error { return m }

// TenantServiceInvitesListResponseValidationError is the validation error
// returned by TenantServiceInvitesListResponse.Validate if the designated
// constraints aren't met.
type TenantServiceInvitesListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceInvitesListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceInvitesListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceInvitesListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceInvitesListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceInvitesListResponseValidationError) ErrorName() string {
	return "TenantServiceInvitesListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceInvitesListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceInvitesListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceInvitesListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceInvitesListResponseValidationError{}

// Validate checks the field values on TenantServiceInviteGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceInviteGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceInviteGetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TenantServiceInviteGetRequestMultiError, or nil if none found.
func (m *TenantServiceInviteGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceInviteGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Secret

	if len(errors) > 0 {
		return TenantServiceInviteGetRequestMultiError(errors)
	}

	return nil
}

// TenantServiceInviteGetRequestMultiError is an error wrapping multiple
// validation errors returned by TenantServiceInviteGetRequest.ValidateAll()
// if the designated constraints aren't met.
type TenantServiceInviteGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceInviteGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceInviteGetRequestMultiError) AllErrors() []error { return m }

// TenantServiceInviteGetRequestValidationError is the validation error
// returned by TenantServiceInviteGetRequest.Validate if the designated
// constraints aren't met.
type TenantServiceInviteGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceInviteGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceInviteGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceInviteGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceInviteGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceInviteGetRequestValidationError) ErrorName() string {
	return "TenantServiceInviteGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceInviteGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceInviteGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceInviteGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceInviteGetRequestValidationError{}

// Validate checks the field values on TenantServiceInviteGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceInviteGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceInviteGetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TenantServiceInviteGetResponseMultiError, or nil if none found.
func (m *TenantServiceInviteGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceInviteGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInvite()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantServiceInviteGetResponseValidationError{
					field:  "Invite",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantServiceInviteGetResponseValidationError{
					field:  "Invite",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInvite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantServiceInviteGetResponseValidationError{
				field:  "Invite",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantServiceInviteGetResponseMultiError(errors)
	}

	return nil
}

// TenantServiceInviteGetResponseMultiError is an error wrapping multiple
// validation errors returned by TenantServiceInviteGetResponse.ValidateAll()
// if the designated constraints aren't met.
type TenantServiceInviteGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceInviteGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceInviteGetResponseMultiError) AllErrors() []error { return m }

// TenantServiceInviteGetResponseValidationError is the validation error
// returned by TenantServiceInviteGetResponse.Validate if the designated
// constraints aren't met.
type TenantServiceInviteGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceInviteGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceInviteGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceInviteGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceInviteGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceInviteGetResponseValidationError) ErrorName() string {
	return "TenantServiceInviteGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceInviteGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceInviteGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceInviteGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceInviteGetResponseValidationError{}

// Validate checks the field values on TenantServiceRemoveMemberRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TenantServiceRemoveMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceRemoveMemberRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TenantServiceRemoveMemberRequestMultiError, or nil if none found.
func (m *TenantServiceRemoveMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceRemoveMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	// no validation rules for MemberId

	if len(errors) > 0 {
		return TenantServiceRemoveMemberRequestMultiError(errors)
	}

	return nil
}

// TenantServiceRemoveMemberRequestMultiError is an error wrapping multiple
// validation errors returned by
// TenantServiceRemoveMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type TenantServiceRemoveMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceRemoveMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceRemoveMemberRequestMultiError) AllErrors() []error { return m }

// TenantServiceRemoveMemberRequestValidationError is the validation error
// returned by TenantServiceRemoveMemberRequest.Validate if the designated
// constraints aren't met.
type TenantServiceRemoveMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceRemoveMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceRemoveMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceRemoveMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceRemoveMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceRemoveMemberRequestValidationError) ErrorName() string {
	return "TenantServiceRemoveMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceRemoveMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceRemoveMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceRemoveMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceRemoveMemberRequestValidationError{}

// Validate checks the field values on TenantServiceRemoveMemberResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TenantServiceRemoveMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceRemoveMemberResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TenantServiceRemoveMemberResponseMultiError, or nil if none found.
func (m *TenantServiceRemoveMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceRemoveMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TenantServiceRemoveMemberResponseMultiError(errors)
	}

	return nil
}

// TenantServiceRemoveMemberResponseMultiError is an error wrapping multiple
// validation errors returned by
// TenantServiceRemoveMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type TenantServiceRemoveMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceRemoveMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceRemoveMemberResponseMultiError) AllErrors() []error { return m }

// TenantServiceRemoveMemberResponseValidationError is the validation error
// returned by TenantServiceRemoveMemberResponse.Validate if the designated
// constraints aren't met.
type TenantServiceRemoveMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceRemoveMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceRemoveMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceRemoveMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceRemoveMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceRemoveMemberResponseValidationError) ErrorName() string {
	return "TenantServiceRemoveMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceRemoveMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceRemoveMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceRemoveMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceRemoveMemberResponseValidationError{}

// Validate checks the field values on TenantServiceInviteAcceptRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TenantServiceInviteAcceptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceInviteAcceptRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TenantServiceInviteAcceptRequestMultiError, or nil if none found.
func (m *TenantServiceInviteAcceptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceInviteAcceptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Secret

	if len(errors) > 0 {
		return TenantServiceInviteAcceptRequestMultiError(errors)
	}

	return nil
}

// TenantServiceInviteAcceptRequestMultiError is an error wrapping multiple
// validation errors returned by
// TenantServiceInviteAcceptRequest.ValidateAll() if the designated
// constraints aren't met.
type TenantServiceInviteAcceptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceInviteAcceptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceInviteAcceptRequestMultiError) AllErrors() []error { return m }

// TenantServiceInviteAcceptRequestValidationError is the validation error
// returned by TenantServiceInviteAcceptRequest.Validate if the designated
// constraints aren't met.
type TenantServiceInviteAcceptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceInviteAcceptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceInviteAcceptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceInviteAcceptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceInviteAcceptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceInviteAcceptRequestValidationError) ErrorName() string {
	return "TenantServiceInviteAcceptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceInviteAcceptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceInviteAcceptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceInviteAcceptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceInviteAcceptRequestValidationError{}

// Validate checks the field values on TenantServiceInviteAcceptResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TenantServiceInviteAcceptResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceInviteAcceptResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TenantServiceInviteAcceptResponseMultiError, or nil if none found.
func (m *TenantServiceInviteAcceptResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceInviteAcceptResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tenant

	// no validation rules for TenantName

	if len(errors) > 0 {
		return TenantServiceInviteAcceptResponseMultiError(errors)
	}

	return nil
}

// TenantServiceInviteAcceptResponseMultiError is an error wrapping multiple
// validation errors returned by
// TenantServiceInviteAcceptResponse.ValidateAll() if the designated
// constraints aren't met.
type TenantServiceInviteAcceptResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceInviteAcceptResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceInviteAcceptResponseMultiError) AllErrors() []error { return m }

// TenantServiceInviteAcceptResponseValidationError is the validation error
// returned by TenantServiceInviteAcceptResponse.Validate if the designated
// constraints aren't met.
type TenantServiceInviteAcceptResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceInviteAcceptResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceInviteAcceptResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceInviteAcceptResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceInviteAcceptResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceInviteAcceptResponseValidationError) ErrorName() string {
	return "TenantServiceInviteAcceptResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceInviteAcceptResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceInviteAcceptResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceInviteAcceptResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceInviteAcceptResponseValidationError{}

// Validate checks the field values on TenantServiceInviteDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TenantServiceInviteDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceInviteDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TenantServiceInviteDeleteRequestMultiError, or nil if none found.
func (m *TenantServiceInviteDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceInviteDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	// no validation rules for Secret

	if len(errors) > 0 {
		return TenantServiceInviteDeleteRequestMultiError(errors)
	}

	return nil
}

// TenantServiceInviteDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by
// TenantServiceInviteDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type TenantServiceInviteDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceInviteDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceInviteDeleteRequestMultiError) AllErrors() []error { return m }

// TenantServiceInviteDeleteRequestValidationError is the validation error
// returned by TenantServiceInviteDeleteRequest.Validate if the designated
// constraints aren't met.
type TenantServiceInviteDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceInviteDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceInviteDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceInviteDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceInviteDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceInviteDeleteRequestValidationError) ErrorName() string {
	return "TenantServiceInviteDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceInviteDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceInviteDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceInviteDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceInviteDeleteRequestValidationError{}

// Validate checks the field values on TenantServiceInviteDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TenantServiceInviteDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceInviteDeleteResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TenantServiceInviteDeleteResponseMultiError, or nil if none found.
func (m *TenantServiceInviteDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceInviteDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TenantServiceInviteDeleteResponseMultiError(errors)
	}

	return nil
}

// TenantServiceInviteDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by
// TenantServiceInviteDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type TenantServiceInviteDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceInviteDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceInviteDeleteResponseMultiError) AllErrors() []error { return m }

// TenantServiceInviteDeleteResponseValidationError is the validation error
// returned by TenantServiceInviteDeleteResponse.Validate if the designated
// constraints aren't met.
type TenantServiceInviteDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceInviteDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceInviteDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceInviteDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceInviteDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceInviteDeleteResponseValidationError) ErrorName() string {
	return "TenantServiceInviteDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceInviteDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceInviteDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceInviteDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceInviteDeleteResponseValidationError{}

// Validate checks the field values on TenantServiceUpdateMemberRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TenantServiceUpdateMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceUpdateMemberRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TenantServiceUpdateMemberRequestMultiError, or nil if none found.
func (m *TenantServiceUpdateMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceUpdateMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	// no validation rules for MemberId

	// no validation rules for Role

	if len(errors) > 0 {
		return TenantServiceUpdateMemberRequestMultiError(errors)
	}

	return nil
}

// TenantServiceUpdateMemberRequestMultiError is an error wrapping multiple
// validation errors returned by
// TenantServiceUpdateMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type TenantServiceUpdateMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceUpdateMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceUpdateMemberRequestMultiError) AllErrors() []error { return m }

// TenantServiceUpdateMemberRequestValidationError is the validation error
// returned by TenantServiceUpdateMemberRequest.Validate if the designated
// constraints aren't met.
type TenantServiceUpdateMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceUpdateMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceUpdateMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceUpdateMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceUpdateMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceUpdateMemberRequestValidationError) ErrorName() string {
	return "TenantServiceUpdateMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceUpdateMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceUpdateMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceUpdateMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceUpdateMemberRequestValidationError{}

// Validate checks the field values on TenantServiceUpdateMemberResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TenantServiceUpdateMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceUpdateMemberResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TenantServiceUpdateMemberResponseMultiError, or nil if none found.
func (m *TenantServiceUpdateMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceUpdateMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenantMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantServiceUpdateMemberResponseValidationError{
					field:  "TenantMember",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantServiceUpdateMemberResponseValidationError{
					field:  "TenantMember",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenantMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantServiceUpdateMemberResponseValidationError{
				field:  "TenantMember",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantServiceUpdateMemberResponseMultiError(errors)
	}

	return nil
}

// TenantServiceUpdateMemberResponseMultiError is an error wrapping multiple
// validation errors returned by
// TenantServiceUpdateMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type TenantServiceUpdateMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceUpdateMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceUpdateMemberResponseMultiError) AllErrors() []error { return m }

// TenantServiceUpdateMemberResponseValidationError is the validation error
// returned by TenantServiceUpdateMemberResponse.Validate if the designated
// constraints aren't met.
type TenantServiceUpdateMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceUpdateMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceUpdateMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceUpdateMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceUpdateMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceUpdateMemberResponseValidationError) ErrorName() string {
	return "TenantServiceUpdateMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceUpdateMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceUpdateMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceUpdateMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceUpdateMemberResponseValidationError{}
