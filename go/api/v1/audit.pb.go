// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: api/v1/audit.proto

package apiv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AuditPhase specifies phase of an audit trace
type AuditPhase int32

const (
	// AUDIT_PHASE_UNSPECIFIED is not specified
	AuditPhase_AUDIT_PHASE_UNSPECIFIED AuditPhase = 0
	// AUDIT_PHASE_REQUEST defines an audit trace in the request phase
	AuditPhase_AUDIT_PHASE_REQUEST AuditPhase = 1
	// AUDIT_PHASE_REQUEST defines an audit trace in the response phase
	AuditPhase_AUDIT_PHASE_RESPONSE AuditPhase = 2
)

// Enum value maps for AuditPhase.
var (
	AuditPhase_name = map[int32]string{
		0: "AUDIT_PHASE_UNSPECIFIED",
		1: "AUDIT_PHASE_REQUEST",
		2: "AUDIT_PHASE_RESPONSE",
	}
	AuditPhase_value = map[string]int32{
		"AUDIT_PHASE_UNSPECIFIED": 0,
		"AUDIT_PHASE_REQUEST":     1,
		"AUDIT_PHASE_RESPONSE":    2,
	}
)

func (x AuditPhase) Enum() *AuditPhase {
	p := new(AuditPhase)
	*p = x
	return p
}

func (x AuditPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_audit_proto_enumTypes[0].Descriptor()
}

func (AuditPhase) Type() protoreflect.EnumType {
	return &file_api_v1_audit_proto_enumTypes[0]
}

func (x AuditPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditPhase.Descriptor instead.
func (AuditPhase) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_audit_proto_rawDescGZIP(), []int{0}
}

// AuditTrace is an audit trace
type AuditTrace struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Uuid of the audit trace
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Timestamp is the timestamp when the request arrived at the api
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// User is the login user who called the api method
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// Tenant is the tenant targeted by the api call
	Tenant string `protobuf:"bytes,4,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// Project is the project targeted by the api call
	Project *string `protobuf:"bytes,5,opt,name=project,proto3,oneof" json:"project,omitempty"`
	// Method is the api method that was called
	Method string `protobuf:"bytes,6,opt,name=method,proto3" json:"method,omitempty"`
	// Body is the payload of the api call. In the request phase this contains the payload sent by the client, in the request phase it contains the payload returned by the api server
	Body *string `protobuf:"bytes,7,opt,name=body,proto3,oneof" json:"body,omitempty"`
	// Source  IP is contains the source ip address of the api call
	SourceIp string `protobuf:"bytes,8,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	// ResultCode is a status code describing the result of the api call. it is set for traces in the response phase and contains official gRPC status codes
	ResultCode *int32 `protobuf:"varint,9,opt,name=result_code,json=resultCode,proto3,oneof" json:"result_code,omitempty"`
	// Phase represents the phase of the audit trace
	Phase         AuditPhase `protobuf:"varint,10,opt,name=phase,proto3,enum=api.v1.AuditPhase" json:"phase,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditTrace) Reset() {
	*x = AuditTrace{}
	mi := &file_api_v1_audit_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditTrace) ProtoMessage() {}

func (x *AuditTrace) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_audit_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditTrace.ProtoReflect.Descriptor instead.
func (*AuditTrace) Descriptor() ([]byte, []int) {
	return file_api_v1_audit_proto_rawDescGZIP(), []int{0}
}

func (x *AuditTrace) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AuditTrace) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AuditTrace) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AuditTrace) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *AuditTrace) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *AuditTrace) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *AuditTrace) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *AuditTrace) GetSourceIp() string {
	if x != nil {
		return x.SourceIp
	}
	return ""
}

func (x *AuditTrace) GetResultCode() int32 {
	if x != nil && x.ResultCode != nil {
		return *x.ResultCode
	}
	return 0
}

func (x *AuditTrace) GetPhase() AuditPhase {
	if x != nil {
		return x.Phase
	}
	return AuditPhase_AUDIT_PHASE_UNSPECIFIED
}

// AuditServiceListRequest is the request payload to list audits
type AuditServiceListRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Login of the tenant
	Login string `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	// Uuid of the audit trace
	Uuid *string `protobuf:"bytes,2,opt,name=uuid,proto3,oneof" json:"uuid,omitempty"`
	// From describes the start of the time window in which to list audit traces (if not specified this defaults to the last eight hours)
	From *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=from,proto3,oneof" json:"from,omitempty"`
	// To describes the end of the time window in which to list audit traces (if not specified this defaults to the time the request was issued)
	To *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=to,proto3,oneof" json:"to,omitempty"`
	// User is the user who called the api method
	User *string `protobuf:"bytes,5,opt,name=user,proto3,oneof" json:"user,omitempty"`
	// Project is the project targeted by the api call
	Project *string `protobuf:"bytes,6,opt,name=project,proto3,oneof" json:"project,omitempty"`
	// Method is the api method that was called
	Method *string `protobuf:"bytes,7,opt,name=method,proto3,oneof" json:"method,omitempty"`
	// SourceIP contains the ip address of the caller
	SourceIp *string `protobuf:"bytes,8,opt,name=source_ip,json=sourceIp,proto3,oneof" json:"source_ip,omitempty"`
	// ResultCode is a string describing the result of the api call
	ResultCode *int32 `protobuf:"varint,9,opt,name=result_code,json=resultCode,proto3,oneof" json:"result_code,omitempty"`
	// Body is a string providing text-search of the body field
	Body *string `protobuf:"bytes,10,opt,name=body,proto3,oneof" json:"body,omitempty"`
	// Limit is a number limiting the length of the response (min: 1, max: 1000, defaults to 200)
	Limit *int32 `protobuf:"varint,11,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Phase specifies the audit phase
	Phase         *AuditPhase `protobuf:"varint,12,opt,name=phase,proto3,enum=api.v1.AuditPhase,oneof" json:"phase,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditServiceListRequest) Reset() {
	*x = AuditServiceListRequest{}
	mi := &file_api_v1_audit_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditServiceListRequest) ProtoMessage() {}

func (x *AuditServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_audit_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditServiceListRequest.ProtoReflect.Descriptor instead.
func (*AuditServiceListRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_audit_proto_rawDescGZIP(), []int{1}
}

func (x *AuditServiceListRequest) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *AuditServiceListRequest) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *AuditServiceListRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *AuditServiceListRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *AuditServiceListRequest) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *AuditServiceListRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *AuditServiceListRequest) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *AuditServiceListRequest) GetSourceIp() string {
	if x != nil && x.SourceIp != nil {
		return *x.SourceIp
	}
	return ""
}

func (x *AuditServiceListRequest) GetResultCode() int32 {
	if x != nil && x.ResultCode != nil {
		return *x.ResultCode
	}
	return 0
}

func (x *AuditServiceListRequest) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *AuditServiceListRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *AuditServiceListRequest) GetPhase() AuditPhase {
	if x != nil && x.Phase != nil {
		return *x.Phase
	}
	return AuditPhase_AUDIT_PHASE_UNSPECIFIED
}

// AuditServiceListResponse is the response payload of a audit list request
type AuditServiceListResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Traces is a list of audit traces without the secrets
	Traces        []*AuditTrace `protobuf:"bytes,1,rep,name=traces,proto3" json:"traces,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditServiceListResponse) Reset() {
	*x = AuditServiceListResponse{}
	mi := &file_api_v1_audit_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditServiceListResponse) ProtoMessage() {}

func (x *AuditServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_audit_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditServiceListResponse.ProtoReflect.Descriptor instead.
func (*AuditServiceListResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_audit_proto_rawDescGZIP(), []int{2}
}

func (x *AuditServiceListResponse) GetTraces() []*AuditTrace {
	if x != nil {
		return x.Traces
	}
	return nil
}

// AuditServiceGetRequest is the request payload of a audit get request
type AuditServiceGetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Login of the tenant
	Login string `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	// Uuid of the audit trace
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Phase specifies the audit phase, defaults to request
	Phase         *AuditPhase `protobuf:"varint,3,opt,name=phase,proto3,enum=api.v1.AuditPhase,oneof" json:"phase,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditServiceGetRequest) Reset() {
	*x = AuditServiceGetRequest{}
	mi := &file_api_v1_audit_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditServiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditServiceGetRequest) ProtoMessage() {}

func (x *AuditServiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_audit_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditServiceGetRequest.ProtoReflect.Descriptor instead.
func (*AuditServiceGetRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_audit_proto_rawDescGZIP(), []int{3}
}

func (x *AuditServiceGetRequest) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *AuditServiceGetRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AuditServiceGetRequest) GetPhase() AuditPhase {
	if x != nil && x.Phase != nil {
		return *x.Phase
	}
	return AuditPhase_AUDIT_PHASE_UNSPECIFIED
}

// AuditServiceGetResponse is the response payload of a audit get request
type AuditServiceGetResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Trace is the audit trace
	Trace         *AuditTrace `protobuf:"bytes,1,opt,name=trace,proto3" json:"trace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditServiceGetResponse) Reset() {
	*x = AuditServiceGetResponse{}
	mi := &file_api_v1_audit_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditServiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditServiceGetResponse) ProtoMessage() {}

func (x *AuditServiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_audit_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditServiceGetResponse.ProtoReflect.Descriptor instead.
func (*AuditServiceGetResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_audit_proto_rawDescGZIP(), []int{4}
}

func (x *AuditServiceGetResponse) GetTrace() *AuditTrace {
	if x != nil {
		return x.Trace
	}
	return nil
}

var File_api_v1_audit_proto protoreflect.FileDescriptor

var file_api_v1_audit_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x13, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf2, 0x02, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x12,
	0x24, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x9e, 0x05, 0x0a, 0x17, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x01, 0x52, 0x05, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x48, 0x01, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x48, 0x02, 0x52, 0x02, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05,
	0x10, 0x02, 0x18, 0x80, 0x01, 0x48, 0x03, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x04, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05,
	0x10, 0x02, 0x18, 0x80, 0x02, 0x48, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x70, 0x01, 0x48, 0x06,
	0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x48, 0x07, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72,
	0x05, 0x10, 0x02, 0x18, 0x80, 0x02, 0x48, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0xba, 0x48, 0x07, 0x1a, 0x05, 0x18, 0xe8, 0x07, 0x20, 0x00, 0x48, 0x09, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x0a, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x18, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x22, 0x9b, 0x01,
	0x0a, 0x16, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x02,
	0x18, 0x80, 0x01, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x22, 0x43, 0x0a, 0x17, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x2a, 0x5c, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x17, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41,
	0x55, 0x44, 0x49, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x50, 0x48,
	0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x02, 0x32, 0xb7,
	0x01, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x51, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x09, 0xc2, 0xf3, 0x18, 0x01, 0x01, 0xe8, 0xf3,
	0x18, 0x02, 0x12, 0x54, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x09, 0xc2,
	0xf3, 0x18, 0x01, 0x01, 0xe8, 0xf3, 0x18, 0x02, 0x42, 0x83, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x3b, 0x61, 0x70, 0x69, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x06,
	0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x06, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x12, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x07, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_v1_audit_proto_rawDescOnce sync.Once
	file_api_v1_audit_proto_rawDescData []byte
)

func file_api_v1_audit_proto_rawDescGZIP() []byte {
	file_api_v1_audit_proto_rawDescOnce.Do(func() {
		file_api_v1_audit_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_v1_audit_proto_rawDesc), len(file_api_v1_audit_proto_rawDesc)))
	})
	return file_api_v1_audit_proto_rawDescData
}

var file_api_v1_audit_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v1_audit_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_api_v1_audit_proto_goTypes = []any{
	(AuditPhase)(0),                  // 0: api.v1.AuditPhase
	(*AuditTrace)(nil),               // 1: api.v1.AuditTrace
	(*AuditServiceListRequest)(nil),  // 2: api.v1.AuditServiceListRequest
	(*AuditServiceListResponse)(nil), // 3: api.v1.AuditServiceListResponse
	(*AuditServiceGetRequest)(nil),   // 4: api.v1.AuditServiceGetRequest
	(*AuditServiceGetResponse)(nil),  // 5: api.v1.AuditServiceGetResponse
	(*timestamppb.Timestamp)(nil),    // 6: google.protobuf.Timestamp
}
var file_api_v1_audit_proto_depIdxs = []int32{
	6,  // 0: api.v1.AuditTrace.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 1: api.v1.AuditTrace.phase:type_name -> api.v1.AuditPhase
	6,  // 2: api.v1.AuditServiceListRequest.from:type_name -> google.protobuf.Timestamp
	6,  // 3: api.v1.AuditServiceListRequest.to:type_name -> google.protobuf.Timestamp
	0,  // 4: api.v1.AuditServiceListRequest.phase:type_name -> api.v1.AuditPhase
	1,  // 5: api.v1.AuditServiceListResponse.traces:type_name -> api.v1.AuditTrace
	0,  // 6: api.v1.AuditServiceGetRequest.phase:type_name -> api.v1.AuditPhase
	1,  // 7: api.v1.AuditServiceGetResponse.trace:type_name -> api.v1.AuditTrace
	4,  // 8: api.v1.AuditService.Get:input_type -> api.v1.AuditServiceGetRequest
	2,  // 9: api.v1.AuditService.List:input_type -> api.v1.AuditServiceListRequest
	5,  // 10: api.v1.AuditService.Get:output_type -> api.v1.AuditServiceGetResponse
	3,  // 11: api.v1.AuditService.List:output_type -> api.v1.AuditServiceListResponse
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_api_v1_audit_proto_init() }
func file_api_v1_audit_proto_init() {
	if File_api_v1_audit_proto != nil {
		return
	}
	file_api_v1_common_proto_init()
	file_api_v1_audit_proto_msgTypes[0].OneofWrappers = []any{}
	file_api_v1_audit_proto_msgTypes[1].OneofWrappers = []any{}
	file_api_v1_audit_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_v1_audit_proto_rawDesc), len(file_api_v1_audit_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_audit_proto_goTypes,
		DependencyIndexes: file_api_v1_audit_proto_depIdxs,
		EnumInfos:         file_api_v1_audit_proto_enumTypes,
		MessageInfos:      file_api_v1_audit_proto_msgTypes,
	}.Build()
	File_api_v1_audit_proto = out.File
	file_api_v1_audit_proto_goTypes = nil
	file_api_v1_audit_proto_depIdxs = nil
}
