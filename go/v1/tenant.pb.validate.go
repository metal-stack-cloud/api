// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/tenant.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Tenant with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tenant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tenant with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TenantMultiError, or nil if none found.
func (m *Tenant) ValidateAll() error {
	return m.validate(true)
}

func (m *Tenant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for AvatarUrl

	// no validation rules for OauthProvider

	if all {
		switch v := interface{}(m.GetPaymentDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "PaymentDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "PaymentDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantValidationError{
				field:  "PaymentDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantMultiError(errors)
	}

	return nil
}

// TenantMultiError is an error wrapping multiple validation errors returned by
// Tenant.ValidateAll() if the designated constraints aren't met.
type TenantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantMultiError) AllErrors() []error { return m }

// TenantValidationError is the validation error returned by Tenant.Validate if
// the designated constraints aren't met.
type TenantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantValidationError) ErrorName() string { return "TenantValidationError" }

// Error satisfies the builtin error interface
func (e TenantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantValidationError{}

// Validate checks the field values on PaymentDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentDetails with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaymentDetailsMultiError,
// or nil if none found.
func (m *PaymentDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CustomerId

	// no validation rules for PaymentMethodId

	// no validation rules for SubscriptionId

	if len(errors) > 0 {
		return PaymentDetailsMultiError(errors)
	}

	return nil
}

// PaymentDetailsMultiError is an error wrapping multiple validation errors
// returned by PaymentDetails.ValidateAll() if the designated constraints
// aren't met.
type PaymentDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentDetailsMultiError) AllErrors() []error { return m }

// PaymentDetailsValidationError is the validation error returned by
// PaymentDetails.Validate if the designated constraints aren't met.
type PaymentDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentDetailsValidationError) ErrorName() string { return "PaymentDetailsValidationError" }

// Error satisfies the builtin error interface
func (e PaymentDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentDetailsValidationError{}

// Validate checks the field values on PaymentDetailsUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaymentDetailsUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentDetailsUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentDetailsUpdateMultiError, or nil if none found.
func (m *PaymentDetailsUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentDetailsUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.CustomerId != nil {
		// no validation rules for CustomerId
	}

	if m.PaymentMethodId != nil {
		// no validation rules for PaymentMethodId
	}

	if m.SubscriptionId != nil {
		// no validation rules for SubscriptionId
	}

	if len(errors) > 0 {
		return PaymentDetailsUpdateMultiError(errors)
	}

	return nil
}

// PaymentDetailsUpdateMultiError is an error wrapping multiple validation
// errors returned by PaymentDetailsUpdate.ValidateAll() if the designated
// constraints aren't met.
type PaymentDetailsUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentDetailsUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentDetailsUpdateMultiError) AllErrors() []error { return m }

// PaymentDetailsUpdateValidationError is the validation error returned by
// PaymentDetailsUpdate.Validate if the designated constraints aren't met.
type PaymentDetailsUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentDetailsUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentDetailsUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentDetailsUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentDetailsUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentDetailsUpdateValidationError) ErrorName() string {
	return "PaymentDetailsUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentDetailsUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentDetailsUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentDetailsUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentDetailsUpdateValidationError{}

// Validate checks the field values on TenantServiceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantServiceGetRequestMultiError, or nil if none found.
func (m *TenantServiceGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	if len(errors) > 0 {
		return TenantServiceGetRequestMultiError(errors)
	}

	return nil
}

// TenantServiceGetRequestMultiError is an error wrapping multiple validation
// errors returned by TenantServiceGetRequest.ValidateAll() if the designated
// constraints aren't met.
type TenantServiceGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceGetRequestMultiError) AllErrors() []error { return m }

// TenantServiceGetRequestValidationError is the validation error returned by
// TenantServiceGetRequest.Validate if the designated constraints aren't met.
type TenantServiceGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceGetRequestValidationError) ErrorName() string {
	return "TenantServiceGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceGetRequestValidationError{}

// Validate checks the field values on TenantServiceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantServiceCreateRequestMultiError, or nil if none found.
func (m *TenantServiceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantServiceCreateRequestValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantServiceCreateRequestValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantServiceCreateRequestValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantServiceCreateRequestMultiError(errors)
	}

	return nil
}

// TenantServiceCreateRequestMultiError is an error wrapping multiple
// validation errors returned by TenantServiceCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type TenantServiceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceCreateRequestMultiError) AllErrors() []error { return m }

// TenantServiceCreateRequestValidationError is the validation error returned
// by TenantServiceCreateRequest.Validate if the designated constraints aren't met.
type TenantServiceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceCreateRequestValidationError) ErrorName() string {
	return "TenantServiceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceCreateRequestValidationError{}

// Validate checks the field values on TenantServiceCreateOrUpdateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TenantServiceCreateOrUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceCreateOrUpdateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TenantServiceCreateOrUpdateRequestMultiError, or nil if none found.
func (m *TenantServiceCreateOrUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceCreateOrUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantServiceCreateOrUpdateRequestValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantServiceCreateOrUpdateRequestValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantServiceCreateOrUpdateRequestValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantServiceCreateOrUpdateRequestMultiError(errors)
	}

	return nil
}

// TenantServiceCreateOrUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by
// TenantServiceCreateOrUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type TenantServiceCreateOrUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceCreateOrUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceCreateOrUpdateRequestMultiError) AllErrors() []error { return m }

// TenantServiceCreateOrUpdateRequestValidationError is the validation error
// returned by TenantServiceCreateOrUpdateRequest.Validate if the designated
// constraints aren't met.
type TenantServiceCreateOrUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceCreateOrUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceCreateOrUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceCreateOrUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceCreateOrUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceCreateOrUpdateRequestValidationError) ErrorName() string {
	return "TenantServiceCreateOrUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceCreateOrUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceCreateOrUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceCreateOrUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceCreateOrUpdateRequestValidationError{}

// Validate checks the field values on TenantServiceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantServiceUpdateRequestMultiError, or nil if none found.
func (m *TenantServiceUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.AvatarUrl != nil {
		// no validation rules for AvatarUrl
	}

	if m.PaymentDetails != nil {

		if all {
			switch v := interface{}(m.GetPaymentDetails()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TenantServiceUpdateRequestValidationError{
						field:  "PaymentDetails",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TenantServiceUpdateRequestValidationError{
						field:  "PaymentDetails",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPaymentDetails()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TenantServiceUpdateRequestValidationError{
					field:  "PaymentDetails",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TenantServiceUpdateRequestMultiError(errors)
	}

	return nil
}

// TenantServiceUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by TenantServiceUpdateRequest.ValidateAll() if
// the designated constraints aren't met.
type TenantServiceUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceUpdateRequestMultiError) AllErrors() []error { return m }

// TenantServiceUpdateRequestValidationError is the validation error returned
// by TenantServiceUpdateRequest.Validate if the designated constraints aren't met.
type TenantServiceUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceUpdateRequestValidationError) ErrorName() string {
	return "TenantServiceUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceUpdateRequestValidationError{}

// Validate checks the field values on TenantServiceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantServiceDeleteRequestMultiError, or nil if none found.
func (m *TenantServiceDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	if len(errors) > 0 {
		return TenantServiceDeleteRequestMultiError(errors)
	}

	return nil
}

// TenantServiceDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by TenantServiceDeleteRequest.ValidateAll() if
// the designated constraints aren't met.
type TenantServiceDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceDeleteRequestMultiError) AllErrors() []error { return m }

// TenantServiceDeleteRequestValidationError is the validation error returned
// by TenantServiceDeleteRequest.Validate if the designated constraints aren't met.
type TenantServiceDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceDeleteRequestValidationError) ErrorName() string {
	return "TenantServiceDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceDeleteRequestValidationError{}

// Validate checks the field values on TenantServiceGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantServiceGetResponseMultiError, or nil if none found.
func (m *TenantServiceGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantServiceGetResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantServiceGetResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantServiceGetResponseValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantServiceGetResponseMultiError(errors)
	}

	return nil
}

// TenantServiceGetResponseMultiError is an error wrapping multiple validation
// errors returned by TenantServiceGetResponse.ValidateAll() if the designated
// constraints aren't met.
type TenantServiceGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceGetResponseMultiError) AllErrors() []error { return m }

// TenantServiceGetResponseValidationError is the validation error returned by
// TenantServiceGetResponse.Validate if the designated constraints aren't met.
type TenantServiceGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceGetResponseValidationError) ErrorName() string {
	return "TenantServiceGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceGetResponseValidationError{}

// Validate checks the field values on TenantServiceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantServiceCreateResponseMultiError, or nil if none found.
func (m *TenantServiceCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantServiceCreateResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantServiceCreateResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantServiceCreateResponseValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantServiceCreateResponseMultiError(errors)
	}

	return nil
}

// TenantServiceCreateResponseMultiError is an error wrapping multiple
// validation errors returned by TenantServiceCreateResponse.ValidateAll() if
// the designated constraints aren't met.
type TenantServiceCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceCreateResponseMultiError) AllErrors() []error { return m }

// TenantServiceCreateResponseValidationError is the validation error returned
// by TenantServiceCreateResponse.Validate if the designated constraints
// aren't met.
type TenantServiceCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceCreateResponseValidationError) ErrorName() string {
	return "TenantServiceCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceCreateResponseValidationError{}

// Validate checks the field values on TenantServiceCreateOrUpdateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TenantServiceCreateOrUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceCreateOrUpdateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TenantServiceCreateOrUpdateResponseMultiError, or nil if none found.
func (m *TenantServiceCreateOrUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceCreateOrUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantServiceCreateOrUpdateResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantServiceCreateOrUpdateResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantServiceCreateOrUpdateResponseValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantServiceCreateOrUpdateResponseMultiError(errors)
	}

	return nil
}

// TenantServiceCreateOrUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by
// TenantServiceCreateOrUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type TenantServiceCreateOrUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceCreateOrUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceCreateOrUpdateResponseMultiError) AllErrors() []error { return m }

// TenantServiceCreateOrUpdateResponseValidationError is the validation error
// returned by TenantServiceCreateOrUpdateResponse.Validate if the designated
// constraints aren't met.
type TenantServiceCreateOrUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceCreateOrUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceCreateOrUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceCreateOrUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceCreateOrUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceCreateOrUpdateResponseValidationError) ErrorName() string {
	return "TenantServiceCreateOrUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceCreateOrUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceCreateOrUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceCreateOrUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceCreateOrUpdateResponseValidationError{}

// Validate checks the field values on TenantServiceUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantServiceUpdateResponseMultiError, or nil if none found.
func (m *TenantServiceUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantServiceUpdateResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantServiceUpdateResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantServiceUpdateResponseValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantServiceUpdateResponseMultiError(errors)
	}

	return nil
}

// TenantServiceUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by TenantServiceUpdateResponse.ValidateAll() if
// the designated constraints aren't met.
type TenantServiceUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceUpdateResponseMultiError) AllErrors() []error { return m }

// TenantServiceUpdateResponseValidationError is the validation error returned
// by TenantServiceUpdateResponse.Validate if the designated constraints
// aren't met.
type TenantServiceUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceUpdateResponseValidationError) ErrorName() string {
	return "TenantServiceUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceUpdateResponseValidationError{}

// Validate checks the field values on TenantServiceDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantServiceDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantServiceDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantServiceDeleteResponseMultiError, or nil if none found.
func (m *TenantServiceDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantServiceDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantServiceDeleteResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantServiceDeleteResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantServiceDeleteResponseValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantServiceDeleteResponseMultiError(errors)
	}

	return nil
}

// TenantServiceDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by TenantServiceDeleteResponse.ValidateAll() if
// the designated constraints aren't met.
type TenantServiceDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantServiceDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantServiceDeleteResponseMultiError) AllErrors() []error { return m }

// TenantServiceDeleteResponseValidationError is the validation error returned
// by TenantServiceDeleteResponse.Validate if the designated constraints
// aren't met.
type TenantServiceDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantServiceDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantServiceDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantServiceDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantServiceDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantServiceDeleteResponseValidationError) ErrorName() string {
	return "TenantServiceDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantServiceDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantServiceDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantServiceDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantServiceDeleteResponseValidationError{}
