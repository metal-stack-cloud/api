// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/token.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TokenServiceCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TokenServiceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenServiceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TokenServiceCreateRequestMultiError, or nil if none found.
func (m *TokenServiceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenServiceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subject

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TokenServiceCreateRequestValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TokenServiceCreateRequestValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TokenServiceCreateRequestValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TokenServiceCreateRequestValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TokenServiceCreateRequestValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TokenServiceCreateRequestValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetExpires()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TokenServiceCreateRequestValidationError{
					field:  "Expires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TokenServiceCreateRequestValidationError{
					field:  "Expires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpires()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenServiceCreateRequestValidationError{
				field:  "Expires",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TokenServiceCreateRequestMultiError(errors)
	}

	return nil
}

// TokenServiceCreateRequestMultiError is an error wrapping multiple validation
// errors returned by TokenServiceCreateRequest.ValidateAll() if the
// designated constraints aren't met.
type TokenServiceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenServiceCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenServiceCreateRequestMultiError) AllErrors() []error { return m }

// TokenServiceCreateRequestValidationError is the validation error returned by
// TokenServiceCreateRequest.Validate if the designated constraints aren't met.
type TokenServiceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenServiceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenServiceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenServiceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenServiceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenServiceCreateRequestValidationError) ErrorName() string {
	return "TokenServiceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TokenServiceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenServiceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenServiceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenServiceCreateRequestValidationError{}

// Validate checks the field values on ProjectPermission with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProjectPermission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectPermission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectPermissionMultiError, or nil if none found.
func (m *ProjectPermission) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectPermission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Project

	if len(errors) > 0 {
		return ProjectPermissionMultiError(errors)
	}

	return nil
}

// ProjectPermissionMultiError is an error wrapping multiple validation errors
// returned by ProjectPermission.ValidateAll() if the designated constraints
// aren't met.
type ProjectPermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectPermissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectPermissionMultiError) AllErrors() []error { return m }

// ProjectPermissionValidationError is the validation error returned by
// ProjectPermission.Validate if the designated constraints aren't met.
type ProjectPermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectPermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectPermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectPermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectPermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectPermissionValidationError) ErrorName() string {
	return "ProjectPermissionValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectPermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectPermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectPermissionValidationError{}

// Validate checks the field values on TokenRole with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenRole with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenRoleMultiError, or nil
// if none found.
func (m *TokenRole) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subject

	// no validation rules for Role

	if len(errors) > 0 {
		return TokenRoleMultiError(errors)
	}

	return nil
}

// TokenRoleMultiError is an error wrapping multiple validation errors returned
// by TokenRole.ValidateAll() if the designated constraints aren't met.
type TokenRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenRoleMultiError) AllErrors() []error { return m }

// TokenRoleValidationError is the validation error returned by
// TokenRole.Validate if the designated constraints aren't met.
type TokenRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenRoleValidationError) ErrorName() string { return "TokenRoleValidationError" }

// Error satisfies the builtin error interface
func (e TokenRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenRoleValidationError{}

// Validate checks the field values on TokenServiceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TokenServiceCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenServiceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TokenServiceCreateResponseMultiError, or nil if none found.
func (m *TokenServiceCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenServiceCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return TokenServiceCreateResponseMultiError(errors)
	}

	return nil
}

// TokenServiceCreateResponseMultiError is an error wrapping multiple
// validation errors returned by TokenServiceCreateResponse.ValidateAll() if
// the designated constraints aren't met.
type TokenServiceCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenServiceCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenServiceCreateResponseMultiError) AllErrors() []error { return m }

// TokenServiceCreateResponseValidationError is the validation error returned
// by TokenServiceCreateResponse.Validate if the designated constraints aren't met.
type TokenServiceCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenServiceCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenServiceCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenServiceCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenServiceCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenServiceCreateResponseValidationError) ErrorName() string {
	return "TokenServiceCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TokenServiceCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenServiceCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenServiceCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenServiceCreateResponseValidationError{}
