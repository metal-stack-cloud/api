// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: status/v1/message.proto

package statusv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/metal-stack-cloud/api/go/status/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MessageServiceName is the fully-qualified name of the MessageService service.
	MessageServiceName = "status.v1.MessageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MessageServiceListProcedure is the fully-qualified name of the MessageService's List RPC.
	MessageServiceListProcedure = "/status.v1.MessageService/List"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	messageServiceServiceDescriptor    = v1.File_status_v1_message_proto.Services().ByName("MessageService")
	messageServiceListMethodDescriptor = messageServiceServiceDescriptor.Methods().ByName("List")
)

// MessageServiceClient is a client for the status.v1.MessageService service.
type MessageServiceClient interface {
	List(context.Context, *connect.Request[v1.MessageServiceListRequest]) (*connect.Response[v1.MessageServiceListResponse], error)
}

// NewMessageServiceClient constructs a client for the status.v1.MessageService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MessageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &messageServiceClient{
		list: connect.NewClient[v1.MessageServiceListRequest, v1.MessageServiceListResponse](
			httpClient,
			baseURL+MessageServiceListProcedure,
			connect.WithSchema(messageServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// messageServiceClient implements MessageServiceClient.
type messageServiceClient struct {
	list *connect.Client[v1.MessageServiceListRequest, v1.MessageServiceListResponse]
}

// List calls status.v1.MessageService.List.
func (c *messageServiceClient) List(ctx context.Context, req *connect.Request[v1.MessageServiceListRequest]) (*connect.Response[v1.MessageServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// MessageServiceHandler is an implementation of the status.v1.MessageService service.
type MessageServiceHandler interface {
	List(context.Context, *connect.Request[v1.MessageServiceListRequest]) (*connect.Response[v1.MessageServiceListResponse], error)
}

// NewMessageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessageServiceHandler(svc MessageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	messageServiceListHandler := connect.NewUnaryHandler(
		MessageServiceListProcedure,
		svc.List,
		connect.WithSchema(messageServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/status.v1.MessageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MessageServiceListProcedure:
			messageServiceListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMessageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMessageServiceHandler struct{}

func (UnimplementedMessageServiceHandler) List(context.Context, *connect.Request[v1.MessageServiceListRequest]) (*connect.Response[v1.MessageServiceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("status.v1.MessageService.List is not implemented"))
}
