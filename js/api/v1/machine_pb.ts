// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file api/v1/machine.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * MachineRole defines the machine roles.
 *
 * @generated from enum api.v1.MachineRole
 */
export enum MachineRole {
  /**
   * MACHINE_ROLE_UNSPECIFIED is not specified
   *
   * @generated from enum value: MACHINE_ROLE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * MACHINE_ROLE_MACHINE is a machine that serves as a normal machine
   *
   * @generated from enum value: MACHINE_ROLE_MACHINE = 1;
   */
  MACHINE = 1,

  /**
   * MACHINE_ROLE_FIREWALL is a machine that serves as a firewall
   *
   * @generated from enum value: MACHINE_ROLE_FIREWALL = 2;
   */
  FIREWALL = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(MachineRole)
proto3.util.setEnumType(MachineRole, "api.v1.MachineRole", [
  { no: 0, name: "MACHINE_ROLE_UNSPECIFIED" },
  { no: 1, name: "MACHINE_ROLE_MACHINE" },
  { no: 2, name: "MACHINE_ROLE_FIREWALL" },
]);

/**
 * MachineState defines the machine states.
 *
 * @generated from enum api.v1.MachineState
 */
export enum MachineState {
  /**
   * MACHINE_ROLE_UNSPECIFIED is not specified
   *
   * @generated from enum value: MACHINE_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * MACHINE_STATE_HEALTHY describes an healthy machine state.
   *
   * @generated from enum value: MACHINE_STATE_HEALTHY = 1;
   */
  HEALTHY = 1,

  /**
   * MACHINE_STATE_UNHEALTHY describes an unhealthy machine state.
   *
   * @generated from enum value: MACHINE_STATE_UNHEALTHY = 2;
   */
  UNHEALTHY = 2,

  /**
   * MACHINE_STATE_PROVISIONING describes a machine that is currently being provisioned.
   *
   * @generated from enum value: MACHINE_STATE_PROVISIONING = 3;
   */
  PROVISIONING = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(MachineState)
proto3.util.setEnumType(MachineState, "api.v1.MachineState", [
  { no: 0, name: "MACHINE_STATE_UNSPECIFIED" },
  { no: 1, name: "MACHINE_STATE_HEALTHY" },
  { no: 2, name: "MACHINE_STATE_UNHEALTHY" },
  { no: 3, name: "MACHINE_STATE_PROVISIONING" },
]);

/**
 * Machine describes a kubernetes machine
 *
 * @generated from message api.v1.Machine
 */
export class Machine extends Message<Machine> {
  /**
   * Uuid of the machine
   *
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * Name of the machine
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Project where this machine belongs to
   *
   * @generated from field: string project = 3;
   */
  project = "";

  /**
   * AllocationUUID is a unique identifier for this machine allocation, can be used to distinguish between machine allocations over time
   *
   * @generated from field: string allocation_uuid = 4;
   */
  allocationUuid = "";

  /**
   * Hostname is the hostname of this machine
   *
   * @generated from field: string hostname = 5;
   */
  hostname = "";

  /**
   * Role defines the role of this machine
   *
   * @generated from field: api.v1.MachineRole role = 6;
   */
  role = MachineRole.UNSPECIFIED;

  /**
   * Partition where this machine was created
   *
   * @generated from field: string partition = 7;
   */
  partition = "";

  /**
   * Image is the OS image provisioned on this machine
   *
   * @generated from field: string image = 8;
   */
  image = "";

  /**
   * Size is the size of this machine.
   *
   * @generated from field: string size = 9;
   */
  size = "";

  /**
   * Tags are the tags associated with this machine
   *
   * @generated from field: map<string, string> tags = 10;
   */
  tags: { [key: string]: string } = {};

  /**
   * CreatedAt defines the date when this machine was created
   *
   * @generated from field: google.protobuf.Timestamp created_at = 15;
   */
  createdAt?: Timestamp;

  /**
   * UpdatedAt defines the date when this machine was updated
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 16;
   */
  updatedAt?: Timestamp;

  /**
   * DeletedAt defines the date when this machine was deleted
   *
   * @generated from field: google.protobuf.Timestamp deleted_at = 17;
   */
  deletedAt?: Timestamp;

  /**
   * MachineStatus describes the status of this machine
   *
   * @generated from field: api.v1.MachineStatus status = 20;
   */
  status?: MachineStatus;

  constructor(data?: PartialMessage<Machine>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Machine";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "allocation_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "role", kind: "enum", T: proto3.getEnumType(MachineRole) },
    { no: 7, name: "partition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "tags", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 15, name: "created_at", kind: "message", T: Timestamp },
    { no: 16, name: "updated_at", kind: "message", T: Timestamp },
    { no: 17, name: "deleted_at", kind: "message", T: Timestamp },
    { no: 20, name: "status", kind: "message", T: MachineStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Machine {
    return new Machine().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Machine {
    return new Machine().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Machine {
    return new Machine().fromJsonString(jsonString, options);
  }

  static equals(a: Machine | PlainMessage<Machine> | undefined, b: Machine | PlainMessage<Machine> | undefined): boolean {
    return proto3.util.equals(Machine, a, b);
  }
}

/**
 * MachineServiceGetRequest is the request payload for a machine get request
 *
 * @generated from message api.v1.MachineServiceGetRequest
 */
export class MachineServiceGetRequest extends Message<MachineServiceGetRequest> {
  /**
   * Uuid of the machine
   *
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * Project of the machine
   *
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<MachineServiceGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MachineServiceGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MachineServiceGetRequest {
    return new MachineServiceGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MachineServiceGetRequest {
    return new MachineServiceGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MachineServiceGetRequest {
    return new MachineServiceGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MachineServiceGetRequest | PlainMessage<MachineServiceGetRequest> | undefined, b: MachineServiceGetRequest | PlainMessage<MachineServiceGetRequest> | undefined): boolean {
    return proto3.util.equals(MachineServiceGetRequest, a, b);
  }
}

/**
 * MachineServiceListRequest is the request payload for a machine list request
 *
 * @generated from message api.v1.MachineServiceListRequest
 */
export class MachineServiceListRequest extends Message<MachineServiceListRequest> {
  /**
   * Project of the machine
   *
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<MachineServiceListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MachineServiceListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MachineServiceListRequest {
    return new MachineServiceListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MachineServiceListRequest {
    return new MachineServiceListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MachineServiceListRequest {
    return new MachineServiceListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MachineServiceListRequest | PlainMessage<MachineServiceListRequest> | undefined, b: MachineServiceListRequest | PlainMessage<MachineServiceListRequest> | undefined): boolean {
    return proto3.util.equals(MachineServiceListRequest, a, b);
  }
}

/**
 * MachineServiceCreateRequest is the request payload for a machine create request
 *
 * @generated from message api.v1.MachineServiceCreateRequest
 */
export class MachineServiceCreateRequest extends Message<MachineServiceCreateRequest> {
  /**
   * Name of the machine to create
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Project of the machine
   *
   * @generated from field: string project = 3;
   */
  project = "";

  /**
   * Partition of the machine
   *
   * @generated from field: string partition = 4;
   */
  partition = "";

  /**
   * Size is the size of the machine
   *
   * @generated from field: string size = 5;
   */
  size = "";

  /**
   * Image is the OS image provisioned on this machine
   *
   * @generated from field: string image = 6;
   */
  image = "";

  /**
   * UserData is the ignition or cloudinit configuration to bootstrap this machine with
   *
   * @generated from field: string user_data = 7;
   */
  userData = "";

  /**
   * Tags are additional tags to attach to this machine
   *
   * @generated from field: map<string, string> tags = 8;
   */
  tags: { [key: string]: string } = {};

  constructor(data?: PartialMessage<MachineServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MachineServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "partition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "user_data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "tags", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MachineServiceCreateRequest {
    return new MachineServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MachineServiceCreateRequest {
    return new MachineServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MachineServiceCreateRequest {
    return new MachineServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MachineServiceCreateRequest | PlainMessage<MachineServiceCreateRequest> | undefined, b: MachineServiceCreateRequest | PlainMessage<MachineServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(MachineServiceCreateRequest, a, b);
  }
}

/**
 * MachineServiceDeleteRequest is the request payload for a machine delete request
 *
 * @generated from message api.v1.MachineServiceDeleteRequest
 */
export class MachineServiceDeleteRequest extends Message<MachineServiceDeleteRequest> {
  /**
   * Uuid of the machine
   *
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * Project of the machine
   *
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<MachineServiceDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MachineServiceDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MachineServiceDeleteRequest {
    return new MachineServiceDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MachineServiceDeleteRequest {
    return new MachineServiceDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MachineServiceDeleteRequest {
    return new MachineServiceDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MachineServiceDeleteRequest | PlainMessage<MachineServiceDeleteRequest> | undefined, b: MachineServiceDeleteRequest | PlainMessage<MachineServiceDeleteRequest> | undefined): boolean {
    return proto3.util.equals(MachineServiceDeleteRequest, a, b);
  }
}

/**
 * MachineStatus
 *
 * @generated from message api.v1.MachineStatus
 */
export class MachineStatus extends Message<MachineStatus> {
  /**
   * State describes the current state of the machine
   *
   * @generated from field: api.v1.MachineState state = 1;
   */
  state = MachineState.UNSPECIFIED;

  /**
   * StateMessage describes the current state.
   *
   * @generated from field: string state_message = 2;
   */
  stateMessage = "";

  /**
   * Timestamp is the timestamp of the state.
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;

  constructor(data?: PartialMessage<MachineStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MachineStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(MachineState) },
    { no: 2, name: "state_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MachineStatus {
    return new MachineStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MachineStatus {
    return new MachineStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MachineStatus {
    return new MachineStatus().fromJsonString(jsonString, options);
  }

  static equals(a: MachineStatus | PlainMessage<MachineStatus> | undefined, b: MachineStatus | PlainMessage<MachineStatus> | undefined): boolean {
    return proto3.util.equals(MachineStatus, a, b);
  }
}

/**
 * MachineServiceCreateResponse is the response payload of a machine create request
 *
 * @generated from message api.v1.MachineServiceCreateResponse
 */
export class MachineServiceCreateResponse extends Message<MachineServiceCreateResponse> {
  /**
   * Machine is the machine
   *
   * @generated from field: api.v1.Machine machine = 1;
   */
  machine?: Machine;

  constructor(data?: PartialMessage<MachineServiceCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MachineServiceCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "machine", kind: "message", T: Machine },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MachineServiceCreateResponse {
    return new MachineServiceCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MachineServiceCreateResponse {
    return new MachineServiceCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MachineServiceCreateResponse {
    return new MachineServiceCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MachineServiceCreateResponse | PlainMessage<MachineServiceCreateResponse> | undefined, b: MachineServiceCreateResponse | PlainMessage<MachineServiceCreateResponse> | undefined): boolean {
    return proto3.util.equals(MachineServiceCreateResponse, a, b);
  }
}

/**
 * MachineServiceGetResponse is the response payload of a machine get request
 *
 * @generated from message api.v1.MachineServiceGetResponse
 */
export class MachineServiceGetResponse extends Message<MachineServiceGetResponse> {
  /**
   * Machine is the machine
   *
   * @generated from field: api.v1.Machine machine = 1;
   */
  machine?: Machine;

  constructor(data?: PartialMessage<MachineServiceGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MachineServiceGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "machine", kind: "message", T: Machine },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MachineServiceGetResponse {
    return new MachineServiceGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MachineServiceGetResponse {
    return new MachineServiceGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MachineServiceGetResponse {
    return new MachineServiceGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MachineServiceGetResponse | PlainMessage<MachineServiceGetResponse> | undefined, b: MachineServiceGetResponse | PlainMessage<MachineServiceGetResponse> | undefined): boolean {
    return proto3.util.equals(MachineServiceGetResponse, a, b);
  }
}

/**
 * MachineServiceDeleteResponse is the response payload of a machine delete request
 *
 * @generated from message api.v1.MachineServiceDeleteResponse
 */
export class MachineServiceDeleteResponse extends Message<MachineServiceDeleteResponse> {
  /**
   * Machine is the machine
   *
   * @generated from field: api.v1.Machine machine = 1;
   */
  machine?: Machine;

  constructor(data?: PartialMessage<MachineServiceDeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MachineServiceDeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "machine", kind: "message", T: Machine },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MachineServiceDeleteResponse {
    return new MachineServiceDeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MachineServiceDeleteResponse {
    return new MachineServiceDeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MachineServiceDeleteResponse {
    return new MachineServiceDeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MachineServiceDeleteResponse | PlainMessage<MachineServiceDeleteResponse> | undefined, b: MachineServiceDeleteResponse | PlainMessage<MachineServiceDeleteResponse> | undefined): boolean {
    return proto3.util.equals(MachineServiceDeleteResponse, a, b);
  }
}

/**
 * MachineServiceListResponse is the response payload of a machine list request
 *
 * @generated from message api.v1.MachineServiceListResponse
 */
export class MachineServiceListResponse extends Message<MachineServiceListResponse> {
  /**
   * Machines a list of machines
   *
   * @generated from field: repeated api.v1.Machine machines = 1;
   */
  machines: Machine[] = [];

  constructor(data?: PartialMessage<MachineServiceListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MachineServiceListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "machines", kind: "message", T: Machine, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MachineServiceListResponse {
    return new MachineServiceListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MachineServiceListResponse {
    return new MachineServiceListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MachineServiceListResponse {
    return new MachineServiceListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MachineServiceListResponse | PlainMessage<MachineServiceListResponse> | undefined, b: MachineServiceListResponse | PlainMessage<MachineServiceListResponse> | undefined): boolean {
    return proto3.util.equals(MachineServiceListResponse, a, b);
  }
}

