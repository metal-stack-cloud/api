// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file api/v1/tenant.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { OAuthProvider, TenantRole } from "./common_pb.js";
import { Coupon } from "./payment_pb.js";

/**
 * Tenant is a customer of the platform
 *
 * @generated from message api.v1.Tenant
 */
export class Tenant extends Message<Tenant> {
  /**
   * Login of the tenant
   *
   * @generated from field: string login = 1;
   */
  login = "";

  /**
   * Name if the tenant
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Email of the tenant
   *
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * AvatarUrl of the tenant
   *
   * @generated from field: string avatar_url = 5;
   */
  avatarUrl = "";

  /**
   * OauthProvider of the tenant
   *
   * @generated from field: api.v1.OAuthProvider oauth_provider = 6;
   */
  oauthProvider = OAuthProvider.UNSPECIFIED;

  /**
   * PaymentDetails the tenant provides
   *
   * @generated from field: api.v1.PaymentDetails payment_details = 8;
   */
  paymentDetails?: PaymentDetails;

  /**
   * Admitted indicates if this tenant is allowed to use the platform
   *
   * @generated from field: bool admitted = 9;
   */
  admitted = false;

  /**
   * PhoneNumber of the tenant
   *
   * @generated from field: string phone_number = 10;
   */
  phoneNumber = "";

  /**
   * TermsAndConditions the tenant accepted
   *
   * @generated from field: api.v1.TermsAndConditions terms_and_conditions = 11;
   */
  termsAndConditions?: TermsAndConditions;

  /**
   * EmailConsent the tenant made
   *
   * @generated from field: bool email_consent = 12;
   */
  emailConsent = false;

  /**
   * Onboarded checks if the tenant was asked to be onboarded
   *
   * @generated from field: bool onboarded = 13;
   */
  onboarded = false;

  /**
   * TenantMembers in this tenant
   *
   * @generated from field: repeated api.v1.TenantMember tenant_members = 14;
   */
  tenantMembers: TenantMember[] = [];

  /**
   * CreatedAt the date when this tenant was created
   *
   * @generated from field: google.protobuf.Timestamp created_at = 20;
   */
  createdAt?: Timestamp;

  /**
   * UpdatedAt the date when this tenant was updated
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 21;
   */
  updatedAt?: Timestamp;

  /**
   * DeletedAt the date when this tenant was deleted
   *
   * @generated from field: google.protobuf.Timestamp deleted_at = 22;
   */
  deletedAt?: Timestamp;

  constructor(data?: PartialMessage<Tenant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Tenant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "oauth_provider", kind: "enum", T: proto3.getEnumType(OAuthProvider) },
    { no: 8, name: "payment_details", kind: "message", T: PaymentDetails },
    { no: 9, name: "admitted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "terms_and_conditions", kind: "message", T: TermsAndConditions },
    { no: 12, name: "email_consent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "onboarded", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "tenant_members", kind: "message", T: TenantMember, repeated: true },
    { no: 20, name: "created_at", kind: "message", T: Timestamp },
    { no: 21, name: "updated_at", kind: "message", T: Timestamp },
    { no: 22, name: "deleted_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tenant {
    return new Tenant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tenant {
    return new Tenant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tenant {
    return new Tenant().fromJsonString(jsonString, options);
  }

  static equals(a: Tenant | PlainMessage<Tenant> | undefined, b: Tenant | PlainMessage<Tenant> | undefined): boolean {
    return proto3.util.equals(Tenant, a, b);
  }
}

/**
 * TenantMember defines a user that participates at a tenant
 *
 * @generated from message api.v1.TenantMember
 */
export class TenantMember extends Message<TenantMember> {
  /**
   * Id is the user id of the member
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Role is the role of the member
   *
   * @generated from field: api.v1.TenantRole role = 2;
   */
  role = TenantRole.UNSPECIFIED;

  /**
   * CreatedAt the date when the member was added to the tenant
   *
   * @generated from field: google.protobuf.Timestamp created_at = 10;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<TenantMember>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantMember";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "enum", T: proto3.getEnumType(TenantRole) },
    { no: 10, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantMember {
    return new TenantMember().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantMember {
    return new TenantMember().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantMember {
    return new TenantMember().fromJsonString(jsonString, options);
  }

  static equals(a: TenantMember | PlainMessage<TenantMember> | undefined, b: TenantMember | PlainMessage<TenantMember> | undefined): boolean {
    return proto3.util.equals(TenantMember, a, b);
  }
}

/**
 * TenantInvite defines invite to tenant
 *
 * @generated from message api.v1.TenantInvite
 */
export class TenantInvite extends Message<TenantInvite> {
  /**
   * Secret is the secret part of the invite, typically part of the url
   *
   * @generated from field: string secret = 1;
   */
  secret = "";

  /**
   * TargetTenant is the tenant id for which this invite was created
   *
   * @generated from field: string target_tenant = 2;
   */
  targetTenant = "";

  /**
   * Role is the role in this tenant the user will get after accepting the invitation
   *
   * @generated from field: api.v1.TenantRole role = 3;
   */
  role = TenantRole.UNSPECIFIED;

  /**
   * Joined is false as long as a user has not accepted the invite
   *
   * @generated from field: bool joined = 4;
   */
  joined = false;

  /**
   * TargetTenantName is the tenant name for which this invite was created
   *
   * @generated from field: string target_tenant_name = 5;
   */
  targetTenantName = "";

  /**
   * Tenant is the login of tenant who invites to join this tenant
   *
   * @generated from field: string tenant = 6;
   */
  tenant = "";

  /**
   * TenantName is the name of tenant who invites to join this tenant
   *
   * @generated from field: string tenant_name = 7;
   */
  tenantName = "";

  /**
   * ExpiresAt the date when this invite expires
   *
   * @generated from field: google.protobuf.Timestamp expires_at = 10;
   */
  expiresAt?: Timestamp;

  /**
   * JoinedAt the date when the member accepted this invite
   *
   * @generated from field: google.protobuf.Timestamp joined_at = 11;
   */
  joinedAt?: Timestamp;

  constructor(data?: PartialMessage<TenantInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target_tenant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "enum", T: proto3.getEnumType(TenantRole) },
    { no: 4, name: "joined", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "target_tenant_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "tenant_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "expires_at", kind: "message", T: Timestamp },
    { no: 11, name: "joined_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantInvite {
    return new TenantInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantInvite {
    return new TenantInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantInvite {
    return new TenantInvite().fromJsonString(jsonString, options);
  }

  static equals(a: TenantInvite | PlainMessage<TenantInvite> | undefined, b: TenantInvite | PlainMessage<TenantInvite> | undefined): boolean {
    return proto3.util.equals(TenantInvite, a, b);
  }
}

/**
 * PaymentDetails of a tenant
 *
 * @generated from message api.v1.PaymentDetails
 */
export class PaymentDetails extends Message<PaymentDetails> {
  /**
   * CustomerId at the payment processor
   *
   * @generated from field: string customer_id = 1;
   */
  customerId = "";

  /**
   * PaymentMethodId of the tenant at the payment processor
   *
   * @generated from field: optional string payment_method_id = 2;
   */
  paymentMethodId?: string;

  /**
   * SubscriptionId at the payment processor
   *
   * @generated from field: string subscription_id = 3;
   */
  subscriptionId = "";

  /**
   * Coupons a list of coupons the tenant has
   *
   * @generated from field: repeated api.v1.Coupon coupons = 4;
   */
  coupons: Coupon[] = [];

  /**
   * Vat which applies to this tenant
   *
   * @generated from field: string vat = 5;
   */
  vat = "";

  constructor(data?: PartialMessage<PaymentDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "payment_method_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "coupons", kind: "message", T: Coupon, repeated: true },
    { no: 5, name: "vat", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentDetails {
    return new PaymentDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentDetails {
    return new PaymentDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentDetails {
    return new PaymentDetails().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentDetails | PlainMessage<PaymentDetails> | undefined, b: PaymentDetails | PlainMessage<PaymentDetails> | undefined): boolean {
    return proto3.util.equals(PaymentDetails, a, b);
  }
}

/**
 * PaymentDetailsUpdate is used to update PaymentDetails
 *
 * @generated from message api.v1.PaymentDetailsUpdate
 */
export class PaymentDetailsUpdate extends Message<PaymentDetailsUpdate> {
  /**
   * CustomerId at the payment processor
   *
   * @generated from field: optional string customer_id = 1;
   */
  customerId?: string;

  /**
   * PaymentMethodId of the tenant at the payment processor
   *
   * @generated from field: optional string payment_method_id = 2;
   */
  paymentMethodId?: string;

  /**
   * SubscriptionId at the payment processor
   *
   * @generated from field: optional string subscription_id = 3;
   */
  subscriptionId?: string;

  /**
   * Vat which applies to this tenant
   *
   * @generated from field: optional string vat = 4;
   */
  vat?: string;

  constructor(data?: PartialMessage<PaymentDetailsUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentDetailsUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "payment_method_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "vat", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentDetailsUpdate {
    return new PaymentDetailsUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentDetailsUpdate {
    return new PaymentDetailsUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentDetailsUpdate {
    return new PaymentDetailsUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentDetailsUpdate | PlainMessage<PaymentDetailsUpdate> | undefined, b: PaymentDetailsUpdate | PlainMessage<PaymentDetailsUpdate> | undefined): boolean {
    return proto3.util.equals(PaymentDetailsUpdate, a, b);
  }
}

/**
 * TermsAndConditions the tenant accepted
 *
 * @generated from message api.v1.TermsAndConditions
 */
export class TermsAndConditions extends Message<TermsAndConditions> {
  /**
   * Accepted indicates if the tenant accepted the terms and conditions
   *
   * @generated from field: bool accepted = 1;
   */
  accepted = false;

  /**
   * When is the date when the tenant accepted the terms and conditions
   *
   * @generated from field: google.protobuf.Timestamp when = 2;
   */
  when?: Timestamp;

  constructor(data?: PartialMessage<TermsAndConditions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TermsAndConditions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accepted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "when", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TermsAndConditions {
    return new TermsAndConditions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TermsAndConditions {
    return new TermsAndConditions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TermsAndConditions {
    return new TermsAndConditions().fromJsonString(jsonString, options);
  }

  static equals(a: TermsAndConditions | PlainMessage<TermsAndConditions> | undefined, b: TermsAndConditions | PlainMessage<TermsAndConditions> | undefined): boolean {
    return proto3.util.equals(TermsAndConditions, a, b);
  }
}

/**
 * TermsAndConditionsUpdate
 *
 * @generated from message api.v1.TermsAndConditionsUpdate
 */
export class TermsAndConditionsUpdate extends Message<TermsAndConditionsUpdate> {
  /**
   * Accepted indicates if the tenant accepted the terms and conditions
   *
   * @generated from field: optional bool accepted = 1;
   */
  accepted?: boolean;

  /**
   * When is the date when the tenant accepted the terms and conditions
   *
   * @generated from field: optional google.protobuf.Timestamp when = 2;
   */
  when?: Timestamp;

  constructor(data?: PartialMessage<TermsAndConditionsUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TermsAndConditionsUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accepted", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "when", kind: "message", T: Timestamp, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TermsAndConditionsUpdate {
    return new TermsAndConditionsUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TermsAndConditionsUpdate {
    return new TermsAndConditionsUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TermsAndConditionsUpdate {
    return new TermsAndConditionsUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: TermsAndConditionsUpdate | PlainMessage<TermsAndConditionsUpdate> | undefined, b: TermsAndConditionsUpdate | PlainMessage<TermsAndConditionsUpdate> | undefined): boolean {
    return proto3.util.equals(TermsAndConditionsUpdate, a, b);
  }
}

/**
 * TenantServiceGetRequest is the request payload of the tenant get request
 *
 * @generated from message api.v1.TenantServiceGetRequest
 */
export class TenantServiceGetRequest extends Message<TenantServiceGetRequest> {
  /**
   * Login of the tenant
   *
   * @generated from field: string login = 1;
   */
  login = "";

  constructor(data?: PartialMessage<TenantServiceGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceGetRequest {
    return new TenantServiceGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceGetRequest {
    return new TenantServiceGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceGetRequest {
    return new TenantServiceGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceGetRequest | PlainMessage<TenantServiceGetRequest> | undefined, b: TenantServiceGetRequest | PlainMessage<TenantServiceGetRequest> | undefined): boolean {
    return proto3.util.equals(TenantServiceGetRequest, a, b);
  }
}

/**
 * TenantServiceCreateRequest is the request payload of the tenant create request
 *
 * @generated from message api.v1.TenantServiceCreateRequest
 */
export class TenantServiceCreateRequest extends Message<TenantServiceCreateRequest> {
  /**
   * Tenant the tenant to create
   *
   * @generated from field: api.v1.Tenant tenant = 1;
   */
  tenant?: Tenant;

  constructor(data?: PartialMessage<TenantServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "message", T: Tenant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceCreateRequest {
    return new TenantServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceCreateRequest {
    return new TenantServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceCreateRequest {
    return new TenantServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceCreateRequest | PlainMessage<TenantServiceCreateRequest> | undefined, b: TenantServiceCreateRequest | PlainMessage<TenantServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(TenantServiceCreateRequest, a, b);
  }
}

/**
 * TenantServiceCreateOrUpdateRequest is the request payload of the tenant create or update request
 *
 * @generated from message api.v1.TenantServiceCreateOrUpdateRequest
 */
export class TenantServiceCreateOrUpdateRequest extends Message<TenantServiceCreateOrUpdateRequest> {
  /**
   * Tenant the tenant to create or update
   *
   * @generated from field: api.v1.Tenant tenant = 1;
   */
  tenant?: Tenant;

  constructor(data?: PartialMessage<TenantServiceCreateOrUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceCreateOrUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "message", T: Tenant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceCreateOrUpdateRequest {
    return new TenantServiceCreateOrUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceCreateOrUpdateRequest {
    return new TenantServiceCreateOrUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceCreateOrUpdateRequest {
    return new TenantServiceCreateOrUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceCreateOrUpdateRequest | PlainMessage<TenantServiceCreateOrUpdateRequest> | undefined, b: TenantServiceCreateOrUpdateRequest | PlainMessage<TenantServiceCreateOrUpdateRequest> | undefined): boolean {
    return proto3.util.equals(TenantServiceCreateOrUpdateRequest, a, b);
  }
}

/**
 * TenantServiceUpdateRequest is the request payload of the tenant update request
 *
 * @generated from message api.v1.TenantServiceUpdateRequest
 */
export class TenantServiceUpdateRequest extends Message<TenantServiceUpdateRequest> {
  /**
   * Login of the tenant
   *
   * @generated from field: string login = 1;
   */
  login = "";

  /**
   * Name of the tenant
   *
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * Email of the tenant
   *
   * @generated from field: optional string email = 3;
   */
  email?: string;

  /**
   * AvatarUrl of the tenant
   *
   * @generated from field: optional string avatar_url = 5;
   */
  avatarUrl?: string;

  /**
   * PaymentDetails of the tenant
   *
   * @generated from field: optional api.v1.PaymentDetailsUpdate payment_details = 8;
   */
  paymentDetails?: PaymentDetailsUpdate;

  /**
   * TermsAndConditions of the tenant
   *
   * @generated from field: optional api.v1.TermsAndConditionsUpdate terms_and_conditions = 9;
   */
  termsAndConditions?: TermsAndConditionsUpdate;

  /**
   * Onboarded checks if the tenant was asked to be onboarded
   *
   * @generated from field: optional bool onboarded = 13;
   */
  onboarded?: boolean;

  constructor(data?: PartialMessage<TenantServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "payment_details", kind: "message", T: PaymentDetailsUpdate, opt: true },
    { no: 9, name: "terms_and_conditions", kind: "message", T: TermsAndConditionsUpdate, opt: true },
    { no: 13, name: "onboarded", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceUpdateRequest {
    return new TenantServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceUpdateRequest {
    return new TenantServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceUpdateRequest {
    return new TenantServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceUpdateRequest | PlainMessage<TenantServiceUpdateRequest> | undefined, b: TenantServiceUpdateRequest | PlainMessage<TenantServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(TenantServiceUpdateRequest, a, b);
  }
}

/**
 * TenantServiceDeleteRequest is the request payload of the tenant delete request
 *
 * @generated from message api.v1.TenantServiceDeleteRequest
 */
export class TenantServiceDeleteRequest extends Message<TenantServiceDeleteRequest> {
  /**
   * Login of the tenant
   *
   * @generated from field: string login = 1;
   */
  login = "";

  constructor(data?: PartialMessage<TenantServiceDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceDeleteRequest {
    return new TenantServiceDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceDeleteRequest {
    return new TenantServiceDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceDeleteRequest {
    return new TenantServiceDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceDeleteRequest | PlainMessage<TenantServiceDeleteRequest> | undefined, b: TenantServiceDeleteRequest | PlainMessage<TenantServiceDeleteRequest> | undefined): boolean {
    return proto3.util.equals(TenantServiceDeleteRequest, a, b);
  }
}

/**
 * TenantServiceGetResponse is the response payload of the tenant get request
 *
 * @generated from message api.v1.TenantServiceGetResponse
 */
export class TenantServiceGetResponse extends Message<TenantServiceGetResponse> {
  /**
   * Tenant is the tenant
   *
   * @generated from field: api.v1.Tenant tenant = 1;
   */
  tenant?: Tenant;

  constructor(data?: PartialMessage<TenantServiceGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "message", T: Tenant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceGetResponse {
    return new TenantServiceGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceGetResponse {
    return new TenantServiceGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceGetResponse {
    return new TenantServiceGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceGetResponse | PlainMessage<TenantServiceGetResponse> | undefined, b: TenantServiceGetResponse | PlainMessage<TenantServiceGetResponse> | undefined): boolean {
    return proto3.util.equals(TenantServiceGetResponse, a, b);
  }
}

/**
 * TenantServiceCreateResponse is the response payload of the tenant create request
 *
 * @generated from message api.v1.TenantServiceCreateResponse
 */
export class TenantServiceCreateResponse extends Message<TenantServiceCreateResponse> {
  /**
   * Tenant is the tenant
   *
   * @generated from field: api.v1.Tenant tenant = 1;
   */
  tenant?: Tenant;

  constructor(data?: PartialMessage<TenantServiceCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "message", T: Tenant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceCreateResponse {
    return new TenantServiceCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceCreateResponse {
    return new TenantServiceCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceCreateResponse {
    return new TenantServiceCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceCreateResponse | PlainMessage<TenantServiceCreateResponse> | undefined, b: TenantServiceCreateResponse | PlainMessage<TenantServiceCreateResponse> | undefined): boolean {
    return proto3.util.equals(TenantServiceCreateResponse, a, b);
  }
}

/**
 * TenantServiceCreateOrUpdateResponse is the response payload of the tenant create or update request
 *
 * @generated from message api.v1.TenantServiceCreateOrUpdateResponse
 */
export class TenantServiceCreateOrUpdateResponse extends Message<TenantServiceCreateOrUpdateResponse> {
  /**
   * Tenant is the tenant
   *
   * @generated from field: api.v1.Tenant tenant = 1;
   */
  tenant?: Tenant;

  constructor(data?: PartialMessage<TenantServiceCreateOrUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceCreateOrUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "message", T: Tenant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceCreateOrUpdateResponse {
    return new TenantServiceCreateOrUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceCreateOrUpdateResponse {
    return new TenantServiceCreateOrUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceCreateOrUpdateResponse {
    return new TenantServiceCreateOrUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceCreateOrUpdateResponse | PlainMessage<TenantServiceCreateOrUpdateResponse> | undefined, b: TenantServiceCreateOrUpdateResponse | PlainMessage<TenantServiceCreateOrUpdateResponse> | undefined): boolean {
    return proto3.util.equals(TenantServiceCreateOrUpdateResponse, a, b);
  }
}

/**
 * TenantServiceUpdateResponse is the response payload of the tenant update request
 *
 * @generated from message api.v1.TenantServiceUpdateResponse
 */
export class TenantServiceUpdateResponse extends Message<TenantServiceUpdateResponse> {
  /**
   * Tenant is the tenant
   *
   * @generated from field: api.v1.Tenant tenant = 1;
   */
  tenant?: Tenant;

  constructor(data?: PartialMessage<TenantServiceUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "message", T: Tenant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceUpdateResponse {
    return new TenantServiceUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceUpdateResponse {
    return new TenantServiceUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceUpdateResponse {
    return new TenantServiceUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceUpdateResponse | PlainMessage<TenantServiceUpdateResponse> | undefined, b: TenantServiceUpdateResponse | PlainMessage<TenantServiceUpdateResponse> | undefined): boolean {
    return proto3.util.equals(TenantServiceUpdateResponse, a, b);
  }
}

/**
 * TenantServiceDeleteResponse is the response payload of the tenant delete request
 *
 * @generated from message api.v1.TenantServiceDeleteResponse
 */
export class TenantServiceDeleteResponse extends Message<TenantServiceDeleteResponse> {
  /**
   * Tenant is the tenant
   *
   * @generated from field: api.v1.Tenant tenant = 1;
   */
  tenant?: Tenant;

  constructor(data?: PartialMessage<TenantServiceDeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceDeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "message", T: Tenant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceDeleteResponse {
    return new TenantServiceDeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceDeleteResponse {
    return new TenantServiceDeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceDeleteResponse {
    return new TenantServiceDeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceDeleteResponse | PlainMessage<TenantServiceDeleteResponse> | undefined, b: TenantServiceDeleteResponse | PlainMessage<TenantServiceDeleteResponse> | undefined): boolean {
    return proto3.util.equals(TenantServiceDeleteResponse, a, b);
  }
}

/**
 * TenantServiceInviteRequest is used to invite a member to a tenant
 *
 * @generated from message api.v1.TenantServiceInviteRequest
 */
export class TenantServiceInviteRequest extends Message<TenantServiceInviteRequest> {
  /**
   * Tenant is the uuid of the tenant
   *
   * @generated from field: string tenant = 1;
   */
  tenant = "";

  /**
   * Role of this user in this tenant
   *
   * @generated from field: api.v1.TenantRole role = 3;
   */
  role = TenantRole.UNSPECIFIED;

  constructor(data?: PartialMessage<TenantServiceInviteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceInviteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "enum", T: proto3.getEnumType(TenantRole) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceInviteRequest {
    return new TenantServiceInviteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceInviteRequest {
    return new TenantServiceInviteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceInviteRequest {
    return new TenantServiceInviteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceInviteRequest | PlainMessage<TenantServiceInviteRequest> | undefined, b: TenantServiceInviteRequest | PlainMessage<TenantServiceInviteRequest> | undefined): boolean {
    return proto3.util.equals(TenantServiceInviteRequest, a, b);
  }
}

/**
 * TenantServiceInviteRequest is the response payload to a invite member request
 *
 * @generated from message api.v1.TenantServiceInviteResponse
 */
export class TenantServiceInviteResponse extends Message<TenantServiceInviteResponse> {
  /**
   * Inviter contains a secret which can be sent to a potential user
   * can appended to the invitation endpoint at our api server like
   * console.metalstack.cloud/invite/<secret>
   *
   * @generated from field: api.v1.TenantInvite invite = 1;
   */
  invite?: TenantInvite;

  constructor(data?: PartialMessage<TenantServiceInviteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceInviteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invite", kind: "message", T: TenantInvite },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceInviteResponse {
    return new TenantServiceInviteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceInviteResponse {
    return new TenantServiceInviteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceInviteResponse {
    return new TenantServiceInviteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceInviteResponse | PlainMessage<TenantServiceInviteResponse> | undefined, b: TenantServiceInviteResponse | PlainMessage<TenantServiceInviteResponse> | undefined): boolean {
    return proto3.util.equals(TenantServiceInviteResponse, a, b);
  }
}

/**
 * TenantServiceInvitesListRequest is the request payload to a list invites request
 *
 * @generated from message api.v1.TenantServiceInvitesListRequest
 */
export class TenantServiceInvitesListRequest extends Message<TenantServiceInvitesListRequest> {
  /**
   * Tenant is the uuid of the tenant
   *
   * @generated from field: string tenant = 1;
   */
  tenant = "";

  constructor(data?: PartialMessage<TenantServiceInvitesListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceInvitesListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceInvitesListRequest {
    return new TenantServiceInvitesListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceInvitesListRequest {
    return new TenantServiceInvitesListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceInvitesListRequest {
    return new TenantServiceInvitesListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceInvitesListRequest | PlainMessage<TenantServiceInvitesListRequest> | undefined, b: TenantServiceInvitesListRequest | PlainMessage<TenantServiceInvitesListRequest> | undefined): boolean {
    return proto3.util.equals(TenantServiceInvitesListRequest, a, b);
  }
}

/**
 * TenantServiceInvitesListResponse is the response payload to a list invites request
 *
 * @generated from message api.v1.TenantServiceInvitesListResponse
 */
export class TenantServiceInvitesListResponse extends Message<TenantServiceInvitesListResponse> {
  /**
   * Invites not already accepted the invitation to this tenant
   *
   * @generated from field: repeated api.v1.TenantInvite invites = 1;
   */
  invites: TenantInvite[] = [];

  constructor(data?: PartialMessage<TenantServiceInvitesListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceInvitesListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invites", kind: "message", T: TenantInvite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceInvitesListResponse {
    return new TenantServiceInvitesListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceInvitesListResponse {
    return new TenantServiceInvitesListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceInvitesListResponse {
    return new TenantServiceInvitesListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceInvitesListResponse | PlainMessage<TenantServiceInvitesListResponse> | undefined, b: TenantServiceInvitesListResponse | PlainMessage<TenantServiceInvitesListResponse> | undefined): boolean {
    return proto3.util.equals(TenantServiceInvitesListResponse, a, b);
  }
}

/**
 * TenantServiceInviteGetRequest is the request payload to get a invite
 *
 * @generated from message api.v1.TenantServiceInviteGetRequest
 */
export class TenantServiceInviteGetRequest extends Message<TenantServiceInviteGetRequest> {
  /**
   * Secret of the invite to list
   *
   * @generated from field: string secret = 1;
   */
  secret = "";

  constructor(data?: PartialMessage<TenantServiceInviteGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceInviteGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceInviteGetRequest {
    return new TenantServiceInviteGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceInviteGetRequest {
    return new TenantServiceInviteGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceInviteGetRequest {
    return new TenantServiceInviteGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceInviteGetRequest | PlainMessage<TenantServiceInviteGetRequest> | undefined, b: TenantServiceInviteGetRequest | PlainMessage<TenantServiceInviteGetRequest> | undefined): boolean {
    return proto3.util.equals(TenantServiceInviteGetRequest, a, b);
  }
}

/**
 * TenantServiceInviteGetResponse is the response payload to a get invite request
 *
 * @generated from message api.v1.TenantServiceInviteGetResponse
 */
export class TenantServiceInviteGetResponse extends Message<TenantServiceInviteGetResponse> {
  /**
   * Invite is the invite
   *
   * @generated from field: api.v1.TenantInvite invite = 1;
   */
  invite?: TenantInvite;

  constructor(data?: PartialMessage<TenantServiceInviteGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceInviteGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invite", kind: "message", T: TenantInvite },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceInviteGetResponse {
    return new TenantServiceInviteGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceInviteGetResponse {
    return new TenantServiceInviteGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceInviteGetResponse {
    return new TenantServiceInviteGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceInviteGetResponse | PlainMessage<TenantServiceInviteGetResponse> | undefined, b: TenantServiceInviteGetResponse | PlainMessage<TenantServiceInviteGetResponse> | undefined): boolean {
    return proto3.util.equals(TenantServiceInviteGetResponse, a, b);
  }
}

/**
 * TenantServiceRemoveMemberRequest is used to remove a member from a tenant
 *
 * @generated from message api.v1.TenantServiceRemoveMemberRequest
 */
export class TenantServiceRemoveMemberRequest extends Message<TenantServiceRemoveMemberRequest> {
  /**
   * Tenant is the uuid of the tenant
   *
   * @generated from field: string tenant = 1;
   */
  tenant = "";

  /**
   * MemberID is the id of the member to remove from this tenant
   *
   * @generated from field: string member_id = 2;
   */
  memberId = "";

  constructor(data?: PartialMessage<TenantServiceRemoveMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceRemoveMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "member_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceRemoveMemberRequest {
    return new TenantServiceRemoveMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceRemoveMemberRequest {
    return new TenantServiceRemoveMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceRemoveMemberRequest {
    return new TenantServiceRemoveMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceRemoveMemberRequest | PlainMessage<TenantServiceRemoveMemberRequest> | undefined, b: TenantServiceRemoveMemberRequest | PlainMessage<TenantServiceRemoveMemberRequest> | undefined): boolean {
    return proto3.util.equals(TenantServiceRemoveMemberRequest, a, b);
  }
}

/**
 * TenantServiceRemoveMemberResponse is the response payload to a remove member request
 *
 * @generated from message api.v1.TenantServiceRemoveMemberResponse
 */
export class TenantServiceRemoveMemberResponse extends Message<TenantServiceRemoveMemberResponse> {
  constructor(data?: PartialMessage<TenantServiceRemoveMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceRemoveMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceRemoveMemberResponse {
    return new TenantServiceRemoveMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceRemoveMemberResponse {
    return new TenantServiceRemoveMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceRemoveMemberResponse {
    return new TenantServiceRemoveMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceRemoveMemberResponse | PlainMessage<TenantServiceRemoveMemberResponse> | undefined, b: TenantServiceRemoveMemberResponse | PlainMessage<TenantServiceRemoveMemberResponse> | undefined): boolean {
    return proto3.util.equals(TenantServiceRemoveMemberResponse, a, b);
  }
}

/**
 * TenantServiceInviteAcceptRequest is the request payload to a accept invite request
 *
 * @generated from message api.v1.TenantServiceInviteAcceptRequest
 */
export class TenantServiceInviteAcceptRequest extends Message<TenantServiceInviteAcceptRequest> {
  /**
   * Secret is the invitation secret part of the invitation url
   *
   * @generated from field: string secret = 1;
   */
  secret = "";

  constructor(data?: PartialMessage<TenantServiceInviteAcceptRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceInviteAcceptRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceInviteAcceptRequest {
    return new TenantServiceInviteAcceptRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceInviteAcceptRequest {
    return new TenantServiceInviteAcceptRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceInviteAcceptRequest {
    return new TenantServiceInviteAcceptRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceInviteAcceptRequest | PlainMessage<TenantServiceInviteAcceptRequest> | undefined, b: TenantServiceInviteAcceptRequest | PlainMessage<TenantServiceInviteAcceptRequest> | undefined): boolean {
    return proto3.util.equals(TenantServiceInviteAcceptRequest, a, b);
  }
}

/**
 * TenantServiceInvitesListResponse is the response payload to a accept invite request
 *
 * @generated from message api.v1.TenantServiceInviteAcceptResponse
 */
export class TenantServiceInviteAcceptResponse extends Message<TenantServiceInviteAcceptResponse> {
  /**
   * Tenant ID of the tenant joined
   *
   * @generated from field: string tenant = 1;
   */
  tenant = "";

  /**
   * TenantName if the tenant joined
   *
   * @generated from field: string tenant_name = 2;
   */
  tenantName = "";

  constructor(data?: PartialMessage<TenantServiceInviteAcceptResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceInviteAcceptResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tenant_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceInviteAcceptResponse {
    return new TenantServiceInviteAcceptResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceInviteAcceptResponse {
    return new TenantServiceInviteAcceptResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceInviteAcceptResponse {
    return new TenantServiceInviteAcceptResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceInviteAcceptResponse | PlainMessage<TenantServiceInviteAcceptResponse> | undefined, b: TenantServiceInviteAcceptResponse | PlainMessage<TenantServiceInviteAcceptResponse> | undefined): boolean {
    return proto3.util.equals(TenantServiceInviteAcceptResponse, a, b);
  }
}

/**
 * TenantServiceInviteDeleteRequest is the request payload to a delete invite
 *
 * @generated from message api.v1.TenantServiceInviteDeleteRequest
 */
export class TenantServiceInviteDeleteRequest extends Message<TenantServiceInviteDeleteRequest> {
  /**
   * Tenant is the uuid of the tenant
   *
   * @generated from field: string tenant = 1;
   */
  tenant = "";

  /**
   * Secret of the invite to delete
   *
   * @generated from field: string secret = 2;
   */
  secret = "";

  constructor(data?: PartialMessage<TenantServiceInviteDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceInviteDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceInviteDeleteRequest {
    return new TenantServiceInviteDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceInviteDeleteRequest {
    return new TenantServiceInviteDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceInviteDeleteRequest {
    return new TenantServiceInviteDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceInviteDeleteRequest | PlainMessage<TenantServiceInviteDeleteRequest> | undefined, b: TenantServiceInviteDeleteRequest | PlainMessage<TenantServiceInviteDeleteRequest> | undefined): boolean {
    return proto3.util.equals(TenantServiceInviteDeleteRequest, a, b);
  }
}

/**
 * TenantServiceInviteDeleteResponse is the response payload of a delete invite request
 *
 * @generated from message api.v1.TenantServiceInviteDeleteResponse
 */
export class TenantServiceInviteDeleteResponse extends Message<TenantServiceInviteDeleteResponse> {
  constructor(data?: PartialMessage<TenantServiceInviteDeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TenantServiceInviteDeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantServiceInviteDeleteResponse {
    return new TenantServiceInviteDeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantServiceInviteDeleteResponse {
    return new TenantServiceInviteDeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantServiceInviteDeleteResponse {
    return new TenantServiceInviteDeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TenantServiceInviteDeleteResponse | PlainMessage<TenantServiceInviteDeleteResponse> | undefined, b: TenantServiceInviteDeleteResponse | PlainMessage<TenantServiceInviteDeleteResponse> | undefined): boolean {
    return proto3.util.equals(TenantServiceInviteDeleteResponse, a, b);
  }
}

