// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api/v1/health.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * ServiceStatus defines the status of a service
 *
 * @generated from enum api.v1.ServiceStatus
 */
export enum ServiceStatus {
  /**
   * SERVICE_STATUS_UNSPECIFIED service status is not known or unspecified
   *
   * @generated from enum value: SERVICE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * SERVICE_STATUS_DEGRADED the service is in degraded status, not the whole functionality is available
   *
   * @generated from enum value: SERVICE_STATUS_DEGRADED = 1;
   */
  DEGRADED = 1,

  /**
   * SERVICE_STATUS_UNHEALTHY the service is in unhealthy status, serious impact is expected
   *
   * @generated from enum value: SERVICE_STATUS_UNHEALTHY = 2;
   */
  UNHEALTHY = 2,

  /**
   * SERVICE_STATUS_HEALTHY the service is in healthy status e.g. fully functional
   *
   * @generated from enum value: SERVICE_STATUS_HEALTHY = 3;
   */
  HEALTHY = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ServiceStatus)
proto3.util.setEnumType(ServiceStatus, "api.v1.ServiceStatus", [
  { no: 0, name: "SERVICE_STATUS_UNSPECIFIED" },
  { no: 1, name: "SERVICE_STATUS_DEGRADED" },
  { no: 2, name: "SERVICE_STATUS_UNHEALTHY" },
  { no: 3, name: "SERVICE_STATUS_HEALTHY" },
]);

/**
 * Service defines the service for which the healtyness is reported
 *
 * @generated from enum api.v1.Service
 */
export enum Service {
  /**
   * SERVICE_UNSPECIFIED is a unknown service
   *
   * @generated from enum value: SERVICE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * SERVICE_CLUSTER the kubernetes cluster service
   *
   * @generated from enum value: SERVICE_CLUSTER = 1;
   */
  CLUSTER = 1,

  /**
   * SERVICE_VOLUME the volume/storage service
   *
   * @generated from enum value: SERVICE_VOLUME = 2;
   */
  VOLUME = 2,

  /**
   * SERVICE_MACHINES the machine service
   *
   * @generated from enum value: SERVICE_MACHINES = 3;
   */
  MACHINES = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Service)
proto3.util.setEnumType(Service, "api.v1.Service", [
  { no: 0, name: "SERVICE_UNSPECIFIED" },
  { no: 1, name: "SERVICE_CLUSTER" },
  { no: 2, name: "SERVICE_VOLUME" },
  { no: 3, name: "SERVICE_MACHINES" },
]);

/**
 * Health reports the health status of all services
 *
 * @generated from message api.v1.Health
 */
export class Health extends Message<Health> {
  /**
   * Services the health of all individual services
   *
   * @generated from field: repeated api.v1.HealthStatus services = 1;
   */
  services: HealthStatus[] = [];

  constructor(data?: PartialMessage<Health>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Health";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: HealthStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Health {
    return new Health().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Health {
    return new Health().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Health {
    return new Health().fromJsonString(jsonString, options);
  }

  static equals(a: Health | PlainMessage<Health> | undefined, b: Health | PlainMessage<Health> | undefined): boolean {
    return proto3.util.equals(Health, a, b);
  }
}

/**
 * HealthStatus the health of one service
 *
 * @generated from message api.v1.HealthStatus
 */
export class HealthStatus extends Message<HealthStatus> {
  /**
   * Name the name of the service
   *
   * @generated from field: api.v1.Service name = 1;
   */
  name = Service.UNSPECIFIED;

  /**
   * Status the status of this service
   *
   * @generated from field: api.v1.ServiceStatus status = 2;
   */
  status = ServiceStatus.UNSPECIFIED;

  /**
   * Message describes the reason for the unhealthy status if possible
   *
   * @generated from field: string message = 3;
   */
  message = "";

  /**
   * Partitions describes the health of the service by partition
   *
   * @generated from field: map<string, api.v1.PartitionHealth> partitions = 4;
   */
  partitions: { [key: string]: PartitionHealth } = {};

  constructor(data?: PartialMessage<HealthStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.HealthStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "enum", T: proto3.getEnumType(Service) },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(ServiceStatus) },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "partitions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: PartitionHealth} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthStatus {
    return new HealthStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthStatus {
    return new HealthStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthStatus {
    return new HealthStatus().fromJsonString(jsonString, options);
  }

  static equals(a: HealthStatus | PlainMessage<HealthStatus> | undefined, b: HealthStatus | PlainMessage<HealthStatus> | undefined): boolean {
    return proto3.util.equals(HealthStatus, a, b);
  }
}

/**
 * PartitionHealth the status of a specific service in this partition
 *
 * @generated from message api.v1.PartitionHealth
 */
export class PartitionHealth extends Message<PartitionHealth> {
  /**
   * Status the health status of the service in this partition
   *
   * @generated from field: api.v1.ServiceStatus status = 1;
   */
  status = ServiceStatus.UNSPECIFIED;

  /**
   * Message describes the reason for the unhealthy status if possible
   *
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<PartitionHealth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PartitionHealth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(ServiceStatus) },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PartitionHealth {
    return new PartitionHealth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PartitionHealth {
    return new PartitionHealth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PartitionHealth {
    return new PartitionHealth().fromJsonString(jsonString, options);
  }

  static equals(a: PartitionHealth | PlainMessage<PartitionHealth> | undefined, b: PartitionHealth | PlainMessage<PartitionHealth> | undefined): boolean {
    return proto3.util.equals(PartitionHealth, a, b);
  }
}

/**
 * HealthServiceGetRequest is request payload to get the health of the system
 *
 * @generated from message api.v1.HealthServiceGetRequest
 */
export class HealthServiceGetRequest extends Message<HealthServiceGetRequest> {
  constructor(data?: PartialMessage<HealthServiceGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.HealthServiceGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthServiceGetRequest {
    return new HealthServiceGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthServiceGetRequest {
    return new HealthServiceGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthServiceGetRequest {
    return new HealthServiceGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HealthServiceGetRequest | PlainMessage<HealthServiceGetRequest> | undefined, b: HealthServiceGetRequest | PlainMessage<HealthServiceGetRequest> | undefined): boolean {
    return proto3.util.equals(HealthServiceGetRequest, a, b);
  }
}

/**
 * HealthServiceGetRequest is the response payload with the health of the system
 *
 * @generated from message api.v1.HealthServiceGetResponse
 */
export class HealthServiceGetResponse extends Message<HealthServiceGetResponse> {
  /**
   * Health is the overall health of the system
   *
   * @generated from field: api.v1.Health health = 1;
   */
  health?: Health;

  constructor(data?: PartialMessage<HealthServiceGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.HealthServiceGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "health", kind: "message", T: Health },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthServiceGetResponse {
    return new HealthServiceGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthServiceGetResponse {
    return new HealthServiceGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthServiceGetResponse {
    return new HealthServiceGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HealthServiceGetResponse | PlainMessage<HealthServiceGetResponse> | undefined, b: HealthServiceGetResponse | PlainMessage<HealthServiceGetResponse> | undefined): boolean {
    return proto3.util.equals(HealthServiceGetResponse, a, b);
  }
}

