// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file api/v1/ip.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * Types
 *
 * @generated from message api.v1.IP
 */
export class IP extends Message<IP> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * @generated from field: string ip = 2;
   */
  ip = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * @generated from field: string network = 5;
   */
  network = "";

  /**
   * @generated from field: string project = 6;
   */
  project = "";

  /**
   * @generated from field: string type = 7;
   */
  type = "";

  /**
   * @generated from field: repeated string tags = 8;
   */
  tags: string[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 10;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 11;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp deleted_at = 12;
   */
  deletedAt?: Timestamp;

  constructor(data?: PartialMessage<IP>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.v1.IP";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "created_at", kind: "message", T: Timestamp },
    { no: 11, name: "updated_at", kind: "message", T: Timestamp },
    { no: 12, name: "deleted_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IP {
    return new IP().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IP {
    return new IP().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IP {
    return new IP().fromJsonString(jsonString, options);
  }

  static equals(a: IP | PlainMessage<IP> | undefined, b: IP | PlainMessage<IP> | undefined): boolean {
    return proto3.util.equals(IP, a, b);
  }
}

/**
 * Requests
 *
 * @generated from message api.v1.IPServiceGetRequest
 */
export class IPServiceGetRequest extends Message<IPServiceGetRequest> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<IPServiceGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.v1.IPServiceGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IPServiceGetRequest {
    return new IPServiceGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IPServiceGetRequest {
    return new IPServiceGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IPServiceGetRequest {
    return new IPServiceGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IPServiceGetRequest | PlainMessage<IPServiceGetRequest> | undefined, b: IPServiceGetRequest | PlainMessage<IPServiceGetRequest> | undefined): boolean {
    return proto3.util.equals(IPServiceGetRequest, a, b);
  }
}

/**
 * @generated from message api.v1.IPServiceAllocateRequest
 */
export class IPServiceAllocateRequest extends Message<IPServiceAllocateRequest> {
  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * @generated from field: string network = 5;
   */
  network = "";

  /**
   * @generated from field: repeated string tags = 8;
   */
  tags: string[] = [];

  /**
   * @generated from field: bool static = 9;
   */
  static = false;

  constructor(data?: PartialMessage<IPServiceAllocateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.v1.IPServiceAllocateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "static", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IPServiceAllocateRequest {
    return new IPServiceAllocateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IPServiceAllocateRequest {
    return new IPServiceAllocateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IPServiceAllocateRequest {
    return new IPServiceAllocateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IPServiceAllocateRequest | PlainMessage<IPServiceAllocateRequest> | undefined, b: IPServiceAllocateRequest | PlainMessage<IPServiceAllocateRequest> | undefined): boolean {
    return proto3.util.equals(IPServiceAllocateRequest, a, b);
  }
}

/**
 * @generated from message api.v1.IPServiceStaticRequest
 * @deprecated
 */
export class IPServiceStaticRequest extends Message<IPServiceStaticRequest> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<IPServiceStaticRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.v1.IPServiceStaticRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IPServiceStaticRequest {
    return new IPServiceStaticRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IPServiceStaticRequest {
    return new IPServiceStaticRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IPServiceStaticRequest {
    return new IPServiceStaticRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IPServiceStaticRequest | PlainMessage<IPServiceStaticRequest> | undefined, b: IPServiceStaticRequest | PlainMessage<IPServiceStaticRequest> | undefined): boolean {
    return proto3.util.equals(IPServiceStaticRequest, a, b);
  }
}

/**
 * @generated from message api.v1.IPServiceUpdateRequest
 */
export class IPServiceUpdateRequest extends Message<IPServiceUpdateRequest> {
  /**
   * @generated from field: api.v1.IP ip = 1;
   */
  ip?: IP;

  constructor(data?: PartialMessage<IPServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.v1.IPServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ip", kind: "message", T: IP },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IPServiceUpdateRequest {
    return new IPServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IPServiceUpdateRequest {
    return new IPServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IPServiceUpdateRequest {
    return new IPServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IPServiceUpdateRequest | PlainMessage<IPServiceUpdateRequest> | undefined, b: IPServiceUpdateRequest | PlainMessage<IPServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(IPServiceUpdateRequest, a, b);
  }
}

/**
 * @generated from message api.v1.IPServiceListRequest
 */
export class IPServiceListRequest extends Message<IPServiceListRequest> {
  /**
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<IPServiceListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.v1.IPServiceListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IPServiceListRequest {
    return new IPServiceListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IPServiceListRequest {
    return new IPServiceListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IPServiceListRequest {
    return new IPServiceListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IPServiceListRequest | PlainMessage<IPServiceListRequest> | undefined, b: IPServiceListRequest | PlainMessage<IPServiceListRequest> | undefined): boolean {
    return proto3.util.equals(IPServiceListRequest, a, b);
  }
}

/**
 * @generated from message api.v1.IPServiceDeleteRequest
 */
export class IPServiceDeleteRequest extends Message<IPServiceDeleteRequest> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<IPServiceDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.v1.IPServiceDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IPServiceDeleteRequest {
    return new IPServiceDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IPServiceDeleteRequest {
    return new IPServiceDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IPServiceDeleteRequest {
    return new IPServiceDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IPServiceDeleteRequest | PlainMessage<IPServiceDeleteRequest> | undefined, b: IPServiceDeleteRequest | PlainMessage<IPServiceDeleteRequest> | undefined): boolean {
    return proto3.util.equals(IPServiceDeleteRequest, a, b);
  }
}

/**
 * Responses
 *
 * @generated from message api.v1.IPServiceGetResponse
 */
export class IPServiceGetResponse extends Message<IPServiceGetResponse> {
  /**
   * @generated from field: api.v1.IP ip = 1;
   */
  ip?: IP;

  constructor(data?: PartialMessage<IPServiceGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.v1.IPServiceGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ip", kind: "message", T: IP },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IPServiceGetResponse {
    return new IPServiceGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IPServiceGetResponse {
    return new IPServiceGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IPServiceGetResponse {
    return new IPServiceGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IPServiceGetResponse | PlainMessage<IPServiceGetResponse> | undefined, b: IPServiceGetResponse | PlainMessage<IPServiceGetResponse> | undefined): boolean {
    return proto3.util.equals(IPServiceGetResponse, a, b);
  }
}

/**
 * @generated from message api.v1.IPServiceUpdateResponse
 */
export class IPServiceUpdateResponse extends Message<IPServiceUpdateResponse> {
  /**
   * @generated from field: api.v1.IP ip = 1;
   */
  ip?: IP;

  constructor(data?: PartialMessage<IPServiceUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.v1.IPServiceUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ip", kind: "message", T: IP },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IPServiceUpdateResponse {
    return new IPServiceUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IPServiceUpdateResponse {
    return new IPServiceUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IPServiceUpdateResponse {
    return new IPServiceUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IPServiceUpdateResponse | PlainMessage<IPServiceUpdateResponse> | undefined, b: IPServiceUpdateResponse | PlainMessage<IPServiceUpdateResponse> | undefined): boolean {
    return proto3.util.equals(IPServiceUpdateResponse, a, b);
  }
}

/**
 * @generated from message api.v1.IPServiceAllocateResponse
 */
export class IPServiceAllocateResponse extends Message<IPServiceAllocateResponse> {
  /**
   * @generated from field: api.v1.IP ip = 1;
   */
  ip?: IP;

  constructor(data?: PartialMessage<IPServiceAllocateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.v1.IPServiceAllocateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ip", kind: "message", T: IP },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IPServiceAllocateResponse {
    return new IPServiceAllocateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IPServiceAllocateResponse {
    return new IPServiceAllocateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IPServiceAllocateResponse {
    return new IPServiceAllocateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IPServiceAllocateResponse | PlainMessage<IPServiceAllocateResponse> | undefined, b: IPServiceAllocateResponse | PlainMessage<IPServiceAllocateResponse> | undefined): boolean {
    return proto3.util.equals(IPServiceAllocateResponse, a, b);
  }
}

/**
 * @generated from message api.v1.IPServiceStaticResponse
 */
export class IPServiceStaticResponse extends Message<IPServiceStaticResponse> {
  /**
   * @generated from field: api.v1.IP ip = 1;
   */
  ip?: IP;

  constructor(data?: PartialMessage<IPServiceStaticResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.v1.IPServiceStaticResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ip", kind: "message", T: IP },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IPServiceStaticResponse {
    return new IPServiceStaticResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IPServiceStaticResponse {
    return new IPServiceStaticResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IPServiceStaticResponse {
    return new IPServiceStaticResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IPServiceStaticResponse | PlainMessage<IPServiceStaticResponse> | undefined, b: IPServiceStaticResponse | PlainMessage<IPServiceStaticResponse> | undefined): boolean {
    return proto3.util.equals(IPServiceStaticResponse, a, b);
  }
}

/**
 * @generated from message api.v1.IPServiceListResponse
 */
export class IPServiceListResponse extends Message<IPServiceListResponse> {
  /**
   * @generated from field: repeated api.v1.IP ips = 1;
   */
  ips: IP[] = [];

  constructor(data?: PartialMessage<IPServiceListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.v1.IPServiceListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ips", kind: "message", T: IP, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IPServiceListResponse {
    return new IPServiceListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IPServiceListResponse {
    return new IPServiceListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IPServiceListResponse {
    return new IPServiceListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IPServiceListResponse | PlainMessage<IPServiceListResponse> | undefined, b: IPServiceListResponse | PlainMessage<IPServiceListResponse> | undefined): boolean {
    return proto3.util.equals(IPServiceListResponse, a, b);
  }
}

/**
 * @generated from message api.v1.IPServiceDeleteResponse
 */
export class IPServiceDeleteResponse extends Message<IPServiceDeleteResponse> {
  /**
   * @generated from field: api.v1.IP ip = 1;
   */
  ip?: IP;

  constructor(data?: PartialMessage<IPServiceDeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.v1.IPServiceDeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ip", kind: "message", T: IP },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IPServiceDeleteResponse {
    return new IPServiceDeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IPServiceDeleteResponse {
    return new IPServiceDeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IPServiceDeleteResponse {
    return new IPServiceDeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IPServiceDeleteResponse | PlainMessage<IPServiceDeleteResponse> | undefined, b: IPServiceDeleteResponse | PlainMessage<IPServiceDeleteResponse> | undefined): boolean {
    return proto3.util.equals(IPServiceDeleteResponse, a, b);
  }
}

