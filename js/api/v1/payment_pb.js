// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file api/v1/payment.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
/**
 * ProductType defines for which type of product a price applies
 *
 * @generated from enum api.v1.ProductType
 */
export var ProductType;
(function (ProductType) {
    /**
     * PRODUCT_TYPE_UNSPECIFIED is unspecified
     *
     * @generated from enum value: PRODUCT_TYPE_UNSPECIFIED = 0;
     */
    ProductType[ProductType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * PRODUCT_TYPE_STORAGE for storage
     *
     * @generated from enum value: PRODUCT_TYPE_STORAGE = 1;
     */
    ProductType[ProductType["STORAGE"] = 1] = "STORAGE";
    /**
     * PRODUCT_TYPE_COMPUTE for compute, e.g. machines
     *
     * @generated from enum value: PRODUCT_TYPE_COMPUTE = 2;
     */
    ProductType[ProductType["COMPUTE"] = 2] = "COMPUTE";
    /**
     * PRODUCT_TYPE_NETWORK for network, e.g. ips and traffic
     *
     * @generated from enum value: PRODUCT_TYPE_NETWORK = 3;
     */
    ProductType[ProductType["NETWORK"] = 3] = "NETWORK";
    /**
     * PRODUCT_TYPE_KUBERNETES for kubernetes, e.g. the control plane
     *
     * @generated from enum value: PRODUCT_TYPE_KUBERNETES = 5;
     */
    ProductType[ProductType["KUBERNETES"] = 5] = "KUBERNETES";
})(ProductType || (ProductType = {}));
// Retrieve enum metadata with: proto3.getEnumType(ProductType)
proto3.util.setEnumType(ProductType, "api.v1.ProductType", [
    { no: 0, name: "PRODUCT_TYPE_UNSPECIFIED" },
    { no: 1, name: "PRODUCT_TYPE_STORAGE" },
    { no: 2, name: "PRODUCT_TYPE_COMPUTE" },
    { no: 3, name: "PRODUCT_TYPE_NETWORK" },
    { no: 5, name: "PRODUCT_TYPE_KUBERNETES" },
]);
/**
 * PaymentCustomer is a customer at the payment processor
 *
 * @generated from message api.v1.PaymentCustomer
 */
export class PaymentCustomer extends Message {
    constructor(data) {
        super();
        /**
         * Login of the customer
         *
         * @generated from field: string login = 1;
         */
        this.login = "";
        /**
         * SubscriptionId of the customer
         *
         * @generated from field: string subscription_id = 5;
         */
        this.subscriptionId = "";
        /**
         * Prices which apply to customer resources
         *
         * @generated from field: repeated api.v1.Price prices = 8;
         */
        this.prices = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentCustomer().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentCustomer().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentCustomer().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentCustomer, a, b);
    }
}
PaymentCustomer.runtime = proto3;
PaymentCustomer.typeName = "api.v1.PaymentCustomer";
PaymentCustomer.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "payment_method_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "card", kind: "message", T: Card, opt: true },
    { no: 8, name: "prices", kind: "message", T: Price, repeated: true },
    { no: 9, name: "address", kind: "message", T: Address },
    { no: 10, name: "coupon", kind: "message", T: Coupon, opt: true },
    { no: 11, name: "vat", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 12, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 13, name: "balance", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 14, name: "pay_per_invoice", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
]);
/**
 * Card is the payment card the customer pays with
 *
 * @generated from message api.v1.Card
 */
export class Card extends Message {
    constructor(data) {
        super();
        /**
         * Brand of the card
         *
         * @generated from field: string brand = 1;
         */
        this.brand = "";
        /**
         * Country where the card was issued
         *
         * @generated from field: string country = 2;
         */
        this.country = "";
        /**
         * ExpMonth is the month when this card expires
         *
         * @generated from field: int64 exp_month = 3;
         */
        this.expMonth = protoInt64.zero;
        /**
         * ExpYear is the year when this card expires
         *
         * @generated from field: int64 exp_year = 4;
         */
        this.expYear = protoInt64.zero;
        /**
         * Last4 are the 4 last digits of the card number, the full number is not stored anywhere
         *
         * @generated from field: string last_4 = 5;
         */
        this.last4 = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Card().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Card().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Card().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Card, a, b);
    }
}
Card.runtime = proto3;
Card.typeName = "api.v1.Card";
Card.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "brand", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "exp_month", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "exp_year", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "last_4", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Price of a product
 *
 * @generated from message api.v1.Price
 */
export class Price extends Message {
    constructor(data) {
        super();
        /**
         * Name of the price
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * UnitAmountDecimal the value of this price
         *
         * @generated from field: double unit_amount_decimal = 2;
         */
        this.unitAmountDecimal = 0;
        /**
         * Currency of this price
         *
         * @generated from field: string currency = 3;
         */
        this.currency = "";
        /**
         * UnitLabel is a label which allows for searching this unit at the payment processor
         *
         * @generated from field: string unit_label = 4;
         */
        this.unitLabel = "";
        /**
         * ProductType this price applies to
         *
         * @generated from field: api.v1.ProductType product_type = 5;
         */
        this.productType = ProductType.UNSPECIFIED;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Price().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Price().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Price().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Price, a, b);
    }
}
Price.runtime = proto3;
Price.typeName = "api.v1.Price";
Price.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "unit_amount_decimal", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unit_label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "product_type", kind: "enum", T: proto3.getEnumType(ProductType) },
    { no: 6, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * Address postal address of a customer
 *
 * @generated from message api.v1.Address
 */
export class Address extends Message {
    constructor(data) {
        super();
        /**
         * Line1 the first address line
         *
         * @generated from field: string line1 = 1;
         */
        this.line1 = "";
        /**
         * Line2 the second address line
         *
         * @generated from field: string line2 = 2;
         */
        this.line2 = "";
        /**
         * PostalCode of the city or address
         *
         * @generated from field: string postal_code = 3;
         */
        this.postalCode = "";
        /**
         * City where the customer lives
         *
         * @generated from field: string city = 4;
         */
        this.city = "";
        /**
         * Sate where the customer lives
         *
         * @generated from field: string state = 5;
         */
        this.state = "";
        /**
         * Country where the customer lives
         *
         * @generated from field: string country = 6;
         */
        this.country = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Address().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Address().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Address().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Address, a, b);
    }
}
Address.runtime = proto3;
Address.typeName = "api.v1.Address";
Address.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "line1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "line2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "postal_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * SubscriptionUsageItem details of a subscription
 *
 * @generated from message api.v1.SubscriptionUsageItem
 */
export class SubscriptionUsageItem extends Message {
    constructor(data) {
        super();
        /**
         * SubscriptionItemId is the id of the subscription
         *
         * @generated from field: string subscription_item_id = 1;
         */
        this.subscriptionItemId = "";
        /**
         * SubscriptionItemName is the name of the subscription
         *
         * @generated from field: string subscription_item_name = 2;
         */
        this.subscriptionItemName = "";
        /**
         * TotalUsage of this subscription
         *
         * @generated from field: int64 total_usage = 3;
         */
        this.totalUsage = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SubscriptionUsageItem().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SubscriptionUsageItem().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SubscriptionUsageItem().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SubscriptionUsageItem, a, b);
    }
}
SubscriptionUsageItem.runtime = proto3;
SubscriptionUsageItem.typeName = "api.v1.SubscriptionUsageItem";
SubscriptionUsageItem.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription_item_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subscription_item_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "total_usage", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "period_start", kind: "message", T: Timestamp },
    { no: 5, name: "period_end", kind: "message", T: Timestamp },
]);
/**
 * Invoice a customer has to pay for subscription usage
 *
 * @generated from message api.v1.Invoice
 */
export class Invoice extends Message {
    constructor(data) {
        super();
        /**
         * Id of the invoice
         *
         * @generated from field: string id = 1;
         */
        this.id = "";
        /**
         * PdfDownloadUrl is the url where the customer can download this invoice in pdf format
         *
         * @generated from field: string pdf_download_url = 2;
         */
        this.pdfDownloadUrl = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Invoice().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Invoice().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Invoice().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Invoice, a, b);
    }
}
Invoice.runtime = proto3;
Invoice.typeName = "api.v1.Invoice";
Invoice.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pdf_download_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "period_start", kind: "message", T: Timestamp },
    { no: 5, name: "period_end", kind: "message", T: Timestamp },
]);
/**
 * Coupon is a amount of free usage which can be granted to a customer
 *
 * @generated from message api.v1.Coupon
 */
export class Coupon extends Message {
    constructor(data) {
        super();
        /**
         * Id of the coupon
         *
         * @generated from field: string id = 1;
         */
        this.id = "";
        /**
         * Name of this coupon
         *
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * AmountOff is th amount the customer can use for free
         *
         * @generated from field: int64 amount_off = 3;
         */
        this.amountOff = protoInt64.zero;
        /**
         * Currency of the free usage amount
         *
         * @generated from field: string currency = 4;
         */
        this.currency = "";
        /**
         * DurationInMonth defines how many month this coupon is valid for
         *
         * @generated from field: int64 duration_in_month = 5;
         */
        this.durationInMonth = protoInt64.zero;
        /**
         * TimesRedeemed how often this coupon was already consumed
         *
         * @generated from field: int64 times_redeemed = 8;
         */
        this.timesRedeemed = protoInt64.zero;
        /**
         * MaxRedemptions defines how often this coupon can be consumed
         *
         * @generated from field: int64 max_redemptions = 9;
         */
        this.maxRedemptions = protoInt64.zero;
        /**
         * AmountLeft how many usages are left for this coupon
         *
         * @generated from field: int64 amount_left = 10;
         */
        this.amountLeft = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Coupon().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Coupon().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Coupon().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Coupon, a, b);
    }
}
Coupon.runtime = proto3;
Coupon.typeName = "api.v1.Coupon";
Coupon.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "duration_in_month", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "created_at", kind: "message", T: Timestamp },
    { no: 7, name: "redeem_by", kind: "message", T: Timestamp },
    { no: 8, name: "times_redeemed", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "max_redemptions", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "amount_left", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * PaymentServiceCreateOrUpdateCustomerRequest is the request payload for a payment create or update customer request
 *
 * @generated from message api.v1.PaymentServiceCreateOrUpdateCustomerRequest
 */
export class PaymentServiceCreateOrUpdateCustomerRequest extends Message {
    constructor(data) {
        super();
        /**
         * Login of the customer
         *
         * @generated from field: string login = 1;
         */
        this.login = "";
        /**
         * AcceptedTermsAndConditions indicates the modification of the terms and conditions acceptance
         *
         * @generated from field: bool accepted_terms_and_conditions = 3;
         */
        this.acceptedTermsAndConditions = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceCreateOrUpdateCustomerRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceCreateOrUpdateCustomerRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceCreateOrUpdateCustomerRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceCreateOrUpdateCustomerRequest, a, b);
    }
}
PaymentServiceCreateOrUpdateCustomerRequest.runtime = proto3;
PaymentServiceCreateOrUpdateCustomerRequest.typeName = "api.v1.PaymentServiceCreateOrUpdateCustomerRequest";
PaymentServiceCreateOrUpdateCustomerRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer", kind: "message", T: PaymentCustomer },
    { no: 3, name: "accepted_terms_and_conditions", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * PaymentServiceCreateOrUpdateCustomerResponse is the response payload for a payment create or update customer request
 *
 * @generated from message api.v1.PaymentServiceCreateOrUpdateCustomerResponse
 */
export class PaymentServiceCreateOrUpdateCustomerResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceCreateOrUpdateCustomerResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceCreateOrUpdateCustomerResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceCreateOrUpdateCustomerResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceCreateOrUpdateCustomerResponse, a, b);
    }
}
PaymentServiceCreateOrUpdateCustomerResponse.runtime = proto3;
PaymentServiceCreateOrUpdateCustomerResponse.typeName = "api.v1.PaymentServiceCreateOrUpdateCustomerResponse";
PaymentServiceCreateOrUpdateCustomerResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "customer", kind: "message", T: PaymentCustomer },
]);
/**
 * PaymentServiceGetCustomerRequest is the request payload for a payment get customer request
 *
 * @generated from message api.v1.PaymentServiceGetCustomerRequest
 */
export class PaymentServiceGetCustomerRequest extends Message {
    constructor(data) {
        super();
        /**
         * Login of the customer
         *
         * @generated from field: string login = 1;
         */
        this.login = "";
        /**
         * CustomerId of the customer
         *
         * @generated from field: string customer_id = 2;
         */
        this.customerId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceGetCustomerRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceGetCustomerRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceGetCustomerRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceGetCustomerRequest, a, b);
    }
}
PaymentServiceGetCustomerRequest.runtime = proto3;
PaymentServiceGetCustomerRequest.typeName = "api.v1.PaymentServiceGetCustomerRequest";
PaymentServiceGetCustomerRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * PaymentServiceGetCustomerResponse is the response payload for a payment get customer request
 *
 * @generated from message api.v1.PaymentServiceGetCustomerResponse
 */
export class PaymentServiceGetCustomerResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceGetCustomerResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceGetCustomerResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceGetCustomerResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceGetCustomerResponse, a, b);
    }
}
PaymentServiceGetCustomerResponse.runtime = proto3;
PaymentServiceGetCustomerResponse.typeName = "api.v1.PaymentServiceGetCustomerResponse";
PaymentServiceGetCustomerResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "customer", kind: "message", T: PaymentCustomer },
]);
/**
 * PaymentServiceGetCustomerWithLoginRequest is the request payload for a payment get customer request
 *
 * @generated from message api.v1.PaymentServiceGetCustomerWithLoginRequest
 */
export class PaymentServiceGetCustomerWithLoginRequest extends Message {
    constructor(data) {
        super();
        /**
         * Login of the customer
         *
         * @generated from field: string login = 1;
         */
        this.login = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceGetCustomerWithLoginRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceGetCustomerWithLoginRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceGetCustomerWithLoginRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceGetCustomerWithLoginRequest, a, b);
    }
}
PaymentServiceGetCustomerWithLoginRequest.runtime = proto3;
PaymentServiceGetCustomerWithLoginRequest.typeName = "api.v1.PaymentServiceGetCustomerWithLoginRequest";
PaymentServiceGetCustomerWithLoginRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * PaymentServiceGetCustomerWithLoginResponse is the response payload for a payment get customer request
 *
 * @generated from message api.v1.PaymentServiceGetCustomerWithLoginResponse
 */
export class PaymentServiceGetCustomerWithLoginResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceGetCustomerWithLoginResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceGetCustomerWithLoginResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceGetCustomerWithLoginResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceGetCustomerWithLoginResponse, a, b);
    }
}
PaymentServiceGetCustomerWithLoginResponse.runtime = proto3;
PaymentServiceGetCustomerWithLoginResponse.typeName = "api.v1.PaymentServiceGetCustomerWithLoginResponse";
PaymentServiceGetCustomerWithLoginResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "customer", kind: "message", T: PaymentCustomer },
]);
/**
 * PaymentServiceCheckIfCustomerExistsRequest is the request payload for a payment check if customer exists request
 *
 * @generated from message api.v1.PaymentServiceCheckIfCustomerExistsRequest
 */
export class PaymentServiceCheckIfCustomerExistsRequest extends Message {
    constructor(data) {
        super();
        /**
         * Login of the customer
         *
         * @generated from field: string login = 1;
         */
        this.login = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceCheckIfCustomerExistsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceCheckIfCustomerExistsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceCheckIfCustomerExistsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceCheckIfCustomerExistsRequest, a, b);
    }
}
PaymentServiceCheckIfCustomerExistsRequest.runtime = proto3;
PaymentServiceCheckIfCustomerExistsRequest.typeName = "api.v1.PaymentServiceCheckIfCustomerExistsRequest";
PaymentServiceCheckIfCustomerExistsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * PaymentServiceCheckIfCustomerExistsResponse is the response payload for a payment check if customer exists request
 *
 * @generated from message api.v1.PaymentServiceCheckIfCustomerExistsResponse
 */
export class PaymentServiceCheckIfCustomerExistsResponse extends Message {
    constructor(data) {
        super();
        /**
         * Exists indicates if this customer exists
         *
         * @generated from field: bool exists = 2;
         */
        this.exists = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceCheckIfCustomerExistsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceCheckIfCustomerExistsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceCheckIfCustomerExistsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceCheckIfCustomerExistsResponse, a, b);
    }
}
PaymentServiceCheckIfCustomerExistsResponse.runtime = proto3;
PaymentServiceCheckIfCustomerExistsResponse.typeName = "api.v1.PaymentServiceCheckIfCustomerExistsResponse";
PaymentServiceCheckIfCustomerExistsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "customer", kind: "message", T: PaymentCustomer },
    { no: 2, name: "exists", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * PaymentServiceHasPaymentMethodRequest is the request payload for a has payment request
 *
 * @generated from message api.v1.PaymentServiceHasPaymentMethodRequest
 */
export class PaymentServiceHasPaymentMethodRequest extends Message {
    constructor(data) {
        super();
        /**
         * Login of the customer
         *
         * @generated from field: string login = 1;
         */
        this.login = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceHasPaymentMethodRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceHasPaymentMethodRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceHasPaymentMethodRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceHasPaymentMethodRequest, a, b);
    }
}
PaymentServiceHasPaymentMethodRequest.runtime = proto3;
PaymentServiceHasPaymentMethodRequest.typeName = "api.v1.PaymentServiceHasPaymentMethodRequest";
PaymentServiceHasPaymentMethodRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * PaymentServiceHasPaymentMethodResponse is the response payload for a has payment request
 *
 * @generated from message api.v1.PaymentServiceHasPaymentMethodResponse
 */
export class PaymentServiceHasPaymentMethodResponse extends Message {
    constructor(data) {
        super();
        /**
         * Exists indicates if this customer has a payment method
         *
         * @generated from field: bool exists = 1;
         */
        this.exists = false;
        /**
         * CouponLeft is true if there is still free amount on the coupon left
         *
         * @generated from field: bool coupon_left = 2;
         */
        this.couponLeft = false;
        /**
         * PositiveBalance indicates if the customer still has positive balance
         *
         * @generated from field: bool positive_balance = 3;
         */
        this.positiveBalance = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceHasPaymentMethodResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceHasPaymentMethodResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceHasPaymentMethodResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceHasPaymentMethodResponse, a, b);
    }
}
PaymentServiceHasPaymentMethodResponse.runtime = proto3;
PaymentServiceHasPaymentMethodResponse.typeName = "api.v1.PaymentServiceHasPaymentMethodResponse";
PaymentServiceHasPaymentMethodResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "exists", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "coupon_left", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "positive_balance", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * PaymentServiceDeletePaymentMethodRequest is the request payload for a delete payment request
 *
 * @generated from message api.v1.PaymentServiceDeletePaymentMethodRequest
 */
export class PaymentServiceDeletePaymentMethodRequest extends Message {
    constructor(data) {
        super();
        /**
         * Login of the customer
         *
         * @generated from field: string login = 1;
         */
        this.login = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceDeletePaymentMethodRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceDeletePaymentMethodRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceDeletePaymentMethodRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceDeletePaymentMethodRequest, a, b);
    }
}
PaymentServiceDeletePaymentMethodRequest.runtime = proto3;
PaymentServiceDeletePaymentMethodRequest.typeName = "api.v1.PaymentServiceDeletePaymentMethodRequest";
PaymentServiceDeletePaymentMethodRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * PaymentServiceDeletePaymentMethodResponse is the response payload for a delete payment request
 *
 * @generated from message api.v1.PaymentServiceDeletePaymentMethodResponse
 */
export class PaymentServiceDeletePaymentMethodResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceDeletePaymentMethodResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceDeletePaymentMethodResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceDeletePaymentMethodResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceDeletePaymentMethodResponse, a, b);
    }
}
PaymentServiceDeletePaymentMethodResponse.runtime = proto3;
PaymentServiceDeletePaymentMethodResponse.typeName = "api.v1.PaymentServiceDeletePaymentMethodResponse";
PaymentServiceDeletePaymentMethodResponse.fields = proto3.util.newFieldList(() => []);
/**
 * PaymentServiceGetSubscriptionUsageRequest is the request payload for a get subscription usage request
 *
 * @generated from message api.v1.PaymentServiceGetSubscriptionUsageRequest
 */
export class PaymentServiceGetSubscriptionUsageRequest extends Message {
    constructor(data) {
        super();
        /**
         * Login of the customer
         *
         * @generated from field: string login = 1;
         */
        this.login = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceGetSubscriptionUsageRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceGetSubscriptionUsageRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceGetSubscriptionUsageRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceGetSubscriptionUsageRequest, a, b);
    }
}
PaymentServiceGetSubscriptionUsageRequest.runtime = proto3;
PaymentServiceGetSubscriptionUsageRequest.typeName = "api.v1.PaymentServiceGetSubscriptionUsageRequest";
PaymentServiceGetSubscriptionUsageRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * PaymentServiceGetSubscriptionUsageResponse is the response payload for a get subscription usage request
 *
 * @generated from message api.v1.PaymentServiceGetSubscriptionUsageResponse
 */
export class PaymentServiceGetSubscriptionUsageResponse extends Message {
    constructor(data) {
        super();
        /**
         * SubscriptionUsageItems is a list of usage for all subscriptions
         *
         * @generated from field: repeated api.v1.SubscriptionUsageItem subscription_usage_items = 1;
         */
        this.subscriptionUsageItems = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceGetSubscriptionUsageResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceGetSubscriptionUsageResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceGetSubscriptionUsageResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceGetSubscriptionUsageResponse, a, b);
    }
}
PaymentServiceGetSubscriptionUsageResponse.runtime = proto3;
PaymentServiceGetSubscriptionUsageResponse.typeName = "api.v1.PaymentServiceGetSubscriptionUsageResponse";
PaymentServiceGetSubscriptionUsageResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription_usage_items", kind: "message", T: SubscriptionUsageItem, repeated: true },
]);
/**
 * PaymentServiceHasPaymentMethodRequest is the request payload for a get invoices request
 *
 * @generated from message api.v1.PaymentServiceGetInvoicesRequest
 */
export class PaymentServiceGetInvoicesRequest extends Message {
    constructor(data) {
        super();
        /**
         * Login of the customer
         *
         * @generated from field: string login = 1;
         */
        this.login = "";
        /**
         * CustomerId is the id of the customer
         *
         * @generated from field: string customer_id = 2;
         */
        this.customerId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceGetInvoicesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceGetInvoicesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceGetInvoicesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceGetInvoicesRequest, a, b);
    }
}
PaymentServiceGetInvoicesRequest.runtime = proto3;
PaymentServiceGetInvoicesRequest.typeName = "api.v1.PaymentServiceGetInvoicesRequest";
PaymentServiceGetInvoicesRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * PaymentServiceGetInvoicesResponse is the response payload for a get invoices request
 *
 * @generated from message api.v1.PaymentServiceGetInvoicesResponse
 */
export class PaymentServiceGetInvoicesResponse extends Message {
    constructor(data) {
        super();
        /**
         * Invoices is the list of invoices
         *
         * @generated from field: repeated api.v1.Invoice invoices = 1;
         */
        this.invoices = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceGetInvoicesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceGetInvoicesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceGetInvoicesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceGetInvoicesResponse, a, b);
    }
}
PaymentServiceGetInvoicesResponse.runtime = proto3;
PaymentServiceGetInvoicesResponse.typeName = "api.v1.PaymentServiceGetInvoicesResponse";
PaymentServiceGetInvoicesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "invoices", kind: "message", T: Invoice, repeated: true },
]);
/**
 * PaymentServiceGetDefaultPricesRequest is the request payload for a get default prices request
 *
 * @generated from message api.v1.PaymentServiceGetDefaultPricesRequest
 */
export class PaymentServiceGetDefaultPricesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceGetDefaultPricesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceGetDefaultPricesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceGetDefaultPricesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceGetDefaultPricesRequest, a, b);
    }
}
PaymentServiceGetDefaultPricesRequest.runtime = proto3;
PaymentServiceGetDefaultPricesRequest.typeName = "api.v1.PaymentServiceGetDefaultPricesRequest";
PaymentServiceGetDefaultPricesRequest.fields = proto3.util.newFieldList(() => []);
/**
 * PaymentServiceGetDefaultPricesResponse is the response payload for a get default prices request
 *
 * @generated from message api.v1.PaymentServiceGetDefaultPricesResponse
 */
export class PaymentServiceGetDefaultPricesResponse extends Message {
    constructor(data) {
        super();
        /**
         * Prices is the list of default prices
         *
         * @generated from field: repeated api.v1.Price prices = 1;
         */
        this.prices = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceGetDefaultPricesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceGetDefaultPricesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceGetDefaultPricesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceGetDefaultPricesResponse, a, b);
    }
}
PaymentServiceGetDefaultPricesResponse.runtime = proto3;
PaymentServiceGetDefaultPricesResponse.typeName = "api.v1.PaymentServiceGetDefaultPricesResponse";
PaymentServiceGetDefaultPricesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "prices", kind: "message", T: Price, repeated: true },
]);
/**
 * PaymentServiceCheckAdmittedRequest is the request payload for a check admitted request
 *
 * @generated from message api.v1.PaymentServiceCheckAdmittedRequest
 */
export class PaymentServiceCheckAdmittedRequest extends Message {
    constructor(data) {
        super();
        /**
         * Login of the customer
         *
         * @generated from field: string login = 1;
         */
        this.login = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceCheckAdmittedRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceCheckAdmittedRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceCheckAdmittedRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceCheckAdmittedRequest, a, b);
    }
}
PaymentServiceCheckAdmittedRequest.runtime = proto3;
PaymentServiceCheckAdmittedRequest.typeName = "api.v1.PaymentServiceCheckAdmittedRequest";
PaymentServiceCheckAdmittedRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * PaymentServiceCheckAdmittedResponse is the response payload for a check admitted request
 *
 * @generated from message api.v1.PaymentServiceCheckAdmittedResponse
 */
export class PaymentServiceCheckAdmittedResponse extends Message {
    constructor(data) {
        super();
        /**
         * Admitted indicates if the customer is already admitted to use the service
         *
         * @generated from field: bool admitted = 1;
         */
        this.admitted = false;
        /**
         * Requested indicates if the customer requested admittance
         *
         * @generated from field: bool requested = 2;
         */
        this.requested = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceCheckAdmittedResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceCheckAdmittedResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceCheckAdmittedResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceCheckAdmittedResponse, a, b);
    }
}
PaymentServiceCheckAdmittedResponse.runtime = proto3;
PaymentServiceCheckAdmittedResponse.typeName = "api.v1.PaymentServiceCheckAdmittedResponse";
PaymentServiceCheckAdmittedResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "admitted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "requested", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * PaymentServiceRequestAdmissionRequest is the request payload for a admission request
 *
 * @generated from message api.v1.PaymentServiceRequestAdmissionRequest
 */
export class PaymentServiceRequestAdmissionRequest extends Message {
    constructor(data) {
        super();
        /**
         * Login of the customer
         *
         * @generated from field: string login = 1;
         */
        this.login = "";
        /**
         * AcceptedTermsAndConditions indicates if the customer already accepted the terms and conditions
         *
         * @generated from field: bool accepted_terms_and_conditions = 3;
         */
        this.acceptedTermsAndConditions = false;
        /**
         * EmailConsent indicates if the customer already gave consent to email
         *
         * @generated from field: bool email_consent = 4;
         */
        this.emailConsent = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceRequestAdmissionRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceRequestAdmissionRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceRequestAdmissionRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceRequestAdmissionRequest, a, b);
    }
}
PaymentServiceRequestAdmissionRequest.runtime = proto3;
PaymentServiceRequestAdmissionRequest.typeName = "api.v1.PaymentServiceRequestAdmissionRequest";
PaymentServiceRequestAdmissionRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer", kind: "message", T: PaymentCustomer },
    { no: 3, name: "accepted_terms_and_conditions", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "email_consent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * PaymentServiceRequestAdmissionResponse is the response payload for a admission request
 *
 * @generated from message api.v1.PaymentServiceRequestAdmissionResponse
 */
export class PaymentServiceRequestAdmissionResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceRequestAdmissionResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceRequestAdmissionResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceRequestAdmissionResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceRequestAdmissionResponse, a, b);
    }
}
PaymentServiceRequestAdmissionResponse.runtime = proto3;
PaymentServiceRequestAdmissionResponse.typeName = "api.v1.PaymentServiceRequestAdmissionResponse";
PaymentServiceRequestAdmissionResponse.fields = proto3.util.newFieldList(() => []);
/**
 * PaymentServiceHasChargeableResourcesRequest is the request payload for a has chargeable request
 *
 * @generated from message api.v1.PaymentServiceHasChargeableResourcesRequest
 */
export class PaymentServiceHasChargeableResourcesRequest extends Message {
    constructor(data) {
        super();
        /**
         * Login of the customer
         *
         * @generated from field: string login = 1;
         */
        this.login = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceHasChargeableResourcesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceHasChargeableResourcesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceHasChargeableResourcesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceHasChargeableResourcesRequest, a, b);
    }
}
PaymentServiceHasChargeableResourcesRequest.runtime = proto3;
PaymentServiceHasChargeableResourcesRequest.typeName = "api.v1.PaymentServiceHasChargeableResourcesRequest";
PaymentServiceHasChargeableResourcesRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * PaymentServiceHasChargeableResourcesResponse is the response payload for a has chargeable request
 *
 * @generated from message api.v1.PaymentServiceHasChargeableResourcesResponse
 */
export class PaymentServiceHasChargeableResourcesResponse extends Message {
    constructor(data) {
        super();
        /**
         * HasResources indicates if the customer has actually chargable resources
         *
         * @generated from field: bool has_resources = 1;
         */
        this.hasResources = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceHasChargeableResourcesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceHasChargeableResourcesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceHasChargeableResourcesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceHasChargeableResourcesResponse, a, b);
    }
}
PaymentServiceHasChargeableResourcesResponse.runtime = proto3;
PaymentServiceHasChargeableResourcesResponse.typeName = "api.v1.PaymentServiceHasChargeableResourcesResponse";
PaymentServiceHasChargeableResourcesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "has_resources", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * PayentServiceSetOnboardedRequest changes the onboarded status of the given customer
 *
 * @generated from message api.v1.PaymentServiceSetOnboardedRequest
 */
export class PaymentServiceSetOnboardedRequest extends Message {
    constructor(data) {
        super();
        /**
         * Login of the customer
         *
         * @generated from field: string login = 1;
         */
        this.login = "";
        /**
         * Onboarded indicates if the customer has seen the onboarde message
         *
         * @generated from field: bool onboarded = 2;
         */
        this.onboarded = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceSetOnboardedRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceSetOnboardedRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceSetOnboardedRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceSetOnboardedRequest, a, b);
    }
}
PaymentServiceSetOnboardedRequest.runtime = proto3;
PaymentServiceSetOnboardedRequest.typeName = "api.v1.PaymentServiceSetOnboardedRequest";
PaymentServiceSetOnboardedRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "onboarded", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * PaymentServiceSetOnboardedResponse respond to the changed status of the given customer
 *
 * @generated from message api.v1.PaymentServiceSetOnboardedResponse
 */
export class PaymentServiceSetOnboardedResponse extends Message {
    constructor(data) {
        super();
        /**
         * Onboarded indicates if the customer has seen the onboarded message
         *
         * @generated from field: bool onboarded = 1;
         */
        this.onboarded = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceSetOnboardedResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceSetOnboardedResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceSetOnboardedResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceSetOnboardedResponse, a, b);
    }
}
PaymentServiceSetOnboardedResponse.runtime = proto3;
PaymentServiceSetOnboardedResponse.typeName = "api.v1.PaymentServiceSetOnboardedResponse";
PaymentServiceSetOnboardedResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "onboarded", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * PaymentServiceGetOnboardedRequest check the onboarded status
 *
 * @generated from message api.v1.PaymentServiceGetOnboardedRequest
 */
export class PaymentServiceGetOnboardedRequest extends Message {
    constructor(data) {
        super();
        /**
         * Login of the customer
         *
         * @generated from field: string login = 1;
         */
        this.login = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceGetOnboardedRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceGetOnboardedRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceGetOnboardedRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceGetOnboardedRequest, a, b);
    }
}
PaymentServiceGetOnboardedRequest.runtime = proto3;
PaymentServiceGetOnboardedRequest.typeName = "api.v1.PaymentServiceGetOnboardedRequest";
PaymentServiceGetOnboardedRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * PaymentServiceGetOnboardedRequest returns the onboarded status
 *
 * @generated from message api.v1.PaymentServiceGetOnboardedResponse
 */
export class PaymentServiceGetOnboardedResponse extends Message {
    constructor(data) {
        super();
        /**
         * Onboarded indicates if the customer has seen the onboarded message
         *
         * @generated from field: bool onboarded = 1;
         */
        this.onboarded = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PaymentServiceGetOnboardedResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PaymentServiceGetOnboardedResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PaymentServiceGetOnboardedResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PaymentServiceGetOnboardedResponse, a, b);
    }
}
PaymentServiceGetOnboardedResponse.runtime = proto3;
PaymentServiceGetOnboardedResponse.typeName = "api.v1.PaymentServiceGetOnboardedResponse";
PaymentServiceGetOnboardedResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "onboarded", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
