// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/health.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
/**
 * ServiceStatus defines the status of a service
 *
 * @generated from enum api.v1.ServiceStatus
 */
export var ServiceStatus;
(function (ServiceStatus) {
    /**
     * SERVICE_STATUS_UNSPECIFIED service status is not known or unspecified
     *
     * @generated from enum value: SERVICE_STATUS_UNSPECIFIED = 0;
     */
    ServiceStatus[ServiceStatus["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * SERVICE_STATUS_DEGRADED the service is in degraded status, not the whole functionality is available
     *
     * @generated from enum value: SERVICE_STATUS_DEGRADED = 1;
     */
    ServiceStatus[ServiceStatus["DEGRADED"] = 1] = "DEGRADED";
    /**
     * SERVICE_STATUS_UNHEALTHY the service is in unhealthy status, serious impact is expected
     *
     * @generated from enum value: SERVICE_STATUS_UNHEALTHY = 2;
     */
    ServiceStatus[ServiceStatus["UNHEALTHY"] = 2] = "UNHEALTHY";
    /**
     * SERVICE_STATUS_HEALTHY the service is in healthy status e.g. fully functional
     *
     * @generated from enum value: SERVICE_STATUS_HEALTHY = 3;
     */
    ServiceStatus[ServiceStatus["HEALTHY"] = 3] = "HEALTHY";
})(ServiceStatus || (ServiceStatus = {}));
// Retrieve enum metadata with: proto3.getEnumType(ServiceStatus)
proto3.util.setEnumType(ServiceStatus, "api.v1.ServiceStatus", [
    { no: 0, name: "SERVICE_STATUS_UNSPECIFIED" },
    { no: 1, name: "SERVICE_STATUS_DEGRADED" },
    { no: 2, name: "SERVICE_STATUS_UNHEALTHY" },
    { no: 3, name: "SERVICE_STATUS_HEALTHY" },
]);
/**
 * Service defines the service for which the healtyness is reported
 *
 * @generated from enum api.v1.Service
 */
export var Service;
(function (Service) {
    /**
     * SERVICE_UNSPECIFIED is a unknown service
     *
     * @generated from enum value: SERVICE_UNSPECIFIED = 0;
     */
    Service[Service["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * SERVICE_CLUSTER the kubernetes cluster service
     *
     * @generated from enum value: SERVICE_CLUSTER = 1;
     */
    Service[Service["CLUSTER"] = 1] = "CLUSTER";
    /**
     * SERVICE_VOLUME the volume/storage service
     *
     * @generated from enum value: SERVICE_VOLUME = 2;
     */
    Service[Service["VOLUME"] = 2] = "VOLUME";
    /**
     * SERVICE_MACHINES the machine service
     *
     * @generated from enum value: SERVICE_MACHINES = 3;
     */
    Service[Service["MACHINES"] = 3] = "MACHINES";
})(Service || (Service = {}));
// Retrieve enum metadata with: proto3.getEnumType(Service)
proto3.util.setEnumType(Service, "api.v1.Service", [
    { no: 0, name: "SERVICE_UNSPECIFIED" },
    { no: 1, name: "SERVICE_CLUSTER" },
    { no: 2, name: "SERVICE_VOLUME" },
    { no: 3, name: "SERVICE_MACHINES" },
]);
/**
 * Health reports the healt status of all services
 *
 * @generated from message api.v1.Health
 */
export class Health extends Message {
    constructor(data) {
        super();
        /**
         * Services the health of all individual services
         *
         * @generated from field: repeated api.v1.HealthStatus services = 1;
         */
        this.services = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Health().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Health().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Health().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Health, a, b);
    }
}
Health.runtime = proto3;
Health.typeName = "api.v1.Health";
Health.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: HealthStatus, repeated: true },
]);
/**
 * HealthStatus the health of one service
 *
 * @generated from message api.v1.HealthStatus
 */
export class HealthStatus extends Message {
    constructor(data) {
        super();
        /**
         * Name the name of the service
         *
         * @generated from field: api.v1.Service name = 1;
         */
        this.name = Service.UNSPECIFIED;
        /**
         * Status the status of this service
         *
         * @generated from field: api.v1.ServiceStatus status = 2;
         */
        this.status = ServiceStatus.UNSPECIFIED;
        /**
         * Message describes the reason for the unhealthy status if possible
         *
         * @generated from field: string message = 3;
         */
        this.message = "";
        /**
         * Partitions describes the health of the service by partition
         *
         * @generated from field: map<string, api.v1.PartitionHealth> partitions = 4;
         */
        this.partitions = {};
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new HealthStatus().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HealthStatus().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HealthStatus().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(HealthStatus, a, b);
    }
}
HealthStatus.runtime = proto3;
HealthStatus.typeName = "api.v1.HealthStatus";
HealthStatus.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "enum", T: proto3.getEnumType(Service) },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(ServiceStatus) },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "partitions", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: PartitionHealth } },
]);
/**
 * PartitionHealth the status of a specific service in this partition
 *
 * @generated from message api.v1.PartitionHealth
 */
export class PartitionHealth extends Message {
    constructor(data) {
        super();
        /**
         * Status the health status of the service in this partition
         *
         * @generated from field: api.v1.ServiceStatus status = 1;
         */
        this.status = ServiceStatus.UNSPECIFIED;
        /**
         * Message describes the reason for the unhealthy status if possible
         *
         * @generated from field: string message = 2;
         */
        this.message = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PartitionHealth().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PartitionHealth().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PartitionHealth().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PartitionHealth, a, b);
    }
}
PartitionHealth.runtime = proto3;
PartitionHealth.typeName = "api.v1.PartitionHealth";
PartitionHealth.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(ServiceStatus) },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * HealthServiceGetRequest is request payload to get the health of the system
 *
 * @generated from message api.v1.HealthServiceGetRequest
 */
export class HealthServiceGetRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new HealthServiceGetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HealthServiceGetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HealthServiceGetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(HealthServiceGetRequest, a, b);
    }
}
HealthServiceGetRequest.runtime = proto3;
HealthServiceGetRequest.typeName = "api.v1.HealthServiceGetRequest";
HealthServiceGetRequest.fields = proto3.util.newFieldList(() => []);
/**
 * HealthServiceGetRequest is the response payload with the health of the system
 *
 * @generated from message api.v1.HealthServiceGetResponse
 */
export class HealthServiceGetResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new HealthServiceGetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HealthServiceGetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HealthServiceGetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(HealthServiceGetResponse, a, b);
    }
}
HealthServiceGetResponse.runtime = proto3;
HealthServiceGetResponse.typeName = "api.v1.HealthServiceGetResponse";
HealthServiceGetResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "health", kind: "message", T: Health },
]);
