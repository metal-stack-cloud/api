// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api/v1/assets.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
/**
 * Asset defines the available resources which can be used
 *
 * @generated from message api.v1.Asset
 */
export class Asset extends Message {
    constructor(data) {
        super();
        /**
         * MachineTypes available by region
         *
         * @generated from field: map<string, api.v1.MachineType> machine_types = 2;
         */
        this.machineTypes = {};
        /**
         * Kubernetes a list of kubernetes versions
         *
         * @generated from field: repeated api.v1.Kubernetes kubernetes = 3;
         */
        this.kubernetes = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Asset().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Asset().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Asset().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Asset, a, b);
    }
}
Asset.runtime = proto3;
Asset.typeName = "api.v1.Asset";
Asset.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "region", kind: "message", T: Region },
    { no: 2, name: "machine_types", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: MachineType } },
    { no: 3, name: "kubernetes", kind: "message", T: Kubernetes, repeated: true },
]);
/**
 * Region defines a datacenter location
 *
 * @generated from message api.v1.Region
 */
export class Region extends Message {
    constructor(data) {
        super();
        /**
         * Id is the technical identifier of this region
         *
         * @generated from field: string id = 1;
         */
        this.id = "";
        /**
         * Name of the region
         *
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * Address is the postal address of the region
         *
         * @generated from field: string address = 3;
         */
        this.address = "";
        /**
         * Active indicates if this region is usable
         *
         * @generated from field: bool active = 4;
         */
        this.active = false;
        /**
         * Partitions in this region
         *
         * @generated from field: map<string, api.v1.Partition> partitions = 5;
         */
        this.partitions = {};
        /**
         * Description of the region
         *
         * @generated from field: string description = 7;
         */
        this.description = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Region().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Region().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Region().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Region, a, b);
    }
}
Region.runtime = proto3;
Region.typeName = "api.v1.Region";
Region.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "partitions", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: Partition } },
    { no: 6, name: "defaults", kind: "message", T: AssetDefaults },
    { no: 7, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Partition defines a failure domain in one Region.
 *
 * @generated from message api.v1.Partition
 */
export class Partition extends Message {
    constructor(data) {
        super();
        /**
         * Id is the technical id of this partition
         *
         * @generated from field: string id = 1;
         */
        this.id = "";
        /**
         * Name of this partition
         *
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * Address is the postal address of the partition
         *
         * @generated from field: string address = 3;
         */
        this.address = "";
        /**
         * Active indicates if this partition is usable
         *
         * @generated from field: bool active = 4;
         */
        this.active = false;
        /**
         * Description of this partition
         *
         * @generated from field: string description = 5;
         */
        this.description = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Partition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Partition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Partition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Partition, a, b);
    }
}
Partition.runtime = proto3;
Partition.typeName = "api.v1.Partition";
Partition.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MachineType defines a server type
 *
 * @generated from message api.v1.MachineType
 */
export class MachineType extends Message {
    constructor(data) {
        super();
        /**
         * Id is the technical id of this machine type
         *
         * @generated from field: string id = 1;
         */
        this.id = "";
        /**
         * Name of this machine type
         *
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * CPUs e.g. cores in this machine / server
         *
         * @generated from field: uint32 cpus = 3;
         */
        this.cpus = 0;
        /**
         * Memory in this machine / server
         *
         * @generated from field: uint64 memory = 4;
         */
        this.memory = protoInt64.zero;
        /**
         * Storage in this machine / server
         *
         * @generated from field: uint64 storage = 5;
         */
        this.storage = protoInt64.zero;
        /**
         * CpuDescription describes the CPUs of this machine / server
         *
         * @generated from field: string cpu_description = 6;
         */
        this.cpuDescription = "";
        /**
         * StorageDescription describes the disks of this machine / server
         *
         * @generated from field: string storage_description = 7;
         */
        this.storageDescription = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MachineType().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MachineType().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MachineType().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MachineType, a, b);
    }
}
MachineType.runtime = proto3;
MachineType.typeName = "api.v1.MachineType";
MachineType.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cpus", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "memory", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "storage", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "cpu_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "storage_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Kubernetes related configurations available
 *
 * @generated from message api.v1.Kubernetes
 */
export class Kubernetes extends Message {
    constructor(data) {
        super();
        /**
         * Version of kubernetes
         *
         * @generated from field: string version = 1;
         */
        this.version = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Kubernetes().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Kubernetes().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Kubernetes().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Kubernetes, a, b);
    }
}
Kubernetes.runtime = proto3;
Kubernetes.typeName = "api.v1.Kubernetes";
Kubernetes.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expiration", kind: "message", T: Timestamp },
]);
/**
 * AssetDefaults apply if no specific properties are specified
 *
 * @generated from message api.v1.AssetDefaults
 */
export class AssetDefaults extends Message {
    constructor(data) {
        super();
        /**
         * MachineType defines the default machine type used
         *
         * @generated from field: string machine_type = 1;
         */
        this.machineType = "";
        /**
         * KubernetesVersion defines the default kubernetes version to be used
         *
         * @generated from field: string kubernetes_version = 2;
         */
        this.kubernetesVersion = "";
        /**
         * WorkerMin defines how many servers are specified as minimum
         *
         * @generated from field: uint32 worker_min = 3;
         */
        this.workerMin = 0;
        /**
         * WorkerMax defines how many servers are specified as maximum
         *
         * @generated from field: uint32 worker_max = 4;
         */
        this.workerMax = 0;
        /**
         * Partition defines where the cluster is created if not otherwise specified
         *
         * @generated from field: string partition = 7;
         */
        this.partition = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AssetDefaults().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AssetDefaults().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AssetDefaults().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AssetDefaults, a, b);
    }
}
AssetDefaults.runtime = proto3;
AssetDefaults.typeName = "api.v1.AssetDefaults";
AssetDefaults.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "machine_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kubernetes_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "worker_min", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "worker_max", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "partition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * AssetServiceListRequest is the request payload to list all Assets
 *
 * @generated from message api.v1.AssetServiceListRequest
 */
export class AssetServiceListRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AssetServiceListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AssetServiceListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AssetServiceListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AssetServiceListRequest, a, b);
    }
}
AssetServiceListRequest.runtime = proto3;
AssetServiceListRequest.typeName = "api.v1.AssetServiceListRequest";
AssetServiceListRequest.fields = proto3.util.newFieldList(() => []);
/**
 * AssetServiceListResponse is the response payload which contains the the Asset list
 *
 * @generated from message api.v1.AssetServiceListResponse
 */
export class AssetServiceListResponse extends Message {
    constructor(data) {
        super();
        /**
         * Assets defines a list of assets
         *
         * @generated from field: repeated api.v1.Asset assets = 2;
         */
        this.assets = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AssetServiceListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AssetServiceListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AssetServiceListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AssetServiceListResponse, a, b);
    }
}
AssetServiceListResponse.runtime = proto3;
AssetServiceListResponse.typeName = "api.v1.AssetServiceListResponse";
AssetServiceListResponse.fields = proto3.util.newFieldList(() => [
    { no: 2, name: "assets", kind: "message", T: Asset, repeated: true },
]);
