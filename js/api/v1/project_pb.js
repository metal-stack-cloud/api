// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/project.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
/**
 * Project defines a group of resources belonging to a tenant
 * a tenant can have multiple projects
 *
 * @generated from message api.v1.Project
 */
export class Project extends Message {
    constructor(data) {
        super();
        /**
         * Uuid of this project
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        /**
         * Name of this project must be unique per tenant
         *
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * Description of this project
         *
         * @generated from field: string description = 3;
         */
        this.description = "";
        /**
         * Tenant this project belongs to
         *
         * @generated from field: string tenant = 4;
         */
        this.tenant = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Project().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Project().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Project().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Project, a, b);
    }
}
Project.runtime = proto3;
Project.typeName = "api.v1.Project";
Project.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "created_at", kind: "message", T: Timestamp },
    { no: 11, name: "updated_at", kind: "message", T: Timestamp },
]);
/**
 * ProjectServiceListRequest is the request payload to list all projects
 *
 * @generated from message api.v1.ProjectServiceListRequest
 */
export class ProjectServiceListRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProjectServiceListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProjectServiceListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProjectServiceListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ProjectServiceListRequest, a, b);
    }
}
ProjectServiceListRequest.runtime = proto3;
ProjectServiceListRequest.typeName = "api.v1.ProjectServiceListRequest";
ProjectServiceListRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * ProjectServiceListResponse is the response payload to list all projects
 *
 * @generated from message api.v1.ProjectServiceListResponse
 */
export class ProjectServiceListResponse extends Message {
    constructor(data) {
        super();
        /**
         * Projects is a list of all your projects
         *
         * @generated from field: repeated api.v1.Project projects = 1;
         */
        this.projects = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProjectServiceListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProjectServiceListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProjectServiceListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ProjectServiceListResponse, a, b);
    }
}
ProjectServiceListResponse.runtime = proto3;
ProjectServiceListResponse.typeName = "api.v1.ProjectServiceListResponse";
ProjectServiceListResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "projects", kind: "message", T: Project, repeated: true },
]);
/**
 * ProjectServiceGetRequest is the request payload to get a project
 *
 * @generated from message api.v1.ProjectServiceGetRequest
 */
export class ProjectServiceGetRequest extends Message {
    constructor(data) {
        super();
        /**
         * Project is the uuid of the project to get
         *
         * @generated from field: string project = 1;
         */
        this.project = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProjectServiceGetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProjectServiceGetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProjectServiceGetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ProjectServiceGetRequest, a, b);
    }
}
ProjectServiceGetRequest.runtime = proto3;
ProjectServiceGetRequest.typeName = "api.v1.ProjectServiceGetRequest";
ProjectServiceGetRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ProjectServiceGetResponse is the response payload to get a projects
 *
 * @generated from message api.v1.ProjectServiceGetResponse
 */
export class ProjectServiceGetResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProjectServiceGetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProjectServiceGetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProjectServiceGetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ProjectServiceGetResponse, a, b);
    }
}
ProjectServiceGetResponse.runtime = proto3;
ProjectServiceGetResponse.typeName = "api.v1.ProjectServiceGetResponse";
ProjectServiceGetResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
]);
/**
 * ProjectServiceCreateRequest is the request payload to Create a project
 *
 * @generated from message api.v1.ProjectServiceCreateRequest
 */
export class ProjectServiceCreateRequest extends Message {
    constructor(data) {
        super();
        /**
         * Tenant is the owner of this project
         *
         * @generated from field: string tenant = 1;
         */
        this.tenant = "";
        /**
         * Name of this project, unique per tenant
         *
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * Description of this project
         *
         * @generated from field: string description = 3;
         */
        this.description = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProjectServiceCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProjectServiceCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProjectServiceCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ProjectServiceCreateRequest, a, b);
    }
}
ProjectServiceCreateRequest.runtime = proto3;
ProjectServiceCreateRequest.typeName = "api.v1.ProjectServiceCreateRequest";
ProjectServiceCreateRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ProjectServiceCreateResponse is the response payload of creation of a project
 *
 * @generated from message api.v1.ProjectServiceCreateResponse
 */
export class ProjectServiceCreateResponse extends Message {
    constructor(data) {
        super();
        /**
         * Login is the tenant of the project to create
         * TODO: is login really a good name?
         *
         * @generated from field: string login = 1;
         */
        this.login = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProjectServiceCreateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProjectServiceCreateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProjectServiceCreateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ProjectServiceCreateResponse, a, b);
    }
}
ProjectServiceCreateResponse.runtime = proto3;
ProjectServiceCreateResponse.typeName = "api.v1.ProjectServiceCreateResponse";
ProjectServiceCreateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ProjectServiceDeleteRequest is the request payload to delete a project
 *
 * @generated from message api.v1.ProjectServiceDeleteRequest
 */
export class ProjectServiceDeleteRequest extends Message {
    constructor(data) {
        super();
        /**
         * Project is the uuid of the project to get
         *
         * @generated from field: string project = 1;
         */
        this.project = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProjectServiceDeleteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProjectServiceDeleteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProjectServiceDeleteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ProjectServiceDeleteRequest, a, b);
    }
}
ProjectServiceDeleteRequest.runtime = proto3;
ProjectServiceDeleteRequest.typeName = "api.v1.ProjectServiceDeleteRequest";
ProjectServiceDeleteRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ProjectServiceDeleteResponse is the response payload to delete a project
 *
 * @generated from message api.v1.ProjectServiceDeleteResponse
 */
export class ProjectServiceDeleteResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProjectServiceDeleteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProjectServiceDeleteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProjectServiceDeleteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ProjectServiceDeleteResponse, a, b);
    }
}
ProjectServiceDeleteResponse.runtime = proto3;
ProjectServiceDeleteResponse.typeName = "api.v1.ProjectServiceDeleteResponse";
ProjectServiceDeleteResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
]);
/**
 * ProjectServiceUpdateRequest is the request payload to update a project
 *
 * @generated from message api.v1.ProjectServiceUpdateRequest
 */
export class ProjectServiceUpdateRequest extends Message {
    constructor(data) {
        super();
        /**
         * Project is the uuid of the project to get
         *
         * @generated from field: string project = 1;
         */
        this.project = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProjectServiceUpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProjectServiceUpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProjectServiceUpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ProjectServiceUpdateRequest, a, b);
    }
}
ProjectServiceUpdateRequest.runtime = proto3;
ProjectServiceUpdateRequest.typeName = "api.v1.ProjectServiceUpdateRequest";
ProjectServiceUpdateRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * ProjectServiceUpdateResponse is the response payload to update a project
 *
 * @generated from message api.v1.ProjectServiceUpdateResponse
 */
export class ProjectServiceUpdateResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProjectServiceUpdateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProjectServiceUpdateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProjectServiceUpdateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ProjectServiceUpdateResponse, a, b);
    }
}
ProjectServiceUpdateResponse.runtime = proto3;
ProjectServiceUpdateResponse.typeName = "api.v1.ProjectServiceUpdateResponse";
ProjectServiceUpdateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
]);
