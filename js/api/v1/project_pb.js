"use strict";
// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file api/v1/project.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceRevisions = exports.ProjectServiceWatchRevisionResponse = exports.ProjectServiceWatchRevisionRequest = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * ProjectServiceWatchRevisionRequest starts the stream of projectrevisions
 *
 * @generated from message api.v1.ProjectServiceWatchRevisionRequest
 */
class ProjectServiceWatchRevisionRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * project to watch for changes
         *
         * @generated from field: string project = 2;
         */
        this.project = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProjectServiceWatchRevisionRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProjectServiceWatchRevisionRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProjectServiceWatchRevisionRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ProjectServiceWatchRevisionRequest, a, b);
    }
}
exports.ProjectServiceWatchRevisionRequest = ProjectServiceWatchRevisionRequest;
ProjectServiceWatchRevisionRequest.runtime = protobuf_1.proto3;
ProjectServiceWatchRevisionRequest.typeName = "api.v1.ProjectServiceWatchRevisionRequest";
ProjectServiceWatchRevisionRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ProjectServiceWatchRevisionResponse is returned in the stream
 *
 * @generated from message api.v1.ProjectServiceWatchRevisionResponse
 */
class ProjectServiceWatchRevisionResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * the project this watch is ment for
         *
         * @generated from field: string project = 1;
         */
        this.project = "";
        /**
         * revision is incremented if any of the resources from the project has changed
         *
         * @generated from field: uint64 revision = 2;
         */
        this.revision = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProjectServiceWatchRevisionResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProjectServiceWatchRevisionResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProjectServiceWatchRevisionResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ProjectServiceWatchRevisionResponse, a, b);
    }
}
exports.ProjectServiceWatchRevisionResponse = ProjectServiceWatchRevisionResponse;
ProjectServiceWatchRevisionResponse.runtime = protobuf_1.proto3;
ProjectServiceWatchRevisionResponse.typeName = "api.v1.ProjectServiceWatchRevisionResponse";
ProjectServiceWatchRevisionResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "revision", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "resources", kind: "message", T: ResourceRevisions },
]);
/**
 * ResourceRevisions contain revisions by resource
 *
 * @generated from message api.v1.ResourceRevisions
 */
class ResourceRevisions extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * cluster revision is incremented if anything changed on the projects clusters.
         *
         * @generated from field: uint64 cluster = 1;
         */
        this.cluster = protobuf_1.protoInt64.zero;
        /**
         * volume revision is incremented if anything changed on the projects volumes.
         *
         * @generated from field: uint64 volume = 2;
         */
        this.volume = protobuf_1.protoInt64.zero;
        /**
         * ip revision is incremented if anything changed on the projects ips.
         *
         * @generated from field: uint64 ip = 3;
         */
        this.ip = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResourceRevisions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResourceRevisions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResourceRevisions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ResourceRevisions, a, b);
    }
}
exports.ResourceRevisions = ResourceRevisions;
ResourceRevisions.runtime = protobuf_1.proto3;
ResourceRevisions.typeName = "api.v1.ResourceRevisions";
ResourceRevisions.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "volume", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
