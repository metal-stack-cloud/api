// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api/v1/payment.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * ProductType defines for which type of product a price applies
 *
 * @generated from enum api.v1.ProductType
 */
export enum ProductType {
  /**
   * PRODUCT_TYPE_UNSPECIFIED is unspecified
   *
   * @generated from enum value: PRODUCT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * PRODUCT_TYPE_STORAGE for storage
   *
   * @generated from enum value: PRODUCT_TYPE_STORAGE = 1;
   */
  STORAGE = 1,

  /**
   * PRODUCT_TYPE_COMPUTE for compute, e.g. machines
   *
   * @generated from enum value: PRODUCT_TYPE_COMPUTE = 2;
   */
  COMPUTE = 2,

  /**
   * PRODUCT_TYPE_NETWORK for network, e.g. ips and traffic
   *
   * @generated from enum value: PRODUCT_TYPE_NETWORK = 3;
   */
  NETWORK = 3,

  /**
   * PRODUCT_TYPE_KUBERNETES for kubernetes, e.g. the control plane
   *
   * @generated from enum value: PRODUCT_TYPE_KUBERNETES = 5;
   */
  KUBERNETES = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(ProductType)
proto3.util.setEnumType(ProductType, "api.v1.ProductType", [
  { no: 0, name: "PRODUCT_TYPE_UNSPECIFIED" },
  { no: 1, name: "PRODUCT_TYPE_STORAGE" },
  { no: 2, name: "PRODUCT_TYPE_COMPUTE" },
  { no: 3, name: "PRODUCT_TYPE_NETWORK" },
  { no: 5, name: "PRODUCT_TYPE_KUBERNETES" },
]);

/**
 * UsageType indicates how a price is measured
 *
 * @generated from enum api.v1.UsageType
 */
export enum UsageType {
  /**
   * USAGE_TYPE_UNSPECIFIED is unspecified
   *
   * @generated from enum value: USAGE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * USAGE_TYPE_METERED price is sent per usage
   *
   * @generated from enum value: USAGE_TYPE_METERED = 1;
   */
  METERED = 1,

  /**
   * USAGE_TYPE_LICENSED price is set in invoice (s3 for example)
   *
   * @generated from enum value: USAGE_TYPE_LICENSED = 2;
   */
  LICENSED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(UsageType)
proto3.util.setEnumType(UsageType, "api.v1.UsageType", [
  { no: 0, name: "USAGE_TYPE_UNSPECIFIED" },
  { no: 1, name: "USAGE_TYPE_METERED" },
  { no: 2, name: "USAGE_TYPE_LICENSED" },
]);

/**
 * PaymentCustomer is a customer at the payment processor
 *
 * @generated from message api.v1.PaymentCustomer
 */
export class PaymentCustomer extends Message<PaymentCustomer> {
  /**
   * Login of the customer
   *
   * @generated from field: string login = 1;
   */
  login = "";

  /**
   * Name of the customer
   *
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * CustomerId id of the customer
   *
   * @generated from field: optional string customer_id = 3;
   */
  customerId?: string;

  /**
   * PaymentMethodId at the payment processor
   *
   * @generated from field: optional string payment_method_id = 4;
   */
  paymentMethodId?: string;

  /**
   * SubscriptionId of the customer
   *
   * @generated from field: string subscription_id = 5;
   */
  subscriptionId = "";

  /**
   * Email of the customer
   *
   * @generated from field: optional string email = 6;
   */
  email?: string;

  /**
   * Card the customer supplied
   *
   * @generated from field: optional api.v1.Card card = 7;
   */
  card?: Card;

  /**
   * Prices which apply to customer resources
   *
   * @generated from field: repeated api.v1.Price prices = 8;
   */
  prices: Price[] = [];

  /**
   * Address is the postal address of the customer
   *
   * @generated from field: api.v1.Address address = 9;
   */
  address?: Address;

  /**
   * Coupon details of granted coupon if any
   *
   * @generated from field: optional api.v1.Coupon coupon = 10;
   */
  coupon?: Coupon;

  /**
   * Vat which applies to the customer
   *
   * @generated from field: optional string vat = 11;
   */
  vat?: string;

  /**
   * PhoneNumber of the customer
   *
   * @generated from field: optional string phone_number = 12;
   */
  phoneNumber?: string;

  /**
   * Balance actual balance of the customer
   *
   * @generated from field: optional int64 balance = 13;
   */
  balance?: bigint;

  constructor(data?: PartialMessage<PaymentCustomer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentCustomer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "payment_method_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "card", kind: "message", T: Card, opt: true },
    { no: 8, name: "prices", kind: "message", T: Price, repeated: true },
    { no: 9, name: "address", kind: "message", T: Address },
    { no: 10, name: "coupon", kind: "message", T: Coupon, opt: true },
    { no: 11, name: "vat", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 12, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 13, name: "balance", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentCustomer {
    return new PaymentCustomer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentCustomer {
    return new PaymentCustomer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentCustomer {
    return new PaymentCustomer().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentCustomer | PlainMessage<PaymentCustomer> | undefined, b: PaymentCustomer | PlainMessage<PaymentCustomer> | undefined): boolean {
    return proto3.util.equals(PaymentCustomer, a, b);
  }
}

/**
 * Card is the payment card the customer pays with
 *
 * @generated from message api.v1.Card
 */
export class Card extends Message<Card> {
  /**
   * Brand of the card
   *
   * @generated from field: string brand = 1;
   */
  brand = "";

  /**
   * Country where the card was issued
   *
   * @generated from field: string country = 2;
   */
  country = "";

  /**
   * ExpMonth is the month when this card expires
   *
   * @generated from field: int64 exp_month = 3;
   */
  expMonth = protoInt64.zero;

  /**
   * ExpYear is the year when this card expires
   *
   * @generated from field: int64 exp_year = 4;
   */
  expYear = protoInt64.zero;

  /**
   * Last4 are the 4 last digits of the card number, the full number is not stored anywhere
   *
   * @generated from field: string last_4 = 5;
   */
  last4 = "";

  constructor(data?: PartialMessage<Card>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Card";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "brand", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "exp_month", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "exp_year", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "last_4", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Card {
    return new Card().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Card {
    return new Card().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Card {
    return new Card().fromJsonString(jsonString, options);
  }

  static equals(a: Card | PlainMessage<Card> | undefined, b: Card | PlainMessage<Card> | undefined): boolean {
    return proto3.util.equals(Card, a, b);
  }
}

/**
 * Price of a product
 *
 * @generated from message api.v1.Price
 */
export class Price extends Message<Price> {
  /**
   * Name of the price
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * UnitAmountDecimal the value of this price
   *
   * @generated from field: double unit_amount_decimal = 2;
   */
  unitAmountDecimal = 0;

  /**
   * Currency of this price
   *
   * @generated from field: string currency = 3;
   */
  currency = "";

  /**
   * UnitLabel is a label which allows for searching this unit at the payment processor
   *
   * @generated from field: string unit_label = 4;
   */
  unitLabel = "";

  /**
   * ProductType this price applies to
   *
   * @generated from field: api.v1.ProductType product_type = 5;
   */
  productType = ProductType.UNSPECIFIED;

  /**
   * Description of this price
   *
   * @generated from field: optional string description = 6;
   */
  description?: string;

  /**
   * UsageType indicates how a price is measured
   *
   * @generated from field: api.v1.UsageType usage_type = 7;
   */
  usageType = UsageType.UNSPECIFIED;

  constructor(data?: PartialMessage<Price>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Price";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "unit_amount_decimal", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unit_label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "product_type", kind: "enum", T: proto3.getEnumType(ProductType) },
    { no: 6, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "usage_type", kind: "enum", T: proto3.getEnumType(UsageType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Price {
    return new Price().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Price {
    return new Price().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Price {
    return new Price().fromJsonString(jsonString, options);
  }

  static equals(a: Price | PlainMessage<Price> | undefined, b: Price | PlainMessage<Price> | undefined): boolean {
    return proto3.util.equals(Price, a, b);
  }
}

/**
 * Address postal address of a customer
 *
 * @generated from message api.v1.Address
 */
export class Address extends Message<Address> {
  /**
   * Line1 the first address line
   *
   * @generated from field: string line1 = 1;
   */
  line1 = "";

  /**
   * Line2 the second address line
   *
   * @generated from field: string line2 = 2;
   */
  line2 = "";

  /**
   * PostalCode of the city or address
   *
   * @generated from field: string postal_code = 3;
   */
  postalCode = "";

  /**
   * City where the customer lives
   *
   * @generated from field: string city = 4;
   */
  city = "";

  /**
   * Sate where the customer lives
   *
   * @generated from field: string state = 5;
   */
  state = "";

  /**
   * Country where the customer lives
   *
   * @generated from field: string country = 6;
   */
  country = "";

  constructor(data?: PartialMessage<Address>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Address";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "line1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "line2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "postal_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Address {
    return new Address().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Address {
    return new Address().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Address {
    return new Address().fromJsonString(jsonString, options);
  }

  static equals(a: Address | PlainMessage<Address> | undefined, b: Address | PlainMessage<Address> | undefined): boolean {
    return proto3.util.equals(Address, a, b);
  }
}

/**
 * SubscriptionUsageItem details of a subscription
 *
 * @generated from message api.v1.SubscriptionUsageItem
 */
export class SubscriptionUsageItem extends Message<SubscriptionUsageItem> {
  /**
   * SubscriptionItemId is the id of the subscription
   *
   * @generated from field: string subscription_item_id = 1;
   */
  subscriptionItemId = "";

  /**
   * SubscriptionItemName is the name of the subscription
   *
   * @generated from field: string subscription_item_name = 2;
   */
  subscriptionItemName = "";

  /**
   * TotalUsage of this subscription
   *
   * @generated from field: int64 total_usage = 3;
   */
  totalUsage = protoInt64.zero;

  /**
   * PeriodStart is the start date of this subscription
   *
   * @generated from field: google.protobuf.Timestamp period_start = 4;
   */
  periodStart?: Timestamp;

  /**
   * PeriodEnd is the end date of this subscription
   *
   * @generated from field: google.protobuf.Timestamp period_end = 5;
   */
  periodEnd?: Timestamp;

  constructor(data?: PartialMessage<SubscriptionUsageItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.SubscriptionUsageItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription_item_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subscription_item_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "total_usage", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "period_start", kind: "message", T: Timestamp },
    { no: 5, name: "period_end", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscriptionUsageItem {
    return new SubscriptionUsageItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscriptionUsageItem {
    return new SubscriptionUsageItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscriptionUsageItem {
    return new SubscriptionUsageItem().fromJsonString(jsonString, options);
  }

  static equals(a: SubscriptionUsageItem | PlainMessage<SubscriptionUsageItem> | undefined, b: SubscriptionUsageItem | PlainMessage<SubscriptionUsageItem> | undefined): boolean {
    return proto3.util.equals(SubscriptionUsageItem, a, b);
  }
}

/**
 * Invoice a customer has to pay for subscription usage
 *
 * @generated from message api.v1.Invoice
 */
export class Invoice extends Message<Invoice> {
  /**
   * Id of the invoice
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * PdfDownloadUrl is the url where the customer can download this invoice in pdf format
   *
   * @generated from field: string pdf_download_url = 2;
   */
  pdfDownloadUrl = "";

  /**
   * PeriodStart is the start date of this subscription
   *
   * @generated from field: google.protobuf.Timestamp period_start = 4;
   */
  periodStart?: Timestamp;

  /**
   * PeriodEnd is the end date of this subscription
   *
   * @generated from field: google.protobuf.Timestamp period_end = 5;
   */
  periodEnd?: Timestamp;

  constructor(data?: PartialMessage<Invoice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Invoice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pdf_download_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "period_start", kind: "message", T: Timestamp },
    { no: 5, name: "period_end", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Invoice {
    return new Invoice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Invoice {
    return new Invoice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Invoice {
    return new Invoice().fromJsonString(jsonString, options);
  }

  static equals(a: Invoice | PlainMessage<Invoice> | undefined, b: Invoice | PlainMessage<Invoice> | undefined): boolean {
    return proto3.util.equals(Invoice, a, b);
  }
}

/**
 * Coupon is a amount of free usage which can be granted to a customer
 *
 * @generated from message api.v1.Coupon
 */
export class Coupon extends Message<Coupon> {
  /**
   * Id of the coupon
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Name of this coupon
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * AmountOff is th amount the customer can use for free
   *
   * @generated from field: int64 amount_off = 3;
   */
  amountOff = protoInt64.zero;

  /**
   * Currency of the free usage amount
   *
   * @generated from field: string currency = 4;
   */
  currency = "";

  /**
   * DurationInMonth defines how many month this coupon is valid for
   *
   * @generated from field: int64 duration_in_month = 5;
   */
  durationInMonth = protoInt64.zero;

  /**
   * CreatedAt is the date the coupon was created
   *
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  /**
   * RedeemBy is the date when this coupon can no longer be used
   *
   * @generated from field: google.protobuf.Timestamp redeem_by = 7;
   */
  redeemBy?: Timestamp;

  /**
   * TimesRedeemed how often this coupon was already consumed
   *
   * @generated from field: int64 times_redeemed = 8;
   */
  timesRedeemed = protoInt64.zero;

  /**
   * MaxRedemptions defines how often this coupon can be consumed
   *
   * @generated from field: int64 max_redemptions = 9;
   */
  maxRedemptions = protoInt64.zero;

  /**
   * AmountLeft how many usages are left for this coupon
   *
   * @generated from field: int64 amount_left = 10;
   */
  amountLeft = protoInt64.zero;

  constructor(data?: PartialMessage<Coupon>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Coupon";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "duration_in_month", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "created_at", kind: "message", T: Timestamp },
    { no: 7, name: "redeem_by", kind: "message", T: Timestamp },
    { no: 8, name: "times_redeemed", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "max_redemptions", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "amount_left", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Coupon {
    return new Coupon().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Coupon {
    return new Coupon().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Coupon {
    return new Coupon().fromJsonString(jsonString, options);
  }

  static equals(a: Coupon | PlainMessage<Coupon> | undefined, b: Coupon | PlainMessage<Coupon> | undefined): boolean {
    return proto3.util.equals(Coupon, a, b);
  }
}

/**
 * PaymentServiceCreateOrUpdateCustomerRequest is the request payload for a payment create or update customer request
 *
 * @generated from message api.v1.PaymentServiceCreateOrUpdateCustomerRequest
 */
export class PaymentServiceCreateOrUpdateCustomerRequest extends Message<PaymentServiceCreateOrUpdateCustomerRequest> {
  /**
   * Login of the customer
   *
   * @generated from field: string login = 1;
   */
  login = "";

  /**
   * Customer is the customer to modify
   *
   * @generated from field: api.v1.PaymentCustomer customer = 2;
   */
  customer?: PaymentCustomer;

  /**
   * AcceptedTermsAndConditions indicates the modification of the terms and conditions acceptance
   *
   * @generated from field: bool accepted_terms_and_conditions = 3;
   */
  acceptedTermsAndConditions = false;

  constructor(data?: PartialMessage<PaymentServiceCreateOrUpdateCustomerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceCreateOrUpdateCustomerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer", kind: "message", T: PaymentCustomer },
    { no: 3, name: "accepted_terms_and_conditions", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceCreateOrUpdateCustomerRequest {
    return new PaymentServiceCreateOrUpdateCustomerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceCreateOrUpdateCustomerRequest {
    return new PaymentServiceCreateOrUpdateCustomerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceCreateOrUpdateCustomerRequest {
    return new PaymentServiceCreateOrUpdateCustomerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceCreateOrUpdateCustomerRequest | PlainMessage<PaymentServiceCreateOrUpdateCustomerRequest> | undefined, b: PaymentServiceCreateOrUpdateCustomerRequest | PlainMessage<PaymentServiceCreateOrUpdateCustomerRequest> | undefined): boolean {
    return proto3.util.equals(PaymentServiceCreateOrUpdateCustomerRequest, a, b);
  }
}

/**
 * PaymentServiceCreateOrUpdateCustomerResponse is the response payload for a payment create or update customer request
 *
 * @generated from message api.v1.PaymentServiceCreateOrUpdateCustomerResponse
 */
export class PaymentServiceCreateOrUpdateCustomerResponse extends Message<PaymentServiceCreateOrUpdateCustomerResponse> {
  /**
   * Customer is the customer
   *
   * @generated from field: api.v1.PaymentCustomer customer = 1;
   */
  customer?: PaymentCustomer;

  constructor(data?: PartialMessage<PaymentServiceCreateOrUpdateCustomerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceCreateOrUpdateCustomerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "customer", kind: "message", T: PaymentCustomer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceCreateOrUpdateCustomerResponse {
    return new PaymentServiceCreateOrUpdateCustomerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceCreateOrUpdateCustomerResponse {
    return new PaymentServiceCreateOrUpdateCustomerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceCreateOrUpdateCustomerResponse {
    return new PaymentServiceCreateOrUpdateCustomerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceCreateOrUpdateCustomerResponse | PlainMessage<PaymentServiceCreateOrUpdateCustomerResponse> | undefined, b: PaymentServiceCreateOrUpdateCustomerResponse | PlainMessage<PaymentServiceCreateOrUpdateCustomerResponse> | undefined): boolean {
    return proto3.util.equals(PaymentServiceCreateOrUpdateCustomerResponse, a, b);
  }
}

/**
 * PaymentServiceGetCustomerRequest is the request payload for a payment get customer request
 *
 * @generated from message api.v1.PaymentServiceGetCustomerRequest
 */
export class PaymentServiceGetCustomerRequest extends Message<PaymentServiceGetCustomerRequest> {
  /**
   * Login of the customer
   *
   * @generated from field: string login = 1;
   */
  login = "";

  /**
   * CustomerId of the customer
   *
   * @generated from field: string customer_id = 2;
   */
  customerId = "";

  constructor(data?: PartialMessage<PaymentServiceGetCustomerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceGetCustomerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceGetCustomerRequest {
    return new PaymentServiceGetCustomerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceGetCustomerRequest {
    return new PaymentServiceGetCustomerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceGetCustomerRequest {
    return new PaymentServiceGetCustomerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceGetCustomerRequest | PlainMessage<PaymentServiceGetCustomerRequest> | undefined, b: PaymentServiceGetCustomerRequest | PlainMessage<PaymentServiceGetCustomerRequest> | undefined): boolean {
    return proto3.util.equals(PaymentServiceGetCustomerRequest, a, b);
  }
}

/**
 * PaymentServiceGetCustomerResponse is the response payload for a payment get customer request
 *
 * @generated from message api.v1.PaymentServiceGetCustomerResponse
 */
export class PaymentServiceGetCustomerResponse extends Message<PaymentServiceGetCustomerResponse> {
  /**
   * Customer is the customer
   *
   * @generated from field: api.v1.PaymentCustomer customer = 1;
   */
  customer?: PaymentCustomer;

  constructor(data?: PartialMessage<PaymentServiceGetCustomerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceGetCustomerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "customer", kind: "message", T: PaymentCustomer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceGetCustomerResponse {
    return new PaymentServiceGetCustomerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceGetCustomerResponse {
    return new PaymentServiceGetCustomerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceGetCustomerResponse {
    return new PaymentServiceGetCustomerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceGetCustomerResponse | PlainMessage<PaymentServiceGetCustomerResponse> | undefined, b: PaymentServiceGetCustomerResponse | PlainMessage<PaymentServiceGetCustomerResponse> | undefined): boolean {
    return proto3.util.equals(PaymentServiceGetCustomerResponse, a, b);
  }
}

/**
 * PaymentServiceGetCustomerWithLoginRequest is the request payload for a payment get customer request
 *
 * @generated from message api.v1.PaymentServiceGetCustomerWithLoginRequest
 */
export class PaymentServiceGetCustomerWithLoginRequest extends Message<PaymentServiceGetCustomerWithLoginRequest> {
  /**
   * Login of the customer
   *
   * @generated from field: string login = 1;
   */
  login = "";

  constructor(data?: PartialMessage<PaymentServiceGetCustomerWithLoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceGetCustomerWithLoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceGetCustomerWithLoginRequest {
    return new PaymentServiceGetCustomerWithLoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceGetCustomerWithLoginRequest {
    return new PaymentServiceGetCustomerWithLoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceGetCustomerWithLoginRequest {
    return new PaymentServiceGetCustomerWithLoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceGetCustomerWithLoginRequest | PlainMessage<PaymentServiceGetCustomerWithLoginRequest> | undefined, b: PaymentServiceGetCustomerWithLoginRequest | PlainMessage<PaymentServiceGetCustomerWithLoginRequest> | undefined): boolean {
    return proto3.util.equals(PaymentServiceGetCustomerWithLoginRequest, a, b);
  }
}

/**
 * PaymentServiceGetCustomerWithLoginResponse is the response payload for a payment get customer request
 *
 * @generated from message api.v1.PaymentServiceGetCustomerWithLoginResponse
 */
export class PaymentServiceGetCustomerWithLoginResponse extends Message<PaymentServiceGetCustomerWithLoginResponse> {
  /**
   * Customer is the customer
   *
   * @generated from field: api.v1.PaymentCustomer customer = 1;
   */
  customer?: PaymentCustomer;

  constructor(data?: PartialMessage<PaymentServiceGetCustomerWithLoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceGetCustomerWithLoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "customer", kind: "message", T: PaymentCustomer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceGetCustomerWithLoginResponse {
    return new PaymentServiceGetCustomerWithLoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceGetCustomerWithLoginResponse {
    return new PaymentServiceGetCustomerWithLoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceGetCustomerWithLoginResponse {
    return new PaymentServiceGetCustomerWithLoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceGetCustomerWithLoginResponse | PlainMessage<PaymentServiceGetCustomerWithLoginResponse> | undefined, b: PaymentServiceGetCustomerWithLoginResponse | PlainMessage<PaymentServiceGetCustomerWithLoginResponse> | undefined): boolean {
    return proto3.util.equals(PaymentServiceGetCustomerWithLoginResponse, a, b);
  }
}

/**
 * PaymentServiceCheckIfCustomerExistsRequest is the request payload for a payment check if customer exists request
 *
 * @generated from message api.v1.PaymentServiceCheckIfCustomerExistsRequest
 */
export class PaymentServiceCheckIfCustomerExistsRequest extends Message<PaymentServiceCheckIfCustomerExistsRequest> {
  /**
   * Login of the customer
   *
   * @generated from field: string login = 1;
   */
  login = "";

  constructor(data?: PartialMessage<PaymentServiceCheckIfCustomerExistsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceCheckIfCustomerExistsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceCheckIfCustomerExistsRequest {
    return new PaymentServiceCheckIfCustomerExistsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceCheckIfCustomerExistsRequest {
    return new PaymentServiceCheckIfCustomerExistsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceCheckIfCustomerExistsRequest {
    return new PaymentServiceCheckIfCustomerExistsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceCheckIfCustomerExistsRequest | PlainMessage<PaymentServiceCheckIfCustomerExistsRequest> | undefined, b: PaymentServiceCheckIfCustomerExistsRequest | PlainMessage<PaymentServiceCheckIfCustomerExistsRequest> | undefined): boolean {
    return proto3.util.equals(PaymentServiceCheckIfCustomerExistsRequest, a, b);
  }
}

/**
 * PaymentServiceCheckIfCustomerExistsResponse is the response payload for a payment check if customer exists request
 *
 * @generated from message api.v1.PaymentServiceCheckIfCustomerExistsResponse
 */
export class PaymentServiceCheckIfCustomerExistsResponse extends Message<PaymentServiceCheckIfCustomerExistsResponse> {
  /**
   * Customer is the customer
   *
   * @generated from field: api.v1.PaymentCustomer customer = 1;
   */
  customer?: PaymentCustomer;

  /**
   * Exists indicates if this customer exists
   *
   * @generated from field: bool exists = 2;
   */
  exists = false;

  constructor(data?: PartialMessage<PaymentServiceCheckIfCustomerExistsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceCheckIfCustomerExistsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "customer", kind: "message", T: PaymentCustomer },
    { no: 2, name: "exists", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceCheckIfCustomerExistsResponse {
    return new PaymentServiceCheckIfCustomerExistsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceCheckIfCustomerExistsResponse {
    return new PaymentServiceCheckIfCustomerExistsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceCheckIfCustomerExistsResponse {
    return new PaymentServiceCheckIfCustomerExistsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceCheckIfCustomerExistsResponse | PlainMessage<PaymentServiceCheckIfCustomerExistsResponse> | undefined, b: PaymentServiceCheckIfCustomerExistsResponse | PlainMessage<PaymentServiceCheckIfCustomerExistsResponse> | undefined): boolean {
    return proto3.util.equals(PaymentServiceCheckIfCustomerExistsResponse, a, b);
  }
}

/**
 * PaymentServiceHasPaymentMethodRequest is the request payload for a has payment request
 *
 * @generated from message api.v1.PaymentServiceHasPaymentMethodRequest
 */
export class PaymentServiceHasPaymentMethodRequest extends Message<PaymentServiceHasPaymentMethodRequest> {
  /**
   * Login of the customer
   *
   * @generated from field: string login = 1;
   */
  login = "";

  constructor(data?: PartialMessage<PaymentServiceHasPaymentMethodRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceHasPaymentMethodRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceHasPaymentMethodRequest {
    return new PaymentServiceHasPaymentMethodRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceHasPaymentMethodRequest {
    return new PaymentServiceHasPaymentMethodRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceHasPaymentMethodRequest {
    return new PaymentServiceHasPaymentMethodRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceHasPaymentMethodRequest | PlainMessage<PaymentServiceHasPaymentMethodRequest> | undefined, b: PaymentServiceHasPaymentMethodRequest | PlainMessage<PaymentServiceHasPaymentMethodRequest> | undefined): boolean {
    return proto3.util.equals(PaymentServiceHasPaymentMethodRequest, a, b);
  }
}

/**
 * PaymentServiceHasPaymentMethodResponse is the response payload for a has payment request
 *
 * @generated from message api.v1.PaymentServiceHasPaymentMethodResponse
 */
export class PaymentServiceHasPaymentMethodResponse extends Message<PaymentServiceHasPaymentMethodResponse> {
  /**
   * Exists indicates if this customer has a payment method
   *
   * @generated from field: bool exists = 1;
   */
  exists = false;

  /**
   * CouponLeft is true if there is still free amount on the coupon left
   *
   * @generated from field: bool coupon_left = 2;
   */
  couponLeft = false;

  /**
   * PositiveBalance indicates if the customer still has positive balance
   *
   * @generated from field: bool positive_balance = 3;
   */
  positiveBalance = false;

  constructor(data?: PartialMessage<PaymentServiceHasPaymentMethodResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceHasPaymentMethodResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exists", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "coupon_left", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "positive_balance", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceHasPaymentMethodResponse {
    return new PaymentServiceHasPaymentMethodResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceHasPaymentMethodResponse {
    return new PaymentServiceHasPaymentMethodResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceHasPaymentMethodResponse {
    return new PaymentServiceHasPaymentMethodResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceHasPaymentMethodResponse | PlainMessage<PaymentServiceHasPaymentMethodResponse> | undefined, b: PaymentServiceHasPaymentMethodResponse | PlainMessage<PaymentServiceHasPaymentMethodResponse> | undefined): boolean {
    return proto3.util.equals(PaymentServiceHasPaymentMethodResponse, a, b);
  }
}

/**
 * PaymentServiceDeletePaymentMethodRequest is the request payload for a delete payment request
 *
 * @generated from message api.v1.PaymentServiceDeletePaymentMethodRequest
 */
export class PaymentServiceDeletePaymentMethodRequest extends Message<PaymentServiceDeletePaymentMethodRequest> {
  /**
   * Login of the customer
   *
   * @generated from field: string login = 1;
   */
  login = "";

  constructor(data?: PartialMessage<PaymentServiceDeletePaymentMethodRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceDeletePaymentMethodRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceDeletePaymentMethodRequest {
    return new PaymentServiceDeletePaymentMethodRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceDeletePaymentMethodRequest {
    return new PaymentServiceDeletePaymentMethodRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceDeletePaymentMethodRequest {
    return new PaymentServiceDeletePaymentMethodRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceDeletePaymentMethodRequest | PlainMessage<PaymentServiceDeletePaymentMethodRequest> | undefined, b: PaymentServiceDeletePaymentMethodRequest | PlainMessage<PaymentServiceDeletePaymentMethodRequest> | undefined): boolean {
    return proto3.util.equals(PaymentServiceDeletePaymentMethodRequest, a, b);
  }
}

/**
 * PaymentServiceDeletePaymentMethodResponse is the response payload for a delete payment request
 *
 * @generated from message api.v1.PaymentServiceDeletePaymentMethodResponse
 */
export class PaymentServiceDeletePaymentMethodResponse extends Message<PaymentServiceDeletePaymentMethodResponse> {
  constructor(data?: PartialMessage<PaymentServiceDeletePaymentMethodResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceDeletePaymentMethodResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceDeletePaymentMethodResponse {
    return new PaymentServiceDeletePaymentMethodResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceDeletePaymentMethodResponse {
    return new PaymentServiceDeletePaymentMethodResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceDeletePaymentMethodResponse {
    return new PaymentServiceDeletePaymentMethodResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceDeletePaymentMethodResponse | PlainMessage<PaymentServiceDeletePaymentMethodResponse> | undefined, b: PaymentServiceDeletePaymentMethodResponse | PlainMessage<PaymentServiceDeletePaymentMethodResponse> | undefined): boolean {
    return proto3.util.equals(PaymentServiceDeletePaymentMethodResponse, a, b);
  }
}

/**
 * PaymentServiceGetSubscriptionUsageRequest is the request payload for a get subscription usage request
 *
 * @generated from message api.v1.PaymentServiceGetSubscriptionUsageRequest
 */
export class PaymentServiceGetSubscriptionUsageRequest extends Message<PaymentServiceGetSubscriptionUsageRequest> {
  /**
   * Login of the customer
   *
   * @generated from field: string login = 1;
   */
  login = "";

  constructor(data?: PartialMessage<PaymentServiceGetSubscriptionUsageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceGetSubscriptionUsageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceGetSubscriptionUsageRequest {
    return new PaymentServiceGetSubscriptionUsageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceGetSubscriptionUsageRequest {
    return new PaymentServiceGetSubscriptionUsageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceGetSubscriptionUsageRequest {
    return new PaymentServiceGetSubscriptionUsageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceGetSubscriptionUsageRequest | PlainMessage<PaymentServiceGetSubscriptionUsageRequest> | undefined, b: PaymentServiceGetSubscriptionUsageRequest | PlainMessage<PaymentServiceGetSubscriptionUsageRequest> | undefined): boolean {
    return proto3.util.equals(PaymentServiceGetSubscriptionUsageRequest, a, b);
  }
}

/**
 * PaymentServiceGetSubscriptionUsageResponse is the response payload for a get subscription usage request
 *
 * @generated from message api.v1.PaymentServiceGetSubscriptionUsageResponse
 */
export class PaymentServiceGetSubscriptionUsageResponse extends Message<PaymentServiceGetSubscriptionUsageResponse> {
  /**
   * SubscriptionUsageItems is a list of usage for all subscriptions
   *
   * @generated from field: repeated api.v1.SubscriptionUsageItem subscription_usage_items = 1;
   */
  subscriptionUsageItems: SubscriptionUsageItem[] = [];

  constructor(data?: PartialMessage<PaymentServiceGetSubscriptionUsageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceGetSubscriptionUsageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription_usage_items", kind: "message", T: SubscriptionUsageItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceGetSubscriptionUsageResponse {
    return new PaymentServiceGetSubscriptionUsageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceGetSubscriptionUsageResponse {
    return new PaymentServiceGetSubscriptionUsageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceGetSubscriptionUsageResponse {
    return new PaymentServiceGetSubscriptionUsageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceGetSubscriptionUsageResponse | PlainMessage<PaymentServiceGetSubscriptionUsageResponse> | undefined, b: PaymentServiceGetSubscriptionUsageResponse | PlainMessage<PaymentServiceGetSubscriptionUsageResponse> | undefined): boolean {
    return proto3.util.equals(PaymentServiceGetSubscriptionUsageResponse, a, b);
  }
}

/**
 * PaymentServiceHasPaymentMethodRequest is the request payload for a get invoices request
 *
 * @generated from message api.v1.PaymentServiceGetInvoicesRequest
 */
export class PaymentServiceGetInvoicesRequest extends Message<PaymentServiceGetInvoicesRequest> {
  /**
   * Login of the customer
   *
   * @generated from field: string login = 1;
   */
  login = "";

  /**
   * CustomerId is the id of the customer
   *
   * @generated from field: string customer_id = 2;
   */
  customerId = "";

  constructor(data?: PartialMessage<PaymentServiceGetInvoicesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceGetInvoicesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceGetInvoicesRequest {
    return new PaymentServiceGetInvoicesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceGetInvoicesRequest {
    return new PaymentServiceGetInvoicesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceGetInvoicesRequest {
    return new PaymentServiceGetInvoicesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceGetInvoicesRequest | PlainMessage<PaymentServiceGetInvoicesRequest> | undefined, b: PaymentServiceGetInvoicesRequest | PlainMessage<PaymentServiceGetInvoicesRequest> | undefined): boolean {
    return proto3.util.equals(PaymentServiceGetInvoicesRequest, a, b);
  }
}

/**
 * PaymentServiceGetInvoicesResponse is the response payload for a get invoices request
 *
 * @generated from message api.v1.PaymentServiceGetInvoicesResponse
 */
export class PaymentServiceGetInvoicesResponse extends Message<PaymentServiceGetInvoicesResponse> {
  /**
   * Invoices is the list of invoices
   *
   * @generated from field: repeated api.v1.Invoice invoices = 1;
   */
  invoices: Invoice[] = [];

  constructor(data?: PartialMessage<PaymentServiceGetInvoicesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceGetInvoicesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invoices", kind: "message", T: Invoice, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceGetInvoicesResponse {
    return new PaymentServiceGetInvoicesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceGetInvoicesResponse {
    return new PaymentServiceGetInvoicesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceGetInvoicesResponse {
    return new PaymentServiceGetInvoicesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceGetInvoicesResponse | PlainMessage<PaymentServiceGetInvoicesResponse> | undefined, b: PaymentServiceGetInvoicesResponse | PlainMessage<PaymentServiceGetInvoicesResponse> | undefined): boolean {
    return proto3.util.equals(PaymentServiceGetInvoicesResponse, a, b);
  }
}

/**
 * PaymentServiceGetDefaultPricesRequest is the request payload for a get default prices request
 *
 * @generated from message api.v1.PaymentServiceGetDefaultPricesRequest
 */
export class PaymentServiceGetDefaultPricesRequest extends Message<PaymentServiceGetDefaultPricesRequest> {
  constructor(data?: PartialMessage<PaymentServiceGetDefaultPricesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceGetDefaultPricesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceGetDefaultPricesRequest {
    return new PaymentServiceGetDefaultPricesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceGetDefaultPricesRequest {
    return new PaymentServiceGetDefaultPricesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceGetDefaultPricesRequest {
    return new PaymentServiceGetDefaultPricesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceGetDefaultPricesRequest | PlainMessage<PaymentServiceGetDefaultPricesRequest> | undefined, b: PaymentServiceGetDefaultPricesRequest | PlainMessage<PaymentServiceGetDefaultPricesRequest> | undefined): boolean {
    return proto3.util.equals(PaymentServiceGetDefaultPricesRequest, a, b);
  }
}

/**
 * PaymentServiceGetDefaultPricesResponse is the response payload for a get default prices request
 *
 * @generated from message api.v1.PaymentServiceGetDefaultPricesResponse
 */
export class PaymentServiceGetDefaultPricesResponse extends Message<PaymentServiceGetDefaultPricesResponse> {
  /**
   * Prices is the list of default prices
   *
   * @generated from field: repeated api.v1.Price prices = 1;
   */
  prices: Price[] = [];

  constructor(data?: PartialMessage<PaymentServiceGetDefaultPricesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceGetDefaultPricesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prices", kind: "message", T: Price, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceGetDefaultPricesResponse {
    return new PaymentServiceGetDefaultPricesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceGetDefaultPricesResponse {
    return new PaymentServiceGetDefaultPricesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceGetDefaultPricesResponse {
    return new PaymentServiceGetDefaultPricesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceGetDefaultPricesResponse | PlainMessage<PaymentServiceGetDefaultPricesResponse> | undefined, b: PaymentServiceGetDefaultPricesResponse | PlainMessage<PaymentServiceGetDefaultPricesResponse> | undefined): boolean {
    return proto3.util.equals(PaymentServiceGetDefaultPricesResponse, a, b);
  }
}

/**
 * PaymentServiceCheckAdmittedRequest is the request payload for a check admitted request
 *
 * @generated from message api.v1.PaymentServiceCheckAdmittedRequest
 */
export class PaymentServiceCheckAdmittedRequest extends Message<PaymentServiceCheckAdmittedRequest> {
  /**
   * Login of the customer
   *
   * @generated from field: string login = 1;
   */
  login = "";

  constructor(data?: PartialMessage<PaymentServiceCheckAdmittedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceCheckAdmittedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceCheckAdmittedRequest {
    return new PaymentServiceCheckAdmittedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceCheckAdmittedRequest {
    return new PaymentServiceCheckAdmittedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceCheckAdmittedRequest {
    return new PaymentServiceCheckAdmittedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceCheckAdmittedRequest | PlainMessage<PaymentServiceCheckAdmittedRequest> | undefined, b: PaymentServiceCheckAdmittedRequest | PlainMessage<PaymentServiceCheckAdmittedRequest> | undefined): boolean {
    return proto3.util.equals(PaymentServiceCheckAdmittedRequest, a, b);
  }
}

/**
 * PaymentServiceCheckAdmittedResponse is the response payload for a check admitted request
 *
 * @generated from message api.v1.PaymentServiceCheckAdmittedResponse
 */
export class PaymentServiceCheckAdmittedResponse extends Message<PaymentServiceCheckAdmittedResponse> {
  /**
   * Admitted indicates if the customer is already admitted to use the service
   *
   * @generated from field: bool admitted = 1;
   */
  admitted = false;

  /**
   * Requested indicates if the customer requested admittance
   *
   * @generated from field: bool requested = 2;
   */
  requested = false;

  constructor(data?: PartialMessage<PaymentServiceCheckAdmittedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceCheckAdmittedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admitted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "requested", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceCheckAdmittedResponse {
    return new PaymentServiceCheckAdmittedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceCheckAdmittedResponse {
    return new PaymentServiceCheckAdmittedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceCheckAdmittedResponse {
    return new PaymentServiceCheckAdmittedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceCheckAdmittedResponse | PlainMessage<PaymentServiceCheckAdmittedResponse> | undefined, b: PaymentServiceCheckAdmittedResponse | PlainMessage<PaymentServiceCheckAdmittedResponse> | undefined): boolean {
    return proto3.util.equals(PaymentServiceCheckAdmittedResponse, a, b);
  }
}

/**
 * PaymentServiceRequestAdmissionRequest is the request payload for a admission request
 *
 * @generated from message api.v1.PaymentServiceRequestAdmissionRequest
 */
export class PaymentServiceRequestAdmissionRequest extends Message<PaymentServiceRequestAdmissionRequest> {
  /**
   * Login of the customer
   *
   * @generated from field: string login = 1;
   */
  login = "";

  /**
   * Customer is the customer
   *
   * @generated from field: api.v1.PaymentCustomer customer = 2;
   */
  customer?: PaymentCustomer;

  /**
   * AcceptedTermsAndConditions indicates if the customer already accepted the terms and conditions
   *
   * @generated from field: bool accepted_terms_and_conditions = 3;
   */
  acceptedTermsAndConditions = false;

  /**
   * EmailConsent indicates if the customer already gave consent to email
   *
   * @generated from field: bool email_consent = 4;
   */
  emailConsent = false;

  constructor(data?: PartialMessage<PaymentServiceRequestAdmissionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceRequestAdmissionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer", kind: "message", T: PaymentCustomer },
    { no: 3, name: "accepted_terms_and_conditions", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "email_consent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceRequestAdmissionRequest {
    return new PaymentServiceRequestAdmissionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceRequestAdmissionRequest {
    return new PaymentServiceRequestAdmissionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceRequestAdmissionRequest {
    return new PaymentServiceRequestAdmissionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceRequestAdmissionRequest | PlainMessage<PaymentServiceRequestAdmissionRequest> | undefined, b: PaymentServiceRequestAdmissionRequest | PlainMessage<PaymentServiceRequestAdmissionRequest> | undefined): boolean {
    return proto3.util.equals(PaymentServiceRequestAdmissionRequest, a, b);
  }
}

/**
 * PaymentServiceRequestAdmissionResponse is the response payload for a admission request
 *
 * @generated from message api.v1.PaymentServiceRequestAdmissionResponse
 */
export class PaymentServiceRequestAdmissionResponse extends Message<PaymentServiceRequestAdmissionResponse> {
  constructor(data?: PartialMessage<PaymentServiceRequestAdmissionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceRequestAdmissionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceRequestAdmissionResponse {
    return new PaymentServiceRequestAdmissionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceRequestAdmissionResponse {
    return new PaymentServiceRequestAdmissionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceRequestAdmissionResponse {
    return new PaymentServiceRequestAdmissionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceRequestAdmissionResponse | PlainMessage<PaymentServiceRequestAdmissionResponse> | undefined, b: PaymentServiceRequestAdmissionResponse | PlainMessage<PaymentServiceRequestAdmissionResponse> | undefined): boolean {
    return proto3.util.equals(PaymentServiceRequestAdmissionResponse, a, b);
  }
}

/**
 * PaymentServiceHasChargeableResourcesRequest is the request payload for a has chargeable request
 *
 * @generated from message api.v1.PaymentServiceHasChargeableResourcesRequest
 */
export class PaymentServiceHasChargeableResourcesRequest extends Message<PaymentServiceHasChargeableResourcesRequest> {
  /**
   * Login of the customer
   *
   * @generated from field: string login = 1;
   */
  login = "";

  constructor(data?: PartialMessage<PaymentServiceHasChargeableResourcesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceHasChargeableResourcesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceHasChargeableResourcesRequest {
    return new PaymentServiceHasChargeableResourcesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceHasChargeableResourcesRequest {
    return new PaymentServiceHasChargeableResourcesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceHasChargeableResourcesRequest {
    return new PaymentServiceHasChargeableResourcesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceHasChargeableResourcesRequest | PlainMessage<PaymentServiceHasChargeableResourcesRequest> | undefined, b: PaymentServiceHasChargeableResourcesRequest | PlainMessage<PaymentServiceHasChargeableResourcesRequest> | undefined): boolean {
    return proto3.util.equals(PaymentServiceHasChargeableResourcesRequest, a, b);
  }
}

/**
 * PaymentServiceHasChargeableResourcesResponse is the response payload for a has chargeable request
 *
 * @generated from message api.v1.PaymentServiceHasChargeableResourcesResponse
 */
export class PaymentServiceHasChargeableResourcesResponse extends Message<PaymentServiceHasChargeableResourcesResponse> {
  /**
   * HasResources indicates if the customer has actually chargable resources
   *
   * @generated from field: bool has_resources = 1;
   */
  hasResources = false;

  constructor(data?: PartialMessage<PaymentServiceHasChargeableResourcesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceHasChargeableResourcesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "has_resources", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceHasChargeableResourcesResponse {
    return new PaymentServiceHasChargeableResourcesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceHasChargeableResourcesResponse {
    return new PaymentServiceHasChargeableResourcesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceHasChargeableResourcesResponse {
    return new PaymentServiceHasChargeableResourcesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceHasChargeableResourcesResponse | PlainMessage<PaymentServiceHasChargeableResourcesResponse> | undefined, b: PaymentServiceHasChargeableResourcesResponse | PlainMessage<PaymentServiceHasChargeableResourcesResponse> | undefined): boolean {
    return proto3.util.equals(PaymentServiceHasChargeableResourcesResponse, a, b);
  }
}

/**
 * PayentServiceSetOnboardedRequest changes the onboarded status of the given customer
 *
 * @generated from message api.v1.PaymentServiceSetOnboardedRequest
 */
export class PaymentServiceSetOnboardedRequest extends Message<PaymentServiceSetOnboardedRequest> {
  /**
   * Login of the customer
   *
   * @generated from field: string login = 1;
   */
  login = "";

  /**
   * Onboarded indicates if the customer has seen the onboarde message
   *
   * @generated from field: bool onboarded = 2;
   */
  onboarded = false;

  constructor(data?: PartialMessage<PaymentServiceSetOnboardedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceSetOnboardedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "onboarded", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceSetOnboardedRequest {
    return new PaymentServiceSetOnboardedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceSetOnboardedRequest {
    return new PaymentServiceSetOnboardedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceSetOnboardedRequest {
    return new PaymentServiceSetOnboardedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceSetOnboardedRequest | PlainMessage<PaymentServiceSetOnboardedRequest> | undefined, b: PaymentServiceSetOnboardedRequest | PlainMessage<PaymentServiceSetOnboardedRequest> | undefined): boolean {
    return proto3.util.equals(PaymentServiceSetOnboardedRequest, a, b);
  }
}

/**
 * PaymentServiceSetOnboardedResponse respond to the changed status of the given customer
 *
 * @generated from message api.v1.PaymentServiceSetOnboardedResponse
 */
export class PaymentServiceSetOnboardedResponse extends Message<PaymentServiceSetOnboardedResponse> {
  /**
   * Onboarded indicates if the customer has seen the onboarded message
   *
   * @generated from field: bool onboarded = 1;
   */
  onboarded = false;

  constructor(data?: PartialMessage<PaymentServiceSetOnboardedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceSetOnboardedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "onboarded", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceSetOnboardedResponse {
    return new PaymentServiceSetOnboardedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceSetOnboardedResponse {
    return new PaymentServiceSetOnboardedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceSetOnboardedResponse {
    return new PaymentServiceSetOnboardedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceSetOnboardedResponse | PlainMessage<PaymentServiceSetOnboardedResponse> | undefined, b: PaymentServiceSetOnboardedResponse | PlainMessage<PaymentServiceSetOnboardedResponse> | undefined): boolean {
    return proto3.util.equals(PaymentServiceSetOnboardedResponse, a, b);
  }
}

/**
 * PaymentServiceGetOnboardedRequest check the onboarded status
 *
 * @generated from message api.v1.PaymentServiceGetOnboardedRequest
 */
export class PaymentServiceGetOnboardedRequest extends Message<PaymentServiceGetOnboardedRequest> {
  /**
   * Login of the customer
   *
   * @generated from field: string login = 1;
   */
  login = "";

  constructor(data?: PartialMessage<PaymentServiceGetOnboardedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceGetOnboardedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceGetOnboardedRequest {
    return new PaymentServiceGetOnboardedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceGetOnboardedRequest {
    return new PaymentServiceGetOnboardedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceGetOnboardedRequest {
    return new PaymentServiceGetOnboardedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceGetOnboardedRequest | PlainMessage<PaymentServiceGetOnboardedRequest> | undefined, b: PaymentServiceGetOnboardedRequest | PlainMessage<PaymentServiceGetOnboardedRequest> | undefined): boolean {
    return proto3.util.equals(PaymentServiceGetOnboardedRequest, a, b);
  }
}

/**
 * PaymentServiceGetOnboardedRequest returns the onboarded status
 *
 * @generated from message api.v1.PaymentServiceGetOnboardedResponse
 */
export class PaymentServiceGetOnboardedResponse extends Message<PaymentServiceGetOnboardedResponse> {
  /**
   * Onboarded indicates if the customer has seen the onboarded message
   *
   * @generated from field: bool onboarded = 1;
   */
  onboarded = false;

  constructor(data?: PartialMessage<PaymentServiceGetOnboardedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PaymentServiceGetOnboardedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "onboarded", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentServiceGetOnboardedResponse {
    return new PaymentServiceGetOnboardedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentServiceGetOnboardedResponse {
    return new PaymentServiceGetOnboardedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentServiceGetOnboardedResponse {
    return new PaymentServiceGetOnboardedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentServiceGetOnboardedResponse | PlainMessage<PaymentServiceGetOnboardedResponse> | undefined, b: PaymentServiceGetOnboardedResponse | PlainMessage<PaymentServiceGetOnboardedResponse> | undefined): boolean {
    return proto3.util.equals(PaymentServiceGetOnboardedResponse, a, b);
  }
}

