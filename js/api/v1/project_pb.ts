// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file api/v1/project.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * ProjectServiceWatchRevisionRequest starts the stream of projectrevisions
 *
 * @generated from message api.v1.ProjectServiceWatchRevisionRequest
 */
export class ProjectServiceWatchRevisionRequest extends Message<ProjectServiceWatchRevisionRequest> {
  /**
   * project to watch for changes
   *
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<ProjectServiceWatchRevisionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.v1.ProjectServiceWatchRevisionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceWatchRevisionRequest {
    return new ProjectServiceWatchRevisionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceWatchRevisionRequest {
    return new ProjectServiceWatchRevisionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceWatchRevisionRequest {
    return new ProjectServiceWatchRevisionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceWatchRevisionRequest | PlainMessage<ProjectServiceWatchRevisionRequest> | undefined, b: ProjectServiceWatchRevisionRequest | PlainMessage<ProjectServiceWatchRevisionRequest> | undefined): boolean {
    return proto3.util.equals(ProjectServiceWatchRevisionRequest, a, b);
  }
}

/**
 * ProjectServiceWatchRevisionResponse is returned in the stream
 *
 * @generated from message api.v1.ProjectServiceWatchRevisionResponse
 */
export class ProjectServiceWatchRevisionResponse extends Message<ProjectServiceWatchRevisionResponse> {
  /**
   * the project this watch is ment for
   *
   * @generated from field: string project = 1;
   */
  project = "";

  /**
   * revision is incremented if any of the resources from the project has changed
   *
   * @generated from field: uint64 revision = 2;
   */
  revision = protoInt64.zero;

  /**
   * resources show the revision per resource to have a more granular view.
   *
   * @generated from field: api.v1.ResourceRevisions resources = 3;
   */
  resources?: ResourceRevisions;

  constructor(data?: PartialMessage<ProjectServiceWatchRevisionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.v1.ProjectServiceWatchRevisionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "revision", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "resources", kind: "message", T: ResourceRevisions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceWatchRevisionResponse {
    return new ProjectServiceWatchRevisionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceWatchRevisionResponse {
    return new ProjectServiceWatchRevisionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceWatchRevisionResponse {
    return new ProjectServiceWatchRevisionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceWatchRevisionResponse | PlainMessage<ProjectServiceWatchRevisionResponse> | undefined, b: ProjectServiceWatchRevisionResponse | PlainMessage<ProjectServiceWatchRevisionResponse> | undefined): boolean {
    return proto3.util.equals(ProjectServiceWatchRevisionResponse, a, b);
  }
}

/**
 * ResourceRevisions contain revisions by resource
 *
 * @generated from message api.v1.ResourceRevisions
 */
export class ResourceRevisions extends Message<ResourceRevisions> {
  /**
   * cluster revision is incremented if anything changed on the projects clusters.
   *
   * @generated from field: uint64 cluster = 1;
   */
  cluster = protoInt64.zero;

  /**
   * volume revision is incremented if anything changed on the projects volumes.
   *
   * @generated from field: uint64 volume = 2;
   */
  volume = protoInt64.zero;

  /**
   * ip revision is incremented if anything changed on the projects ips.
   *
   * @generated from field: uint64 ip = 3;
   */
  ip = protoInt64.zero;

  constructor(data?: PartialMessage<ResourceRevisions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.v1.ResourceRevisions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "volume", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "ip", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceRevisions {
    return new ResourceRevisions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceRevisions {
    return new ResourceRevisions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceRevisions {
    return new ResourceRevisions().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceRevisions | PlainMessage<ResourceRevisions> | undefined, b: ResourceRevisions | PlainMessage<ResourceRevisions> | undefined): boolean {
    return proto3.util.equals(ResourceRevisions, a, b);
  }
}

