// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api/v1/project.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { ProjectRole } from "./common_pb.js";

/**
 * Project defines a group of resources belonging to a tenant
 * a tenant can have multiple projects
 *
 * @generated from message api.v1.Project
 */
export class Project extends Message<Project> {
  /**
   * Uuid of this project
   *
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * Name of this project must be unique per tenant
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Description of this project
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * Tenant this project belongs to
   *
   * @generated from field: string tenant = 4;
   */
  tenant = "";

  /**
   * IsDefaultProject is true if this is the default project of the tenant.
   *
   * @generated from field: bool is_default_project = 5;
   */
  isDefaultProject = false;

  /**
   * CreatedAt the date when this project was created
   *
   * @generated from field: google.protobuf.Timestamp created_at = 10;
   */
  createdAt?: Timestamp;

  /**
   * UpdatedAt the date when this project was updated
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 11;
   */
  updatedAt?: Timestamp;

  /**
   * AvatarUrl of the Project
   *
   * @generated from field: optional string avatar_url = 12;
   */
  avatarUrl?: string;

  constructor(data?: PartialMessage<Project>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Project";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "is_default_project", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "created_at", kind: "message", T: Timestamp },
    { no: 11, name: "updated_at", kind: "message", T: Timestamp },
    { no: 12, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Project {
    return new Project().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJsonString(jsonString, options);
  }

  static equals(a: Project | PlainMessage<Project> | undefined, b: Project | PlainMessage<Project> | undefined): boolean {
    return proto3.util.equals(Project, a, b);
  }
}

/**
 * ProjectMember defines a user that participates at a project
 *
 * @generated from message api.v1.ProjectMember
 */
export class ProjectMember extends Message<ProjectMember> {
  /**
   * Id is the user id of the member
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Role is the role of the member
   *
   * @generated from field: api.v1.ProjectRole role = 2;
   */
  role = ProjectRole.UNSPECIFIED;

  /**
   * InheritedMembership indicates that this member has implicit permissions on the project through his membership within the tenant.
   * This member does not have direct project membership but gains permissions on this project from the role he has in the tenant.
   * Inherited memberships are not included in member lists for users with guest permission but only for direct tenant members.
   *
   * @generated from field: bool inherited_membership = 3;
   */
  inheritedMembership = false;

  /**
   * CreatedAt the date when the member was added to the project
   *
   * @generated from field: google.protobuf.Timestamp created_at = 10;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<ProjectMember>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectMember";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "enum", T: proto3.getEnumType(ProjectRole) },
    { no: 3, name: "inherited_membership", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectMember {
    return new ProjectMember().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectMember {
    return new ProjectMember().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectMember {
    return new ProjectMember().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectMember | PlainMessage<ProjectMember> | undefined, b: ProjectMember | PlainMessage<ProjectMember> | undefined): boolean {
    return proto3.util.equals(ProjectMember, a, b);
  }
}

/**
 * ProjectInvite defines invite to project
 *
 * @generated from message api.v1.ProjectInvite
 */
export class ProjectInvite extends Message<ProjectInvite> {
  /**
   * Secret is the secret part of the invite, typically part of the url
   *
   * @generated from field: string secret = 1;
   */
  secret = "";

  /**
   * Project is the project id for which this invite was created
   *
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * Role is the role in this project the user will get after accepting the invitation
   *
   * @generated from field: api.v1.ProjectRole role = 3;
   */
  role = ProjectRole.UNSPECIFIED;

  /**
   * Joined is false as long as a user has not accepted the invite
   *
   * @generated from field: bool joined = 4;
   */
  joined = false;

  /**
   * ProjectName is the project name for which this invite was created
   *
   * @generated from field: string project_name = 5;
   */
  projectName = "";

  /**
   * Tenant is the login of tenant who invites to join this project
   *
   * @generated from field: string tenant = 6;
   */
  tenant = "";

  /**
   * TenantName is the name of tenant who invites to join this project
   *
   * @generated from field: string tenant_name = 7;
   */
  tenantName = "";

  /**
   * ExpiresAt the date when this invite expires
   *
   * @generated from field: google.protobuf.Timestamp expires_at = 10;
   */
  expiresAt?: Timestamp;

  /**
   * JoinedAt the date when the member accepted this invite
   *
   * @generated from field: google.protobuf.Timestamp joined_at = 11;
   */
  joinedAt?: Timestamp;

  constructor(data?: PartialMessage<ProjectInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "enum", T: proto3.getEnumType(ProjectRole) },
    { no: 4, name: "joined", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "project_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "tenant_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "expires_at", kind: "message", T: Timestamp },
    { no: 11, name: "joined_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectInvite {
    return new ProjectInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectInvite {
    return new ProjectInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectInvite {
    return new ProjectInvite().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectInvite | PlainMessage<ProjectInvite> | undefined, b: ProjectInvite | PlainMessage<ProjectInvite> | undefined): boolean {
    return proto3.util.equals(ProjectInvite, a, b);
  }
}

/**
 * ProjectServiceListRequest is the request payload to list all projects
 *
 * @generated from message api.v1.ProjectServiceListRequest
 */
export class ProjectServiceListRequest extends Message<ProjectServiceListRequest> {
  /**
   * Name list only projects with this name
   *
   * @generated from field: optional string name = 1;
   */
  name?: string;

  /**
   * Tenant list only projects of this tenant
   *
   * @generated from field: optional string tenant = 2;
   */
  tenant?: string;

  constructor(data?: PartialMessage<ProjectServiceListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceListRequest {
    return new ProjectServiceListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceListRequest {
    return new ProjectServiceListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceListRequest {
    return new ProjectServiceListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceListRequest | PlainMessage<ProjectServiceListRequest> | undefined, b: ProjectServiceListRequest | PlainMessage<ProjectServiceListRequest> | undefined): boolean {
    return proto3.util.equals(ProjectServiceListRequest, a, b);
  }
}

/**
 * ProjectServiceListResponse is the response payload to list all projects
 *
 * @generated from message api.v1.ProjectServiceListResponse
 */
export class ProjectServiceListResponse extends Message<ProjectServiceListResponse> {
  /**
   * Projects is a list of all your projects
   *
   * @generated from field: repeated api.v1.Project projects = 1;
   */
  projects: Project[] = [];

  constructor(data?: PartialMessage<ProjectServiceListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "projects", kind: "message", T: Project, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceListResponse {
    return new ProjectServiceListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceListResponse {
    return new ProjectServiceListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceListResponse {
    return new ProjectServiceListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceListResponse | PlainMessage<ProjectServiceListResponse> | undefined, b: ProjectServiceListResponse | PlainMessage<ProjectServiceListResponse> | undefined): boolean {
    return proto3.util.equals(ProjectServiceListResponse, a, b);
  }
}

/**
 * ProjectServiceGetRequest is the request payload to get a project
 *
 * @generated from message api.v1.ProjectServiceGetRequest
 */
export class ProjectServiceGetRequest extends Message<ProjectServiceGetRequest> {
  /**
   * Project is the uuid of the project to get
   *
   * @generated from field: string project = 1;
   */
  project = "";

  constructor(data?: PartialMessage<ProjectServiceGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceGetRequest {
    return new ProjectServiceGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceGetRequest {
    return new ProjectServiceGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceGetRequest {
    return new ProjectServiceGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceGetRequest | PlainMessage<ProjectServiceGetRequest> | undefined, b: ProjectServiceGetRequest | PlainMessage<ProjectServiceGetRequest> | undefined): boolean {
    return proto3.util.equals(ProjectServiceGetRequest, a, b);
  }
}

/**
 * ProjectServiceGetResponse is the response payload to get a projects
 *
 * @generated from message api.v1.ProjectServiceGetResponse
 */
export class ProjectServiceGetResponse extends Message<ProjectServiceGetResponse> {
  /**
   * Project is the project
   *
   * @generated from field: api.v1.Project project = 1;
   */
  project?: Project;

  /**
   * ProjectMembers in this project, projects guests will only see direct project members and not implicit memberships from tenant permissions
   *
   * @generated from field: repeated api.v1.ProjectMember project_members = 2;
   */
  projectMembers: ProjectMember[] = [];

  constructor(data?: PartialMessage<ProjectServiceGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
    { no: 2, name: "project_members", kind: "message", T: ProjectMember, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceGetResponse {
    return new ProjectServiceGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceGetResponse {
    return new ProjectServiceGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceGetResponse {
    return new ProjectServiceGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceGetResponse | PlainMessage<ProjectServiceGetResponse> | undefined, b: ProjectServiceGetResponse | PlainMessage<ProjectServiceGetResponse> | undefined): boolean {
    return proto3.util.equals(ProjectServiceGetResponse, a, b);
  }
}

/**
 * ProjectServiceCreateRequest is the request payload to Create a project
 *
 * @generated from message api.v1.ProjectServiceCreateRequest
 */
export class ProjectServiceCreateRequest extends Message<ProjectServiceCreateRequest> {
  /**
   * Login is the tenant of this project
   * TODO: is login really a good name?
   *
   * @generated from field: string login = 1;
   */
  login = "";

  /**
   * Name of this project, unique per tenant
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Description of this project
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * Avatar URL of the project
   *
   * @generated from field: optional string avatar_url = 4;
   */
  avatarUrl?: string;

  constructor(data?: PartialMessage<ProjectServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "login", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceCreateRequest {
    return new ProjectServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceCreateRequest {
    return new ProjectServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceCreateRequest {
    return new ProjectServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceCreateRequest | PlainMessage<ProjectServiceCreateRequest> | undefined, b: ProjectServiceCreateRequest | PlainMessage<ProjectServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(ProjectServiceCreateRequest, a, b);
  }
}

/**
 * ProjectServiceCreateResponse is the response payload of creation of a project
 *
 * @generated from message api.v1.ProjectServiceCreateResponse
 */
export class ProjectServiceCreateResponse extends Message<ProjectServiceCreateResponse> {
  /**
   * Project is the project
   *
   * @generated from field: api.v1.Project project = 1;
   */
  project?: Project;

  constructor(data?: PartialMessage<ProjectServiceCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceCreateResponse {
    return new ProjectServiceCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceCreateResponse {
    return new ProjectServiceCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceCreateResponse {
    return new ProjectServiceCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceCreateResponse | PlainMessage<ProjectServiceCreateResponse> | undefined, b: ProjectServiceCreateResponse | PlainMessage<ProjectServiceCreateResponse> | undefined): boolean {
    return proto3.util.equals(ProjectServiceCreateResponse, a, b);
  }
}

/**
 * ProjectServiceDeleteRequest is the request payload to delete a project
 *
 * @generated from message api.v1.ProjectServiceDeleteRequest
 */
export class ProjectServiceDeleteRequest extends Message<ProjectServiceDeleteRequest> {
  /**
   * Project is the uuid of the project to get
   *
   * @generated from field: string project = 1;
   */
  project = "";

  constructor(data?: PartialMessage<ProjectServiceDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceDeleteRequest {
    return new ProjectServiceDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceDeleteRequest {
    return new ProjectServiceDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceDeleteRequest {
    return new ProjectServiceDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceDeleteRequest | PlainMessage<ProjectServiceDeleteRequest> | undefined, b: ProjectServiceDeleteRequest | PlainMessage<ProjectServiceDeleteRequest> | undefined): boolean {
    return proto3.util.equals(ProjectServiceDeleteRequest, a, b);
  }
}

/**
 * ProjectServiceDeleteResponse is the response payload to delete a project
 *
 * @generated from message api.v1.ProjectServiceDeleteResponse
 */
export class ProjectServiceDeleteResponse extends Message<ProjectServiceDeleteResponse> {
  /**
   * Project is the project
   *
   * @generated from field: api.v1.Project project = 1;
   */
  project?: Project;

  constructor(data?: PartialMessage<ProjectServiceDeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceDeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceDeleteResponse {
    return new ProjectServiceDeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceDeleteResponse {
    return new ProjectServiceDeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceDeleteResponse {
    return new ProjectServiceDeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceDeleteResponse | PlainMessage<ProjectServiceDeleteResponse> | undefined, b: ProjectServiceDeleteResponse | PlainMessage<ProjectServiceDeleteResponse> | undefined): boolean {
    return proto3.util.equals(ProjectServiceDeleteResponse, a, b);
  }
}

/**
 * ProjectServiceUpdateRequest is the request payload to update a project
 *
 * @generated from message api.v1.ProjectServiceUpdateRequest
 */
export class ProjectServiceUpdateRequest extends Message<ProjectServiceUpdateRequest> {
  /**
   * Project is the uuid of the project to get
   *
   * @generated from field: string project = 1;
   */
  project = "";

  /**
   * Name of this project unique per tenant
   *
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * Description of this project
   *
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * Avatar URL of the project
   *
   * @generated from field: optional string avatar_url = 4;
   */
  avatarUrl?: string;

  constructor(data?: PartialMessage<ProjectServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceUpdateRequest {
    return new ProjectServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceUpdateRequest {
    return new ProjectServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceUpdateRequest {
    return new ProjectServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceUpdateRequest | PlainMessage<ProjectServiceUpdateRequest> | undefined, b: ProjectServiceUpdateRequest | PlainMessage<ProjectServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(ProjectServiceUpdateRequest, a, b);
  }
}

/**
 * ProjectServiceUpdateResponse is the response payload to update a project
 *
 * @generated from message api.v1.ProjectServiceUpdateResponse
 */
export class ProjectServiceUpdateResponse extends Message<ProjectServiceUpdateResponse> {
  /**
   * Project is the project
   *
   * @generated from field: api.v1.Project project = 1;
   */
  project?: Project;

  constructor(data?: PartialMessage<ProjectServiceUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceUpdateResponse {
    return new ProjectServiceUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceUpdateResponse {
    return new ProjectServiceUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceUpdateResponse {
    return new ProjectServiceUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceUpdateResponse | PlainMessage<ProjectServiceUpdateResponse> | undefined, b: ProjectServiceUpdateResponse | PlainMessage<ProjectServiceUpdateResponse> | undefined): boolean {
    return proto3.util.equals(ProjectServiceUpdateResponse, a, b);
  }
}

/**
 * ProjectServiceInviteRequest is used to invite a member to a project
 *
 * @generated from message api.v1.ProjectServiceInviteRequest
 */
export class ProjectServiceInviteRequest extends Message<ProjectServiceInviteRequest> {
  /**
   * Project is the uuid of the project
   *
   * @generated from field: string project = 1;
   */
  project = "";

  /**
   * Role of this user in this project
   *
   * @generated from field: api.v1.ProjectRole role = 3;
   */
  role = ProjectRole.UNSPECIFIED;

  constructor(data?: PartialMessage<ProjectServiceInviteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceInviteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "enum", T: proto3.getEnumType(ProjectRole) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceInviteRequest {
    return new ProjectServiceInviteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceInviteRequest {
    return new ProjectServiceInviteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceInviteRequest {
    return new ProjectServiceInviteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceInviteRequest | PlainMessage<ProjectServiceInviteRequest> | undefined, b: ProjectServiceInviteRequest | PlainMessage<ProjectServiceInviteRequest> | undefined): boolean {
    return proto3.util.equals(ProjectServiceInviteRequest, a, b);
  }
}

/**
 * ProjectServiceInviteRequest is the response payload to a invite member request
 *
 * @generated from message api.v1.ProjectServiceInviteResponse
 */
export class ProjectServiceInviteResponse extends Message<ProjectServiceInviteResponse> {
  /**
   * Inviter contains a secret which can be sent to a potential user
   * can be appended to the invitation endpoint at our cloud console like
   * console.metalstack.cloud/invite/<secret>
   *
   * @generated from field: api.v1.ProjectInvite invite = 1;
   */
  invite?: ProjectInvite;

  constructor(data?: PartialMessage<ProjectServiceInviteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceInviteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invite", kind: "message", T: ProjectInvite },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceInviteResponse {
    return new ProjectServiceInviteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceInviteResponse {
    return new ProjectServiceInviteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceInviteResponse {
    return new ProjectServiceInviteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceInviteResponse | PlainMessage<ProjectServiceInviteResponse> | undefined, b: ProjectServiceInviteResponse | PlainMessage<ProjectServiceInviteResponse> | undefined): boolean {
    return proto3.util.equals(ProjectServiceInviteResponse, a, b);
  }
}

/**
 * ProjectServiceInvitesListRequest is the request payload to a list invites request
 *
 * @generated from message api.v1.ProjectServiceInvitesListRequest
 */
export class ProjectServiceInvitesListRequest extends Message<ProjectServiceInvitesListRequest> {
  /**
   * Project is the uuid of the project
   *
   * @generated from field: string project = 1;
   */
  project = "";

  constructor(data?: PartialMessage<ProjectServiceInvitesListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceInvitesListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceInvitesListRequest {
    return new ProjectServiceInvitesListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceInvitesListRequest {
    return new ProjectServiceInvitesListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceInvitesListRequest {
    return new ProjectServiceInvitesListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceInvitesListRequest | PlainMessage<ProjectServiceInvitesListRequest> | undefined, b: ProjectServiceInvitesListRequest | PlainMessage<ProjectServiceInvitesListRequest> | undefined): boolean {
    return proto3.util.equals(ProjectServiceInvitesListRequest, a, b);
  }
}

/**
 * ProjectServiceInvitesListResponse is the response payload to a list invites request
 *
 * @generated from message api.v1.ProjectServiceInvitesListResponse
 */
export class ProjectServiceInvitesListResponse extends Message<ProjectServiceInvitesListResponse> {
  /**
   * Invites not already accepted the invitation to this project
   *
   * @generated from field: repeated api.v1.ProjectInvite invites = 1;
   */
  invites: ProjectInvite[] = [];

  constructor(data?: PartialMessage<ProjectServiceInvitesListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceInvitesListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invites", kind: "message", T: ProjectInvite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceInvitesListResponse {
    return new ProjectServiceInvitesListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceInvitesListResponse {
    return new ProjectServiceInvitesListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceInvitesListResponse {
    return new ProjectServiceInvitesListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceInvitesListResponse | PlainMessage<ProjectServiceInvitesListResponse> | undefined, b: ProjectServiceInvitesListResponse | PlainMessage<ProjectServiceInvitesListResponse> | undefined): boolean {
    return proto3.util.equals(ProjectServiceInvitesListResponse, a, b);
  }
}

/**
 * ProjectServiceInviteGetRequest is the request payload to get a invite
 *
 * @generated from message api.v1.ProjectServiceInviteGetRequest
 */
export class ProjectServiceInviteGetRequest extends Message<ProjectServiceInviteGetRequest> {
  /**
   * Secret of the invite to list
   *
   * @generated from field: string secret = 1;
   */
  secret = "";

  constructor(data?: PartialMessage<ProjectServiceInviteGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceInviteGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceInviteGetRequest {
    return new ProjectServiceInviteGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceInviteGetRequest {
    return new ProjectServiceInviteGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceInviteGetRequest {
    return new ProjectServiceInviteGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceInviteGetRequest | PlainMessage<ProjectServiceInviteGetRequest> | undefined, b: ProjectServiceInviteGetRequest | PlainMessage<ProjectServiceInviteGetRequest> | undefined): boolean {
    return proto3.util.equals(ProjectServiceInviteGetRequest, a, b);
  }
}

/**
 * ProjectServiceInviteGetResponse is the response payload to a get invite request
 *
 * @generated from message api.v1.ProjectServiceInviteGetResponse
 */
export class ProjectServiceInviteGetResponse extends Message<ProjectServiceInviteGetResponse> {
  /**
   * Invite is the invite
   *
   * @generated from field: api.v1.ProjectInvite invite = 1;
   */
  invite?: ProjectInvite;

  constructor(data?: PartialMessage<ProjectServiceInviteGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceInviteGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invite", kind: "message", T: ProjectInvite },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceInviteGetResponse {
    return new ProjectServiceInviteGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceInviteGetResponse {
    return new ProjectServiceInviteGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceInviteGetResponse {
    return new ProjectServiceInviteGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceInviteGetResponse | PlainMessage<ProjectServiceInviteGetResponse> | undefined, b: ProjectServiceInviteGetResponse | PlainMessage<ProjectServiceInviteGetResponse> | undefined): boolean {
    return proto3.util.equals(ProjectServiceInviteGetResponse, a, b);
  }
}

/**
 * ProjectServiceRemoveMemberRequest is used to remove a member from a project
 *
 * @generated from message api.v1.ProjectServiceRemoveMemberRequest
 */
export class ProjectServiceRemoveMemberRequest extends Message<ProjectServiceRemoveMemberRequest> {
  /**
   * Project is the uuid of the project
   *
   * @generated from field: string project = 1;
   */
  project = "";

  /**
   * MemberID is the id of the member to remove from this project
   *
   * @generated from field: string member_id = 2;
   */
  memberId = "";

  constructor(data?: PartialMessage<ProjectServiceRemoveMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceRemoveMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "member_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceRemoveMemberRequest {
    return new ProjectServiceRemoveMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceRemoveMemberRequest {
    return new ProjectServiceRemoveMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceRemoveMemberRequest {
    return new ProjectServiceRemoveMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceRemoveMemberRequest | PlainMessage<ProjectServiceRemoveMemberRequest> | undefined, b: ProjectServiceRemoveMemberRequest | PlainMessage<ProjectServiceRemoveMemberRequest> | undefined): boolean {
    return proto3.util.equals(ProjectServiceRemoveMemberRequest, a, b);
  }
}

/**
 * ProjectServiceRemoveMemberResponse is the response payload to a remove member request
 *
 * @generated from message api.v1.ProjectServiceRemoveMemberResponse
 */
export class ProjectServiceRemoveMemberResponse extends Message<ProjectServiceRemoveMemberResponse> {
  constructor(data?: PartialMessage<ProjectServiceRemoveMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceRemoveMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceRemoveMemberResponse {
    return new ProjectServiceRemoveMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceRemoveMemberResponse {
    return new ProjectServiceRemoveMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceRemoveMemberResponse {
    return new ProjectServiceRemoveMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceRemoveMemberResponse | PlainMessage<ProjectServiceRemoveMemberResponse> | undefined, b: ProjectServiceRemoveMemberResponse | PlainMessage<ProjectServiceRemoveMemberResponse> | undefined): boolean {
    return proto3.util.equals(ProjectServiceRemoveMemberResponse, a, b);
  }
}

/**
 * ProjectServiceUpdateMemberRequest is used to update a member of a project
 *
 * @generated from message api.v1.ProjectServiceUpdateMemberRequest
 */
export class ProjectServiceUpdateMemberRequest extends Message<ProjectServiceUpdateMemberRequest> {
  /**
   * Project is the uuid of the project
   *
   * @generated from field: string project = 1;
   */
  project = "";

  /**
   * MemberID is the id of the member to remove from this project
   *
   * @generated from field: string member_id = 2;
   */
  memberId = "";

  /**
   * Role is the role in this project the user will get after the update
   *
   * @generated from field: api.v1.ProjectRole role = 3;
   */
  role = ProjectRole.UNSPECIFIED;

  constructor(data?: PartialMessage<ProjectServiceUpdateMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceUpdateMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "member_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "enum", T: proto3.getEnumType(ProjectRole) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceUpdateMemberRequest {
    return new ProjectServiceUpdateMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceUpdateMemberRequest {
    return new ProjectServiceUpdateMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceUpdateMemberRequest {
    return new ProjectServiceUpdateMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceUpdateMemberRequest | PlainMessage<ProjectServiceUpdateMemberRequest> | undefined, b: ProjectServiceUpdateMemberRequest | PlainMessage<ProjectServiceUpdateMemberRequest> | undefined): boolean {
    return proto3.util.equals(ProjectServiceUpdateMemberRequest, a, b);
  }
}

/**
 * ProjectServiceUpdateMemberResponse is the response payload to a update member request
 *
 * @generated from message api.v1.ProjectServiceUpdateMemberResponse
 */
export class ProjectServiceUpdateMemberResponse extends Message<ProjectServiceUpdateMemberResponse> {
  /**
   * ProjectMember is the updated project member
   *
   * @generated from field: api.v1.ProjectMember project_member = 5;
   */
  projectMember?: ProjectMember;

  constructor(data?: PartialMessage<ProjectServiceUpdateMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceUpdateMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "project_member", kind: "message", T: ProjectMember },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceUpdateMemberResponse {
    return new ProjectServiceUpdateMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceUpdateMemberResponse {
    return new ProjectServiceUpdateMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceUpdateMemberResponse {
    return new ProjectServiceUpdateMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceUpdateMemberResponse | PlainMessage<ProjectServiceUpdateMemberResponse> | undefined, b: ProjectServiceUpdateMemberResponse | PlainMessage<ProjectServiceUpdateMemberResponse> | undefined): boolean {
    return proto3.util.equals(ProjectServiceUpdateMemberResponse, a, b);
  }
}

/**
 * ProjectServiceInviteAcceptRequest is the request payload to a accept invite request
 *
 * @generated from message api.v1.ProjectServiceInviteAcceptRequest
 */
export class ProjectServiceInviteAcceptRequest extends Message<ProjectServiceInviteAcceptRequest> {
  /**
   * Secret is the invitation secret part of the invitation url
   *
   * @generated from field: string secret = 1;
   */
  secret = "";

  constructor(data?: PartialMessage<ProjectServiceInviteAcceptRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceInviteAcceptRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceInviteAcceptRequest {
    return new ProjectServiceInviteAcceptRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceInviteAcceptRequest {
    return new ProjectServiceInviteAcceptRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceInviteAcceptRequest {
    return new ProjectServiceInviteAcceptRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceInviteAcceptRequest | PlainMessage<ProjectServiceInviteAcceptRequest> | undefined, b: ProjectServiceInviteAcceptRequest | PlainMessage<ProjectServiceInviteAcceptRequest> | undefined): boolean {
    return proto3.util.equals(ProjectServiceInviteAcceptRequest, a, b);
  }
}

/**
 * ProjectServiceInvitesListResponse is the response payload to a accept invite request
 *
 * @generated from message api.v1.ProjectServiceInviteAcceptResponse
 */
export class ProjectServiceInviteAcceptResponse extends Message<ProjectServiceInviteAcceptResponse> {
  /**
   * Project ID of the project joined
   *
   * @generated from field: string project = 1;
   */
  project = "";

  /**
   * ProjectName if the project joined
   *
   * @generated from field: string project_name = 2;
   */
  projectName = "";

  constructor(data?: PartialMessage<ProjectServiceInviteAcceptResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceInviteAcceptResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceInviteAcceptResponse {
    return new ProjectServiceInviteAcceptResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceInviteAcceptResponse {
    return new ProjectServiceInviteAcceptResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceInviteAcceptResponse {
    return new ProjectServiceInviteAcceptResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceInviteAcceptResponse | PlainMessage<ProjectServiceInviteAcceptResponse> | undefined, b: ProjectServiceInviteAcceptResponse | PlainMessage<ProjectServiceInviteAcceptResponse> | undefined): boolean {
    return proto3.util.equals(ProjectServiceInviteAcceptResponse, a, b);
  }
}

/**
 * ProjectServiceInviteDeleteRequest is the request payload to a delete invite
 *
 * @generated from message api.v1.ProjectServiceInviteDeleteRequest
 */
export class ProjectServiceInviteDeleteRequest extends Message<ProjectServiceInviteDeleteRequest> {
  /**
   * Project is the uuid of the project
   *
   * @generated from field: string project = 1;
   */
  project = "";

  /**
   * Secret of the invite to delete
   *
   * @generated from field: string secret = 2;
   */
  secret = "";

  constructor(data?: PartialMessage<ProjectServiceInviteDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceInviteDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceInviteDeleteRequest {
    return new ProjectServiceInviteDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceInviteDeleteRequest {
    return new ProjectServiceInviteDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceInviteDeleteRequest {
    return new ProjectServiceInviteDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceInviteDeleteRequest | PlainMessage<ProjectServiceInviteDeleteRequest> | undefined, b: ProjectServiceInviteDeleteRequest | PlainMessage<ProjectServiceInviteDeleteRequest> | undefined): boolean {
    return proto3.util.equals(ProjectServiceInviteDeleteRequest, a, b);
  }
}

/**
 * ProjectServiceInviteDeleteResponse is the response payload of a delete invite request
 *
 * @generated from message api.v1.ProjectServiceInviteDeleteResponse
 */
export class ProjectServiceInviteDeleteResponse extends Message<ProjectServiceInviteDeleteResponse> {
  constructor(data?: PartialMessage<ProjectServiceInviteDeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ProjectServiceInviteDeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceInviteDeleteResponse {
    return new ProjectServiceInviteDeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceInviteDeleteResponse {
    return new ProjectServiceInviteDeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceInviteDeleteResponse {
    return new ProjectServiceInviteDeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceInviteDeleteResponse | PlainMessage<ProjectServiceInviteDeleteResponse> | undefined, b: ProjectServiceInviteDeleteResponse | PlainMessage<ProjectServiceInviteDeleteResponse> | undefined): boolean {
    return proto3.util.equals(ProjectServiceInviteDeleteResponse, a, b);
  }
}

