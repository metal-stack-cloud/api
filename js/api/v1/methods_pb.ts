// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api/v1/methods.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { MethodPermission } from "./token_pb.js";
import { AdminRole, ProjectRole, TenantRole } from "./common_pb.js";

/**
 * MethodServiceListRequest is the request payload to list all public methods
 *
 * @generated from message api.v1.MethodServiceListRequest
 */
export class MethodServiceListRequest extends Message<MethodServiceListRequest> {
  constructor(data?: PartialMessage<MethodServiceListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MethodServiceListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MethodServiceListRequest {
    return new MethodServiceListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MethodServiceListRequest {
    return new MethodServiceListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MethodServiceListRequest {
    return new MethodServiceListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MethodServiceListRequest | PlainMessage<MethodServiceListRequest> | undefined, b: MethodServiceListRequest | PlainMessage<MethodServiceListRequest> | undefined): boolean {
    return proto3.util.equals(MethodServiceListRequest, a, b);
  }
}

/**
 * MethodServiceListResponse is the response payload with all public visible methods
 *
 * @generated from message api.v1.MethodServiceListResponse
 */
export class MethodServiceListResponse extends Message<MethodServiceListResponse> {
  /**
   * Methods is a list of methods public callable
   *
   * @generated from field: repeated string methods = 1;
   */
  methods: string[] = [];

  constructor(data?: PartialMessage<MethodServiceListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MethodServiceListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "methods", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MethodServiceListResponse {
    return new MethodServiceListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MethodServiceListResponse {
    return new MethodServiceListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MethodServiceListResponse {
    return new MethodServiceListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MethodServiceListResponse | PlainMessage<MethodServiceListResponse> | undefined, b: MethodServiceListResponse | PlainMessage<MethodServiceListResponse> | undefined): boolean {
    return proto3.util.equals(MethodServiceListResponse, a, b);
  }
}

/**
 * MethodServiceTokenScopedListRequest is the request payload to list all methods callable with the token present in the request
 *
 * @generated from message api.v1.MethodServiceTokenScopedListRequest
 */
export class MethodServiceTokenScopedListRequest extends Message<MethodServiceTokenScopedListRequest> {
  constructor(data?: PartialMessage<MethodServiceTokenScopedListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MethodServiceTokenScopedListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MethodServiceTokenScopedListRequest {
    return new MethodServiceTokenScopedListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MethodServiceTokenScopedListRequest {
    return new MethodServiceTokenScopedListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MethodServiceTokenScopedListRequest {
    return new MethodServiceTokenScopedListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MethodServiceTokenScopedListRequest | PlainMessage<MethodServiceTokenScopedListRequest> | undefined, b: MethodServiceTokenScopedListRequest | PlainMessage<MethodServiceTokenScopedListRequest> | undefined): boolean {
    return proto3.util.equals(MethodServiceTokenScopedListRequest, a, b);
  }
}

/**
 * MethodServiceTokenScopedListResponse is the response payload which contains all methods which are callable with the given token
 *
 * @generated from message api.v1.MethodServiceTokenScopedListResponse
 */
export class MethodServiceTokenScopedListResponse extends Message<MethodServiceTokenScopedListResponse> {
  /**
   * Permissions a list of methods which can be called
   *
   * @generated from field: repeated api.v1.MethodPermission permissions = 1;
   */
  permissions: MethodPermission[] = [];

  /**
   * ProjectRoles associates a project id with the corresponding role of the token owner
   *
   * @generated from field: map<string, api.v1.ProjectRole> project_roles = 3;
   */
  projectRoles: { [key: string]: ProjectRole } = {};

  /**
   * TenantRoles associates a tenant id with the corresponding role of the token owner
   *
   * @generated from field: map<string, api.v1.TenantRole> tenant_roles = 4;
   */
  tenantRoles: { [key: string]: TenantRole } = {};

  /**
   * AdminRole defines the admin role of the token owner
   *
   * @generated from field: optional api.v1.AdminRole admin_role = 5;
   */
  adminRole?: AdminRole;

  constructor(data?: PartialMessage<MethodServiceTokenScopedListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MethodServiceTokenScopedListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "permissions", kind: "message", T: MethodPermission, repeated: true },
    { no: 3, name: "project_roles", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "enum", T: proto3.getEnumType(ProjectRole)} },
    { no: 4, name: "tenant_roles", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "enum", T: proto3.getEnumType(TenantRole)} },
    { no: 5, name: "admin_role", kind: "enum", T: proto3.getEnumType(AdminRole), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MethodServiceTokenScopedListResponse {
    return new MethodServiceTokenScopedListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MethodServiceTokenScopedListResponse {
    return new MethodServiceTokenScopedListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MethodServiceTokenScopedListResponse {
    return new MethodServiceTokenScopedListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MethodServiceTokenScopedListResponse | PlainMessage<MethodServiceTokenScopedListResponse> | undefined, b: MethodServiceTokenScopedListResponse | PlainMessage<MethodServiceTokenScopedListResponse> | undefined): boolean {
    return proto3.util.equals(MethodServiceTokenScopedListResponse, a, b);
  }
}

