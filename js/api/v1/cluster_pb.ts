// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/cluster.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * Operate defines the types of reconcilation to be triggered
 *
 * @generated from enum api.v1.Operate
 */
export enum Operate {
  /**
   * OPERATE_UNSPECIFIED is not specified
   *
   * @generated from enum value: OPERATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * OPERATE_RECONCILE reconcile the cluster
   *
   * @generated from enum value: OPERATE_RECONCILE = 1;
   */
  RECONCILE = 1,

  /**
   * OPERATE_MAINTAIN maintain the cluster
   *
   * @generated from enum value: OPERATE_MAINTAIN = 2;
   */
  MAINTAIN = 2,

  /**
   * OPERATE_RETRY retry the reconcilation of the cluster
   *
   * @generated from enum value: OPERATE_RETRY = 3;
   */
  RETRY = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Operate)
proto3.util.setEnumType(Operate, "api.v1.Operate", [
  { no: 0, name: "OPERATE_UNSPECIFIED" },
  { no: 1, name: "OPERATE_RECONCILE" },
  { no: 2, name: "OPERATE_MAINTAIN" },
  { no: 3, name: "OPERATE_RETRY" },
]);

/**
 * Cluster describes a kubernetes cluster
 *
 * @generated from message api.v1.Cluster
 */
export class Cluster extends Message<Cluster> {
  /**
   * Uuid of the cluster
   *
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * Name of the cluster
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Project where this cluster belongs to
   *
   * @generated from field: string project = 3;
   */
  project = "";

  /**
   * Partition where this cluster was created
   *
   * @generated from field: string partition = 4;
   */
  partition = "";

  /**
   * Kubernetes defines the kubernetes specifications of this cluster
   *
   * @generated from field: api.v1.KubernetesSpec kubernetes = 5;
   */
  kubernetes?: KubernetesSpec;

  /**
   * Workers defines the list of worker groups with their specification
   *
   * @generated from field: repeated api.v1.Worker workers = 6;
   */
  workers: Worker[] = [];

  /**
   * Maintenance defines when automated actions on this cluster should be scheduled
   *
   * @generated from field: api.v1.Maintenance maintenance = 7;
   */
  maintenance?: Maintenance;

  /**
   * Tenant where this cluster belongs to
   *
   * @generated from field: string tenant = 8;
   */
  tenant = "";

  /**
   * CreatedAt defines the date when this cluster was created
   *
   * @generated from field: google.protobuf.Timestamp created_at = 10;
   */
  createdAt?: Timestamp;

  /**
   * UpdatedAt defines the date when this cluster was updated
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 11;
   */
  updatedAt?: Timestamp;

  /**
   * DeletedAt defines the date when this cluster was deleted
   *
   * @generated from field: google.protobuf.Timestamp deleted_at = 12;
   */
  deletedAt?: Timestamp;

  /**
   * Status of this cluster
   *
   * @generated from field: api.v1.ClusterStatus status = 20;
   */
  status?: ClusterStatus;

  /**
   * Purpose of this cluster, can be for example production, development or evaluation
   *
   * @generated from field: optional string purpose = 21;
   */
  purpose?: string;

  /**
   * Monitoring details for this cluster
   *
   * @generated from field: api.v1.ClusterMonitoring monitoring = 22;
   */
  monitoring?: ClusterMonitoring;

  constructor(data?: PartialMessage<Cluster>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Cluster";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "partition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "kubernetes", kind: "message", T: KubernetesSpec },
    { no: 6, name: "workers", kind: "message", T: Worker, repeated: true },
    { no: 7, name: "maintenance", kind: "message", T: Maintenance },
    { no: 8, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "created_at", kind: "message", T: Timestamp },
    { no: 11, name: "updated_at", kind: "message", T: Timestamp },
    { no: 12, name: "deleted_at", kind: "message", T: Timestamp },
    { no: 20, name: "status", kind: "message", T: ClusterStatus },
    { no: 21, name: "purpose", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 22, name: "monitoring", kind: "message", T: ClusterMonitoring },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Cluster {
    return new Cluster().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Cluster {
    return new Cluster().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Cluster {
    return new Cluster().fromJsonString(jsonString, options);
  }

  static equals(a: Cluster | PlainMessage<Cluster> | undefined, b: Cluster | PlainMessage<Cluster> | undefined): boolean {
    return proto3.util.equals(Cluster, a, b);
  }
}

/**
 * KubernetesSpec details of kubernetes this cluster
 *
 * @generated from message api.v1.KubernetesSpec
 */
export class KubernetesSpec extends Message<KubernetesSpec> {
  /**
   * Version of kubernetes
   *
   * @generated from field: string version = 1;
   */
  version = "";

  constructor(data?: PartialMessage<KubernetesSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.KubernetesSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KubernetesSpec {
    return new KubernetesSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KubernetesSpec {
    return new KubernetesSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KubernetesSpec {
    return new KubernetesSpec().fromJsonString(jsonString, options);
  }

  static equals(a: KubernetesSpec | PlainMessage<KubernetesSpec> | undefined, b: KubernetesSpec | PlainMessage<KubernetesSpec> | undefined): boolean {
    return proto3.util.equals(KubernetesSpec, a, b);
  }
}

/**
 * Maintenance defines when automatic actions should be scheduled on this cluster
 *
 * @generated from message api.v1.Maintenance
 */
export class Maintenance extends Message<Maintenance> {
  /**
   * KubernetesAutoupdate if set to true, kubernetes patch version updates will be done in the maintenance window
   *
   * @generated from field: optional bool kubernetes_autoupdate = 1;
   */
  kubernetesAutoupdate?: boolean;

  /**
   * MachineimageAutoupdate if set to true, machine images will be automatically update by rolling nodes in the maintenance window
   *
   * @generated from field: optional bool machineimage_autoupdate = 2;
   */
  machineimageAutoupdate?: boolean;

  /**
   * TimeWindow defines the start time and duration during which automatic actions will be performed
   *
   * @generated from field: api.v1.MaintenanceTimeWindow time_window = 3;
   */
  timeWindow?: MaintenanceTimeWindow;

  constructor(data?: PartialMessage<Maintenance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Maintenance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kubernetes_autoupdate", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "machineimage_autoupdate", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "time_window", kind: "message", T: MaintenanceTimeWindow },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Maintenance {
    return new Maintenance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Maintenance {
    return new Maintenance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Maintenance {
    return new Maintenance().fromJsonString(jsonString, options);
  }

  static equals(a: Maintenance | PlainMessage<Maintenance> | undefined, b: Maintenance | PlainMessage<Maintenance> | undefined): boolean {
    return proto3.util.equals(Maintenance, a, b);
  }
}

/**
 * MaintenanceTimeWindow defines the start time and duration during which automatic actions will be performed
 *
 * @generated from message api.v1.MaintenanceTimeWindow
 */
export class MaintenanceTimeWindow extends Message<MaintenanceTimeWindow> {
  /**
   * Begin of the MaintenanceTimeWindow
   *
   * @generated from field: api.v1.Time begin = 1;
   */
  begin?: Time;

  /**
   * Duration of the MaintenanceTimeWindow
   *
   * @generated from field: google.protobuf.Duration duration = 2;
   */
  duration?: Duration;

  constructor(data?: PartialMessage<MaintenanceTimeWindow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MaintenanceTimeWindow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "begin", kind: "message", T: Time },
    { no: 2, name: "duration", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MaintenanceTimeWindow {
    return new MaintenanceTimeWindow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MaintenanceTimeWindow {
    return new MaintenanceTimeWindow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MaintenanceTimeWindow {
    return new MaintenanceTimeWindow().fromJsonString(jsonString, options);
  }

  static equals(a: MaintenanceTimeWindow | PlainMessage<MaintenanceTimeWindow> | undefined, b: MaintenanceTimeWindow | PlainMessage<MaintenanceTimeWindow> | undefined): boolean {
    return proto3.util.equals(MaintenanceTimeWindow, a, b);
  }
}

/**
 * Time of day
 *
 * @generated from message api.v1.Time
 */
export class Time extends Message<Time> {
  /**
   * hour begin of the maintenance window, specified in 24 hour format.
   *
   * @generated from field: uint32 hour = 1;
   */
  hour = 0;

  /**
   * hour:minute begin of the maintenance window.
   *
   * @generated from field: uint32 minute = 2;
   */
  minute = 0;

  /**
   * timezone specifies for which region in the world the given hour:minute should apply.
   *
   * @generated from field: string timezone = 3;
   */
  timezone = "";

  constructor(data?: PartialMessage<Time>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Time";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hour", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "minute", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "timezone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Time {
    return new Time().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Time {
    return new Time().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Time {
    return new Time().fromJsonString(jsonString, options);
  }

  static equals(a: Time | PlainMessage<Time> | undefined, b: Time | PlainMessage<Time> | undefined): boolean {
    return proto3.util.equals(Time, a, b);
  }
}

/**
 * Worker defines a set of worker nodes with identical properties
 *
 * @generated from message api.v1.Worker
 */
export class Worker extends Message<Worker> {
  /**
   * Name of this worker group
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * MachineType of machines which should be used for the worker nodes in this group
   *
   * @generated from field: string machine_type = 2;
   */
  machineType = "";

  /**
   * Minsize defines the minimum amount of machines present in this worker group
   *
   * @generated from field: uint32 minsize = 3;
   */
  minsize = 0;

  /**
   * Maxsize defines the maximum amount of machines present in this worker group
   *
   * @generated from field: uint32 maxsize = 4;
   */
  maxsize = 0;

  /**
   * Maxsurge defines the maximum amount of machines which are spun up in this worker group during a rolling upgrade
   *
   * @generated from field: uint32 maxsurge = 5;
   */
  maxsurge = 0;

  /**
   * Maxunavailable defines the maximum amount of not available machines in this worker group during a rolling upgrade
   *
   * @generated from field: uint32 maxunavailable = 6;
   */
  maxunavailable = 0;

  constructor(data?: PartialMessage<Worker>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Worker";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "machine_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "minsize", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "maxsize", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "maxsurge", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "maxunavailable", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Worker {
    return new Worker().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Worker {
    return new Worker().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Worker {
    return new Worker().fromJsonString(jsonString, options);
  }

  static equals(a: Worker | PlainMessage<Worker> | undefined, b: Worker | PlainMessage<Worker> | undefined): boolean {
    return proto3.util.equals(Worker, a, b);
  }
}

/**
 * WorkerUpdate is used to update a Worker group
 *
 * @generated from message api.v1.WorkerUpdate
 */
export class WorkerUpdate extends Message<WorkerUpdate> {
  /**
   * Name of the worker group to update
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * MachineType to change in this worker group
   *
   * @generated from field: optional string machine_type = 2;
   */
  machineType?: string;

  /**
   * Minsize defines the minimum amount of machines present in this worker group
   *
   * @generated from field: optional uint32 minsize = 3;
   */
  minsize?: number;

  /**
   * Maxsize defines the maximum amount of machines present in this worker group
   *
   * @generated from field: optional uint32 maxsize = 4;
   */
  maxsize?: number;

  /**
   * Maxsurge defines the maximum amount of machines which are spun up in this worker group during a rolling upgrade
   *
   * @generated from field: optional uint32 maxsurge = 5;
   */
  maxsurge?: number;

  /**
   * Maxunavailable defines the maximum amount of not available machines in this worker group during a rolling upgrade
   *
   * @generated from field: optional uint32 maxunavailable = 6;
   */
  maxunavailable?: number;

  constructor(data?: PartialMessage<WorkerUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.WorkerUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "machine_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "minsize", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 4, name: "maxsize", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 5, name: "maxsurge", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 6, name: "maxunavailable", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkerUpdate {
    return new WorkerUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkerUpdate {
    return new WorkerUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkerUpdate {
    return new WorkerUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: WorkerUpdate | PlainMessage<WorkerUpdate> | undefined, b: WorkerUpdate | PlainMessage<WorkerUpdate> | undefined): boolean {
    return proto3.util.equals(WorkerUpdate, a, b);
  }
}

/**
 * ClusterServiceGetRequest is the request payload for a cluster get request
 *
 * @generated from message api.v1.ClusterServiceGetRequest
 */
export class ClusterServiceGetRequest extends Message<ClusterServiceGetRequest> {
  /**
   * Uuid of the cluster
   *
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * Project of the cluster
   *
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<ClusterServiceGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceGetRequest {
    return new ClusterServiceGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceGetRequest {
    return new ClusterServiceGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceGetRequest {
    return new ClusterServiceGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceGetRequest | PlainMessage<ClusterServiceGetRequest> | undefined, b: ClusterServiceGetRequest | PlainMessage<ClusterServiceGetRequest> | undefined): boolean {
    return proto3.util.equals(ClusterServiceGetRequest, a, b);
  }
}

/**
 * ClusterServiceOperateRequest is the request payload for the cluster operate request
 *
 * @generated from message api.v1.ClusterServiceOperateRequest
 */
export class ClusterServiceOperateRequest extends Message<ClusterServiceOperateRequest> {
  /**
   * Uuid of the cluster
   *
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * Operate is the reconcilation operation which should be performed
   *
   * @generated from field: api.v1.Operate operate = 2;
   */
  operate = Operate.UNSPECIFIED;

  constructor(data?: PartialMessage<ClusterServiceOperateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceOperateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operate", kind: "enum", T: proto3.getEnumType(Operate) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceOperateRequest {
    return new ClusterServiceOperateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceOperateRequest {
    return new ClusterServiceOperateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceOperateRequest {
    return new ClusterServiceOperateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceOperateRequest | PlainMessage<ClusterServiceOperateRequest> | undefined, b: ClusterServiceOperateRequest | PlainMessage<ClusterServiceOperateRequest> | undefined): boolean {
    return proto3.util.equals(ClusterServiceOperateRequest, a, b);
  }
}

/**
 * ClusterServiceGetRequest is the request payload for a cluster get request
 *
 * @generated from message api.v1.ClusterServiceGetCredentialsRequest
 */
export class ClusterServiceGetCredentialsRequest extends Message<ClusterServiceGetCredentialsRequest> {
  /**
   * Uuid of the cluster
   *
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * Project of the cluster
   *
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * Expiration defines the duration after which the requested kubernetes access token can not be used anymore
   *
   * @generated from field: optional google.protobuf.Duration expiration = 4;
   */
  expiration?: Duration;

  constructor(data?: PartialMessage<ClusterServiceGetCredentialsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceGetCredentialsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "expiration", kind: "message", T: Duration, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceGetCredentialsRequest {
    return new ClusterServiceGetCredentialsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceGetCredentialsRequest {
    return new ClusterServiceGetCredentialsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceGetCredentialsRequest {
    return new ClusterServiceGetCredentialsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceGetCredentialsRequest | PlainMessage<ClusterServiceGetCredentialsRequest> | undefined, b: ClusterServiceGetCredentialsRequest | PlainMessage<ClusterServiceGetCredentialsRequest> | undefined): boolean {
    return proto3.util.equals(ClusterServiceGetCredentialsRequest, a, b);
  }
}

/**
 * ClusterServiceListRequest is the request payload for a cluster list request
 *
 * @generated from message api.v1.ClusterServiceListRequest
 */
export class ClusterServiceListRequest extends Message<ClusterServiceListRequest> {
  /**
   * Project of the cluster
   *
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<ClusterServiceListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceListRequest {
    return new ClusterServiceListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceListRequest {
    return new ClusterServiceListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceListRequest {
    return new ClusterServiceListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceListRequest | PlainMessage<ClusterServiceListRequest> | undefined, b: ClusterServiceListRequest | PlainMessage<ClusterServiceListRequest> | undefined): boolean {
    return proto3.util.equals(ClusterServiceListRequest, a, b);
  }
}

/**
 * ClusterServiceCreateRequest is the request payload for a cluster create request
 *
 * @generated from message api.v1.ClusterServiceCreateRequest
 */
export class ClusterServiceCreateRequest extends Message<ClusterServiceCreateRequest> {
  /**
   * Name of the cluster to create
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Project of the cluster
   *
   * @generated from field: string project = 3;
   */
  project = "";

  /**
   * Partition of the cluster
   *
   * @generated from field: string partition = 4;
   */
  partition = "";

  /**
   * Kubernetes specification of the cluster
   *
   * @generated from field: api.v1.KubernetesSpec kubernetes = 6;
   */
  kubernetes?: KubernetesSpec;

  /**
   * Worker specification of the cluster
   *
   * @generated from field: repeated api.v1.Worker workers = 7;
   */
  workers: Worker[] = [];

  /**
   * Maintenance specification of the cluster
   *
   * @generated from field: api.v1.Maintenance maintenance = 8;
   */
  maintenance?: Maintenance;

  constructor(data?: PartialMessage<ClusterServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "partition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "kubernetes", kind: "message", T: KubernetesSpec },
    { no: 7, name: "workers", kind: "message", T: Worker, repeated: true },
    { no: 8, name: "maintenance", kind: "message", T: Maintenance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceCreateRequest {
    return new ClusterServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceCreateRequest {
    return new ClusterServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceCreateRequest {
    return new ClusterServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceCreateRequest | PlainMessage<ClusterServiceCreateRequest> | undefined, b: ClusterServiceCreateRequest | PlainMessage<ClusterServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(ClusterServiceCreateRequest, a, b);
  }
}

/**
 * ClusterServiceUpdateRequest is the request payload for a cluster update request
 *
 * @generated from message api.v1.ClusterServiceUpdateRequest
 */
export class ClusterServiceUpdateRequest extends Message<ClusterServiceUpdateRequest> {
  /**
   * Uuid of the cluster
   *
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * Project of the cluster
   *
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * Kubernetes specification of the cluster
   *
   * @generated from field: optional api.v1.KubernetesSpec kubernetes = 3;
   */
  kubernetes?: KubernetesSpec;

  /**
   * Worker specification of the cluster
   *
   * @generated from field: repeated api.v1.WorkerUpdate workers = 4;
   */
  workers: WorkerUpdate[] = [];

  /**
   * Maintenance specification of the cluster
   *
   * @generated from field: optional api.v1.Maintenance maintenance = 5;
   */
  maintenance?: Maintenance;

  constructor(data?: PartialMessage<ClusterServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "kubernetes", kind: "message", T: KubernetesSpec, opt: true },
    { no: 4, name: "workers", kind: "message", T: WorkerUpdate, repeated: true },
    { no: 5, name: "maintenance", kind: "message", T: Maintenance, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceUpdateRequest {
    return new ClusterServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceUpdateRequest {
    return new ClusterServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceUpdateRequest {
    return new ClusterServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceUpdateRequest | PlainMessage<ClusterServiceUpdateRequest> | undefined, b: ClusterServiceUpdateRequest | PlainMessage<ClusterServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(ClusterServiceUpdateRequest, a, b);
  }
}

/**
 * ClusterServiceDeleteRequest is the request payload for a cluster delete request
 *
 * @generated from message api.v1.ClusterServiceDeleteRequest
 */
export class ClusterServiceDeleteRequest extends Message<ClusterServiceDeleteRequest> {
  /**
   * Uuid of the cluster
   *
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * Project of the cluster
   *
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<ClusterServiceDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceDeleteRequest {
    return new ClusterServiceDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceDeleteRequest {
    return new ClusterServiceDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceDeleteRequest {
    return new ClusterServiceDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceDeleteRequest | PlainMessage<ClusterServiceDeleteRequest> | undefined, b: ClusterServiceDeleteRequest | PlainMessage<ClusterServiceDeleteRequest> | undefined): boolean {
    return proto3.util.equals(ClusterServiceDeleteRequest, a, b);
  }
}

/**
 * ClusterServiceWatchStatusRequest is the request payload for a cluster watch status request
 *
 * @generated from message api.v1.ClusterServiceWatchStatusRequest
 */
export class ClusterServiceWatchStatusRequest extends Message<ClusterServiceWatchStatusRequest> {
  /**
   * Uuid of the cluster
   *
   * @generated from field: optional string uuid = 1;
   */
  uuid?: string;

  /**
   * Project of the cluster
   *
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<ClusterServiceWatchStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceWatchStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceWatchStatusRequest {
    return new ClusterServiceWatchStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceWatchStatusRequest {
    return new ClusterServiceWatchStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceWatchStatusRequest {
    return new ClusterServiceWatchStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceWatchStatusRequest | PlainMessage<ClusterServiceWatchStatusRequest> | undefined, b: ClusterServiceWatchStatusRequest | PlainMessage<ClusterServiceWatchStatusRequest> | undefined): boolean {
    return proto3.util.equals(ClusterServiceWatchStatusRequest, a, b);
  }
}

/**
 * ClusterStatus
 *
 * @generated from message api.v1.ClusterStatus
 */
export class ClusterStatus extends Message<ClusterStatus> {
  /**
   * Uuid of the cluster
   *
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * Progress of the cluster reconcilation
   *
   * @generated from field: uint32 progress = 2;
   */
  progress = 0;

  /**
   * State of the cluster
   *
   * @generated from field: string state = 3;
   */
  state = "";

  /**
   * Type of the cluster status
   *
   * @generated from field: string type = 4;
   */
  type = "";

  /**
   * ApiServerReady represents the ready state of the kubernetes api server
   *
   * @generated from field: string api_server_ready = 10;
   */
  apiServerReady = "";

  /**
   * ControlPlaneReady represents the ready state of the control plane components
   *
   * @generated from field: string control_plane_ready = 11;
   */
  controlPlaneReady = "";

  /**
   * NodesReady represents the ready state of the worker nodes
   *
   * @generated from field: string nodes_ready = 12;
   */
  nodesReady = "";

  /**
   * SystemComponentsReady represents the ready state of the system components
   *
   * @generated from field: string system_components_ready = 13;
   */
  systemComponentsReady = "";

  /**
   * LastErrors is a list of the last known errors occured during the cluster reconcilation
   *
   * @generated from field: repeated api.v1.ClusterStatusLastError last_errors = 14;
   */
  lastErrors: ClusterStatusLastError[] = [];

  /**
   * ClusterStatusConditions is a list of status conditions of the cluster
   *
   * @generated from field: repeated api.v1.ClusterStatusCondition conditions = 15;
   */
  conditions: ClusterStatusCondition[] = [];

  constructor(data?: PartialMessage<ClusterStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "progress", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "api_server_ready", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "control_plane_ready", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "nodes_ready", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "system_components_ready", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "last_errors", kind: "message", T: ClusterStatusLastError, repeated: true },
    { no: 15, name: "conditions", kind: "message", T: ClusterStatusCondition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterStatus {
    return new ClusterStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterStatus {
    return new ClusterStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterStatus {
    return new ClusterStatus().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterStatus | PlainMessage<ClusterStatus> | undefined, b: ClusterStatus | PlainMessage<ClusterStatus> | undefined): boolean {
    return proto3.util.equals(ClusterStatus, a, b);
  }
}

/**
 * ClusterStatusLastError is the last known cluster status error
 *
 * @generated from message api.v1.ClusterStatusLastError
 */
export class ClusterStatusLastError extends Message<ClusterStatusLastError> {
  /**
   * Description a human readable message indicating details about the last error
   *
   * @generated from field: string description = 1;
   */
  description = "";

  /**
   * TaskId ID of the task which caused this last error
   *
   * @generated from field: optional string task_id = 2;
   */
  taskId?: string;

  /**
   * Codes well-defined error codes of the last error(s)
   *
   * @generated from field: repeated string codes = 3;
   */
  codes: string[] = [];

  /**
   * LastUpdateTime last time the error was reported
   *
   * @generated from field: google.protobuf.Timestamp last_update_time = 4;
   */
  lastUpdateTime?: Timestamp;

  constructor(data?: PartialMessage<ClusterStatusLastError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterStatusLastError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "last_update_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterStatusLastError {
    return new ClusterStatusLastError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterStatusLastError {
    return new ClusterStatusLastError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterStatusLastError {
    return new ClusterStatusLastError().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterStatusLastError | PlainMessage<ClusterStatusLastError> | undefined, b: ClusterStatusLastError | PlainMessage<ClusterStatusLastError> | undefined): boolean {
    return proto3.util.equals(ClusterStatusLastError, a, b);
  }
}

/**
 * ClusterStatusCondition contains status conditions of a cluster
 *
 * @generated from message api.v1.ClusterStatusCondition
 */
export class ClusterStatusCondition extends Message<ClusterStatusCondition> {
  /**
   * Type is the type of the condition
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * Status is the status of the condition
   *
   * @generated from field: string status = 2;
   */
  status = "";

  /**
   * Reason describes the reason for the condition's last transition
   *
   * @generated from field: string reason = 3;
   */
  reason = "";

  /**
   * StatusMessage is a human readable message indicating details about the transition
   *
   * @generated from field: string status_message = 4;
   */
  statusMessage = "";

  /**
   * Codes well-defined error codes of the last error(s).
   *
   * @generated from field: repeated string codes = 5;
   */
  codes: string[] = [];

  /**
   * LastUpdateTime last time the condition transitioned
   *
   * @generated from field: google.protobuf.Timestamp last_transition_time = 6;
   */
  lastTransitionTime?: Timestamp;

  /**
   * LastUpdateTime last time the condition was updated
   *
   * @generated from field: google.protobuf.Timestamp last_update_time = 7;
   */
  lastUpdateTime?: Timestamp;

  constructor(data?: PartialMessage<ClusterStatusCondition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterStatusCondition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "status_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "last_transition_time", kind: "message", T: Timestamp },
    { no: 7, name: "last_update_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterStatusCondition {
    return new ClusterStatusCondition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterStatusCondition {
    return new ClusterStatusCondition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterStatusCondition {
    return new ClusterStatusCondition().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterStatusCondition | PlainMessage<ClusterStatusCondition> | undefined, b: ClusterStatusCondition | PlainMessage<ClusterStatusCondition> | undefined): boolean {
    return proto3.util.equals(ClusterStatusCondition, a, b);
  }
}

/**
 * ClusterMonitoring contains details howto access the cluster monitoring
 *
 * @generated from message api.v1.ClusterMonitoring
 */
export class ClusterMonitoring extends Message<ClusterMonitoring> {
  /**
   * Username to access the monitoring
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * Password to access the monitoring
   *
   * @generated from field: string password = 2;
   */
  password = "";

  /**
   * Endpoint is the url to access the monitoring
   *
   * @generated from field: string endpoint = 3;
   */
  endpoint = "";

  constructor(data?: PartialMessage<ClusterMonitoring>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterMonitoring";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterMonitoring {
    return new ClusterMonitoring().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterMonitoring {
    return new ClusterMonitoring().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterMonitoring {
    return new ClusterMonitoring().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterMonitoring | PlainMessage<ClusterMonitoring> | undefined, b: ClusterMonitoring | PlainMessage<ClusterMonitoring> | undefined): boolean {
    return proto3.util.equals(ClusterMonitoring, a, b);
  }
}

/**
 * ClusterServiceCreateResponse is the response payload of a cluster create request
 *
 * @generated from message api.v1.ClusterServiceCreateResponse
 */
export class ClusterServiceCreateResponse extends Message<ClusterServiceCreateResponse> {
  /**
   * Cluster is the cluster
   *
   * @generated from field: api.v1.Cluster cluster = 1;
   */
  cluster?: Cluster;

  constructor(data?: PartialMessage<ClusterServiceCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "message", T: Cluster },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceCreateResponse {
    return new ClusterServiceCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceCreateResponse {
    return new ClusterServiceCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceCreateResponse {
    return new ClusterServiceCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceCreateResponse | PlainMessage<ClusterServiceCreateResponse> | undefined, b: ClusterServiceCreateResponse | PlainMessage<ClusterServiceCreateResponse> | undefined): boolean {
    return proto3.util.equals(ClusterServiceCreateResponse, a, b);
  }
}

/**
 * ClusterServiceGetResponse is the response payload of a cluster get request
 *
 * @generated from message api.v1.ClusterServiceGetResponse
 */
export class ClusterServiceGetResponse extends Message<ClusterServiceGetResponse> {
  /**
   * Cluster is the cluster
   *
   * @generated from field: api.v1.Cluster cluster = 1;
   */
  cluster?: Cluster;

  constructor(data?: PartialMessage<ClusterServiceGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "message", T: Cluster },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceGetResponse {
    return new ClusterServiceGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceGetResponse {
    return new ClusterServiceGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceGetResponse {
    return new ClusterServiceGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceGetResponse | PlainMessage<ClusterServiceGetResponse> | undefined, b: ClusterServiceGetResponse | PlainMessage<ClusterServiceGetResponse> | undefined): boolean {
    return proto3.util.equals(ClusterServiceGetResponse, a, b);
  }
}

/**
 * ClusterServiceGetCredentialsResponse is the response payload of a cluster get credentials request
 *
 * @generated from message api.v1.ClusterServiceGetCredentialsResponse
 */
export class ClusterServiceGetCredentialsResponse extends Message<ClusterServiceGetCredentialsResponse> {
  /**
   * Cluster is the cluster
   *
   * @generated from field: string kubeconfig = 1;
   */
  kubeconfig = "";

  constructor(data?: PartialMessage<ClusterServiceGetCredentialsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceGetCredentialsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kubeconfig", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceGetCredentialsResponse {
    return new ClusterServiceGetCredentialsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceGetCredentialsResponse {
    return new ClusterServiceGetCredentialsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceGetCredentialsResponse {
    return new ClusterServiceGetCredentialsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceGetCredentialsResponse | PlainMessage<ClusterServiceGetCredentialsResponse> | undefined, b: ClusterServiceGetCredentialsResponse | PlainMessage<ClusterServiceGetCredentialsResponse> | undefined): boolean {
    return proto3.util.equals(ClusterServiceGetCredentialsResponse, a, b);
  }
}

/**
 * ClusterServiceDeleteResponse is the response payload of a cluster delete request
 *
 * @generated from message api.v1.ClusterServiceDeleteResponse
 */
export class ClusterServiceDeleteResponse extends Message<ClusterServiceDeleteResponse> {
  /**
   * Cluster is the cluster
   *
   * @generated from field: api.v1.Cluster cluster = 1;
   */
  cluster?: Cluster;

  constructor(data?: PartialMessage<ClusterServiceDeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceDeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "message", T: Cluster },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceDeleteResponse {
    return new ClusterServiceDeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceDeleteResponse {
    return new ClusterServiceDeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceDeleteResponse {
    return new ClusterServiceDeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceDeleteResponse | PlainMessage<ClusterServiceDeleteResponse> | undefined, b: ClusterServiceDeleteResponse | PlainMessage<ClusterServiceDeleteResponse> | undefined): boolean {
    return proto3.util.equals(ClusterServiceDeleteResponse, a, b);
  }
}

/**
 * ClusterServiceUpdateResponse is the response payload of a cluster update request
 *
 * @generated from message api.v1.ClusterServiceUpdateResponse
 */
export class ClusterServiceUpdateResponse extends Message<ClusterServiceUpdateResponse> {
  /**
   * Cluster is the cluster
   *
   * @generated from field: api.v1.Cluster cluster = 1;
   */
  cluster?: Cluster;

  constructor(data?: PartialMessage<ClusterServiceUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "message", T: Cluster },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceUpdateResponse {
    return new ClusterServiceUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceUpdateResponse {
    return new ClusterServiceUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceUpdateResponse {
    return new ClusterServiceUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceUpdateResponse | PlainMessage<ClusterServiceUpdateResponse> | undefined, b: ClusterServiceUpdateResponse | PlainMessage<ClusterServiceUpdateResponse> | undefined): boolean {
    return proto3.util.equals(ClusterServiceUpdateResponse, a, b);
  }
}

/**
 * ClusterServiceListResponse is the response payload of a cluster list request
 *
 * @generated from message api.v1.ClusterServiceListResponse
 */
export class ClusterServiceListResponse extends Message<ClusterServiceListResponse> {
  /**
   * Clusters a list of clusters
   *
   * @generated from field: repeated api.v1.Cluster clusters = 1;
   */
  clusters: Cluster[] = [];

  constructor(data?: PartialMessage<ClusterServiceListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusters", kind: "message", T: Cluster, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceListResponse {
    return new ClusterServiceListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceListResponse {
    return new ClusterServiceListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceListResponse {
    return new ClusterServiceListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceListResponse | PlainMessage<ClusterServiceListResponse> | undefined, b: ClusterServiceListResponse | PlainMessage<ClusterServiceListResponse> | undefined): boolean {
    return proto3.util.equals(ClusterServiceListResponse, a, b);
  }
}

/**
 * ClusterServiceWatchStatusResponse is the response payload of a cluster watch status request
 *
 * @generated from message api.v1.ClusterServiceWatchStatusResponse
 */
export class ClusterServiceWatchStatusResponse extends Message<ClusterServiceWatchStatusResponse> {
  /**
   * Status the cluster status
   *
   * @generated from field: api.v1.ClusterStatus status = 1;
   */
  status?: ClusterStatus;

  constructor(data?: PartialMessage<ClusterServiceWatchStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceWatchStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: ClusterStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceWatchStatusResponse {
    return new ClusterServiceWatchStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceWatchStatusResponse {
    return new ClusterServiceWatchStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceWatchStatusResponse {
    return new ClusterServiceWatchStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceWatchStatusResponse | PlainMessage<ClusterServiceWatchStatusResponse> | undefined, b: ClusterServiceWatchStatusResponse | PlainMessage<ClusterServiceWatchStatusResponse> | undefined): boolean {
    return proto3.util.equals(ClusterServiceWatchStatusResponse, a, b);
  }
}

/**
 * ClusterServiceOperateResponse is the response payload for the cluster operate request
 *
 * @generated from message api.v1.ClusterServiceOperateResponse
 */
export class ClusterServiceOperateResponse extends Message<ClusterServiceOperateResponse> {
  /**
   * Cluster is the cluster
   *
   * @generated from field: api.v1.Cluster cluster = 1;
   */
  cluster?: Cluster;

  constructor(data?: PartialMessage<ClusterServiceOperateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceOperateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "message", T: Cluster },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceOperateResponse {
    return new ClusterServiceOperateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceOperateResponse {
    return new ClusterServiceOperateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceOperateResponse {
    return new ClusterServiceOperateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceOperateResponse | PlainMessage<ClusterServiceOperateResponse> | undefined, b: ClusterServiceOperateResponse | PlainMessage<ClusterServiceOperateResponse> | undefined): boolean {
    return proto3.util.equals(ClusterServiceOperateResponse, a, b);
  }
}

