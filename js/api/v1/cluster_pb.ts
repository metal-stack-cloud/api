// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file api/v1/cluster.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * Types
 *
 * @generated from message api.v1.Cluster
 */
export class Cluster extends Message<Cluster> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string project = 3;
   */
  project = "";

  /**
   * partition is part of a region
   *
   * @generated from field: string partition = 4;
   */
  partition = "";

  /**
   * @generated from field: api.v1.KubernetesSpec kubernetes = 5;
   */
  kubernetes?: KubernetesSpec;

  /**
   * @generated from field: repeated api.v1.Worker workers = 6;
   */
  workers: Worker[] = [];

  /**
   * @generated from field: api.v1.Maintenance maintenance = 7;
   */
  maintenance?: Maintenance;

  /**
   * @generated from field: string tenant = 8;
   */
  tenant = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 10;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 11;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp deleted_at = 12;
   */
  deletedAt?: Timestamp;

  /**
   * @generated from field: api.v1.ClusterStatus status = 20;
   */
  status?: ClusterStatus;

  /**
   * @generated from field: string purpose = 21;
   */
  purpose = "";

  constructor(data?: PartialMessage<Cluster>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Cluster";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "partition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "kubernetes", kind: "message", T: KubernetesSpec },
    { no: 6, name: "workers", kind: "message", T: Worker, repeated: true },
    { no: 7, name: "maintenance", kind: "message", T: Maintenance },
    { no: 8, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "created_at", kind: "message", T: Timestamp },
    { no: 11, name: "updated_at", kind: "message", T: Timestamp },
    { no: 12, name: "deleted_at", kind: "message", T: Timestamp },
    { no: 20, name: "status", kind: "message", T: ClusterStatus },
    { no: 21, name: "purpose", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Cluster {
    return new Cluster().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Cluster {
    return new Cluster().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Cluster {
    return new Cluster().fromJsonString(jsonString, options);
  }

  static equals(a: Cluster | PlainMessage<Cluster> | undefined, b: Cluster | PlainMessage<Cluster> | undefined): boolean {
    return proto3.util.equals(Cluster, a, b);
  }
}

/**
 * @generated from message api.v1.KubernetesSpec
 */
export class KubernetesSpec extends Message<KubernetesSpec> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  constructor(data?: PartialMessage<KubernetesSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.KubernetesSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KubernetesSpec {
    return new KubernetesSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KubernetesSpec {
    return new KubernetesSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KubernetesSpec {
    return new KubernetesSpec().fromJsonString(jsonString, options);
  }

  static equals(a: KubernetesSpec | PlainMessage<KubernetesSpec> | undefined, b: KubernetesSpec | PlainMessage<KubernetesSpec> | undefined): boolean {
    return proto3.util.equals(KubernetesSpec, a, b);
  }
}

/**
 * @generated from message api.v1.Maintenance
 */
export class Maintenance extends Message<Maintenance> {
  /**
   * @generated from field: optional bool kubernetes_autoupdate = 1;
   */
  kubernetesAutoupdate?: boolean;

  /**
   * @generated from field: optional bool machineimage_autoupdate = 2;
   */
  machineimageAutoupdate?: boolean;

  /**
   * @generated from field: api.v1.MaintenanceTimeWindow time_window = 3;
   */
  timeWindow?: MaintenanceTimeWindow;

  constructor(data?: PartialMessage<Maintenance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Maintenance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kubernetes_autoupdate", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "machineimage_autoupdate", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "time_window", kind: "message", T: MaintenanceTimeWindow },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Maintenance {
    return new Maintenance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Maintenance {
    return new Maintenance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Maintenance {
    return new Maintenance().fromJsonString(jsonString, options);
  }

  static equals(a: Maintenance | PlainMessage<Maintenance> | undefined, b: Maintenance | PlainMessage<Maintenance> | undefined): boolean {
    return proto3.util.equals(Maintenance, a, b);
  }
}

/**
 * @generated from message api.v1.MaintenanceTimeWindow
 */
export class MaintenanceTimeWindow extends Message<MaintenanceTimeWindow> {
  /**
   * @generated from field: google.protobuf.Timestamp begin = 1;
   */
  begin?: Timestamp;

  /**
   * @generated from field: google.protobuf.Duration duration = 2;
   */
  duration?: Duration;

  constructor(data?: PartialMessage<MaintenanceTimeWindow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MaintenanceTimeWindow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "begin", kind: "message", T: Timestamp },
    { no: 2, name: "duration", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MaintenanceTimeWindow {
    return new MaintenanceTimeWindow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MaintenanceTimeWindow {
    return new MaintenanceTimeWindow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MaintenanceTimeWindow {
    return new MaintenanceTimeWindow().fromJsonString(jsonString, options);
  }

  static equals(a: MaintenanceTimeWindow | PlainMessage<MaintenanceTimeWindow> | undefined, b: MaintenanceTimeWindow | PlainMessage<MaintenanceTimeWindow> | undefined): boolean {
    return proto3.util.equals(MaintenanceTimeWindow, a, b);
  }
}

/**
 * @generated from message api.v1.Worker
 */
export class Worker extends Message<Worker> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string machine_type = 2;
   */
  machineType = "";

  /**
   * @generated from field: uint32 minsize = 3;
   */
  minsize = 0;

  /**
   * @generated from field: uint32 maxsize = 4;
   */
  maxsize = 0;

  /**
   * @generated from field: uint32 maxsurge = 5;
   */
  maxsurge = 0;

  /**
   * @generated from field: uint32 maxunavailable = 6;
   */
  maxunavailable = 0;

  constructor(data?: PartialMessage<Worker>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Worker";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "machine_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "minsize", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "maxsize", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "maxsurge", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "maxunavailable", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Worker {
    return new Worker().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Worker {
    return new Worker().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Worker {
    return new Worker().fromJsonString(jsonString, options);
  }

  static equals(a: Worker | PlainMessage<Worker> | undefined, b: Worker | PlainMessage<Worker> | undefined): boolean {
    return proto3.util.equals(Worker, a, b);
  }
}

/**
 * @generated from message api.v1.WorkerUpdate
 */
export class WorkerUpdate extends Message<WorkerUpdate> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: optional string machine_type = 2;
   */
  machineType?: string;

  /**
   * @generated from field: optional uint32 minsize = 3;
   */
  minsize?: number;

  /**
   * @generated from field: optional uint32 maxsize = 4;
   */
  maxsize?: number;

  /**
   * @generated from field: optional uint32 maxsurge = 5;
   */
  maxsurge?: number;

  /**
   * @generated from field: optional uint32 maxunavailable = 6;
   */
  maxunavailable?: number;

  constructor(data?: PartialMessage<WorkerUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.WorkerUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "machine_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "minsize", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 4, name: "maxsize", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 5, name: "maxsurge", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 6, name: "maxunavailable", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkerUpdate {
    return new WorkerUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkerUpdate {
    return new WorkerUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkerUpdate {
    return new WorkerUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: WorkerUpdate | PlainMessage<WorkerUpdate> | undefined, b: WorkerUpdate | PlainMessage<WorkerUpdate> | undefined): boolean {
    return proto3.util.equals(WorkerUpdate, a, b);
  }
}

/**
 * Requests
 *
 * @generated from message api.v1.ClusterServiceGetRequest
 */
export class ClusterServiceGetRequest extends Message<ClusterServiceGetRequest> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<ClusterServiceGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceGetRequest {
    return new ClusterServiceGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceGetRequest {
    return new ClusterServiceGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceGetRequest {
    return new ClusterServiceGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceGetRequest | PlainMessage<ClusterServiceGetRequest> | undefined, b: ClusterServiceGetRequest | PlainMessage<ClusterServiceGetRequest> | undefined): boolean {
    return proto3.util.equals(ClusterServiceGetRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ClusterServiceGetCredentialsRequest
 */
export class ClusterServiceGetCredentialsRequest extends Message<ClusterServiceGetCredentialsRequest> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<ClusterServiceGetCredentialsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceGetCredentialsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceGetCredentialsRequest {
    return new ClusterServiceGetCredentialsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceGetCredentialsRequest {
    return new ClusterServiceGetCredentialsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceGetCredentialsRequest {
    return new ClusterServiceGetCredentialsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceGetCredentialsRequest | PlainMessage<ClusterServiceGetCredentialsRequest> | undefined, b: ClusterServiceGetCredentialsRequest | PlainMessage<ClusterServiceGetCredentialsRequest> | undefined): boolean {
    return proto3.util.equals(ClusterServiceGetCredentialsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ClusterServiceListRequest
 */
export class ClusterServiceListRequest extends Message<ClusterServiceListRequest> {
  /**
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<ClusterServiceListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceListRequest {
    return new ClusterServiceListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceListRequest {
    return new ClusterServiceListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceListRequest {
    return new ClusterServiceListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceListRequest | PlainMessage<ClusterServiceListRequest> | undefined, b: ClusterServiceListRequest | PlainMessage<ClusterServiceListRequest> | undefined): boolean {
    return proto3.util.equals(ClusterServiceListRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ClusterServiceCreateRequest
 */
export class ClusterServiceCreateRequest extends Message<ClusterServiceCreateRequest> {
  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string project = 3;
   */
  project = "";

  /**
   * partition is part of a region
   *
   * @generated from field: string partition = 4;
   */
  partition = "";

  /**
   * @generated from field: api.v1.KubernetesSpec kubernetes = 6;
   */
  kubernetes?: KubernetesSpec;

  /**
   * @generated from field: repeated api.v1.Worker workers = 7;
   */
  workers: Worker[] = [];

  /**
   * @generated from field: api.v1.Maintenance maintenance = 8;
   */
  maintenance?: Maintenance;

  constructor(data?: PartialMessage<ClusterServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "partition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "kubernetes", kind: "message", T: KubernetesSpec },
    { no: 7, name: "workers", kind: "message", T: Worker, repeated: true },
    { no: 8, name: "maintenance", kind: "message", T: Maintenance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceCreateRequest {
    return new ClusterServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceCreateRequest {
    return new ClusterServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceCreateRequest {
    return new ClusterServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceCreateRequest | PlainMessage<ClusterServiceCreateRequest> | undefined, b: ClusterServiceCreateRequest | PlainMessage<ClusterServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(ClusterServiceCreateRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ClusterServiceUpdateRequest
 */
export class ClusterServiceUpdateRequest extends Message<ClusterServiceUpdateRequest> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: optional api.v1.KubernetesSpec kubernetes = 3;
   */
  kubernetes?: KubernetesSpec;

  /**
   * @generated from field: repeated api.v1.WorkerUpdate workers = 4;
   */
  workers: WorkerUpdate[] = [];

  /**
   * @generated from field: optional api.v1.Maintenance maintenance = 5;
   */
  maintenance?: Maintenance;

  constructor(data?: PartialMessage<ClusterServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "kubernetes", kind: "message", T: KubernetesSpec, opt: true },
    { no: 4, name: "workers", kind: "message", T: WorkerUpdate, repeated: true },
    { no: 5, name: "maintenance", kind: "message", T: Maintenance, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceUpdateRequest {
    return new ClusterServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceUpdateRequest {
    return new ClusterServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceUpdateRequest {
    return new ClusterServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceUpdateRequest | PlainMessage<ClusterServiceUpdateRequest> | undefined, b: ClusterServiceUpdateRequest | PlainMessage<ClusterServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(ClusterServiceUpdateRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ClusterServiceDeleteRequest
 */
export class ClusterServiceDeleteRequest extends Message<ClusterServiceDeleteRequest> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<ClusterServiceDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceDeleteRequest {
    return new ClusterServiceDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceDeleteRequest {
    return new ClusterServiceDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceDeleteRequest {
    return new ClusterServiceDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceDeleteRequest | PlainMessage<ClusterServiceDeleteRequest> | undefined, b: ClusterServiceDeleteRequest | PlainMessage<ClusterServiceDeleteRequest> | undefined): boolean {
    return proto3.util.equals(ClusterServiceDeleteRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ClusterServiceWatchStatusRequest
 */
export class ClusterServiceWatchStatusRequest extends Message<ClusterServiceWatchStatusRequest> {
  /**
   * @generated from field: optional string uuid = 1;
   */
  uuid?: string;

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<ClusterServiceWatchStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceWatchStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceWatchStatusRequest {
    return new ClusterServiceWatchStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceWatchStatusRequest {
    return new ClusterServiceWatchStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceWatchStatusRequest {
    return new ClusterServiceWatchStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceWatchStatusRequest | PlainMessage<ClusterServiceWatchStatusRequest> | undefined, b: ClusterServiceWatchStatusRequest | PlainMessage<ClusterServiceWatchStatusRequest> | undefined): boolean {
    return proto3.util.equals(ClusterServiceWatchStatusRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ClusterStatus
 */
export class ClusterStatus extends Message<ClusterStatus> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * @generated from field: uint32 progress = 2;
   */
  progress = 0;

  /**
   * @generated from field: string state = 3;
   */
  state = "";

  /**
   * @generated from field: string type = 4;
   */
  type = "";

  /**
   * @generated from field: string api_server_ready = 10;
   */
  apiServerReady = "";

  /**
   * @generated from field: string control_plane_ready = 11;
   */
  controlPlaneReady = "";

  /**
   * @generated from field: string nodes_ready = 12;
   */
  nodesReady = "";

  /**
   * @generated from field: string system_components_ready = 13;
   */
  systemComponentsReady = "";

  /**
   * @generated from field: repeated api.v1.ClusterStatusLastError last_errors = 14;
   */
  lastErrors: ClusterStatusLastError[] = [];

  constructor(data?: PartialMessage<ClusterStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "progress", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "api_server_ready", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "control_plane_ready", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "nodes_ready", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "system_components_ready", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "last_errors", kind: "message", T: ClusterStatusLastError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterStatus {
    return new ClusterStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterStatus {
    return new ClusterStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterStatus {
    return new ClusterStatus().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterStatus | PlainMessage<ClusterStatus> | undefined, b: ClusterStatus | PlainMessage<ClusterStatus> | undefined): boolean {
    return proto3.util.equals(ClusterStatus, a, b);
  }
}

/**
 * @generated from message api.v1.ClusterStatusLastError
 */
export class ClusterStatusLastError extends Message<ClusterStatusLastError> {
  /**
   * A human readable message indicating details about the last error.
   *
   * @generated from field: string description = 1;
   */
  description = "";

  /**
   * ID of the task which caused this last error
   * +optional
   *
   * @generated from field: optional string task_id = 2;
   */
  taskId?: string;

  /**
   * Well-defined error codes of the last error(s).
   * +optional
   *
   * @generated from field: repeated string codes = 3;
   */
  codes: string[] = [];

  /**
   * Last time the error was reported
   * +optional
   *
   * @generated from field: google.protobuf.Timestamp last_update_time = 4;
   */
  lastUpdateTime?: Timestamp;

  constructor(data?: PartialMessage<ClusterStatusLastError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterStatusLastError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "last_update_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterStatusLastError {
    return new ClusterStatusLastError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterStatusLastError {
    return new ClusterStatusLastError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterStatusLastError {
    return new ClusterStatusLastError().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterStatusLastError | PlainMessage<ClusterStatusLastError> | undefined, b: ClusterStatusLastError | PlainMessage<ClusterStatusLastError> | undefined): boolean {
    return proto3.util.equals(ClusterStatusLastError, a, b);
  }
}

/**
 * Responses
 *
 * @generated from message api.v1.ClusterServiceCreateResponse
 */
export class ClusterServiceCreateResponse extends Message<ClusterServiceCreateResponse> {
  /**
   * @generated from field: api.v1.Cluster cluster = 1;
   */
  cluster?: Cluster;

  constructor(data?: PartialMessage<ClusterServiceCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "message", T: Cluster },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceCreateResponse {
    return new ClusterServiceCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceCreateResponse {
    return new ClusterServiceCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceCreateResponse {
    return new ClusterServiceCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceCreateResponse | PlainMessage<ClusterServiceCreateResponse> | undefined, b: ClusterServiceCreateResponse | PlainMessage<ClusterServiceCreateResponse> | undefined): boolean {
    return proto3.util.equals(ClusterServiceCreateResponse, a, b);
  }
}

/**
 * @generated from message api.v1.ClusterServiceGetResponse
 */
export class ClusterServiceGetResponse extends Message<ClusterServiceGetResponse> {
  /**
   * @generated from field: api.v1.Cluster cluster = 1;
   */
  cluster?: Cluster;

  constructor(data?: PartialMessage<ClusterServiceGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "message", T: Cluster },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceGetResponse {
    return new ClusterServiceGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceGetResponse {
    return new ClusterServiceGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceGetResponse {
    return new ClusterServiceGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceGetResponse | PlainMessage<ClusterServiceGetResponse> | undefined, b: ClusterServiceGetResponse | PlainMessage<ClusterServiceGetResponse> | undefined): boolean {
    return proto3.util.equals(ClusterServiceGetResponse, a, b);
  }
}

/**
 * @generated from message api.v1.ClusterServiceGetCredentialsResponse
 */
export class ClusterServiceGetCredentialsResponse extends Message<ClusterServiceGetCredentialsResponse> {
  /**
   * @generated from field: string kubeconfig = 1;
   */
  kubeconfig = "";

  constructor(data?: PartialMessage<ClusterServiceGetCredentialsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceGetCredentialsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kubeconfig", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceGetCredentialsResponse {
    return new ClusterServiceGetCredentialsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceGetCredentialsResponse {
    return new ClusterServiceGetCredentialsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceGetCredentialsResponse {
    return new ClusterServiceGetCredentialsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceGetCredentialsResponse | PlainMessage<ClusterServiceGetCredentialsResponse> | undefined, b: ClusterServiceGetCredentialsResponse | PlainMessage<ClusterServiceGetCredentialsResponse> | undefined): boolean {
    return proto3.util.equals(ClusterServiceGetCredentialsResponse, a, b);
  }
}

/**
 * @generated from message api.v1.ClusterServiceDeleteResponse
 */
export class ClusterServiceDeleteResponse extends Message<ClusterServiceDeleteResponse> {
  /**
   * @generated from field: api.v1.Cluster cluster = 1;
   */
  cluster?: Cluster;

  constructor(data?: PartialMessage<ClusterServiceDeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceDeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "message", T: Cluster },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceDeleteResponse {
    return new ClusterServiceDeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceDeleteResponse {
    return new ClusterServiceDeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceDeleteResponse {
    return new ClusterServiceDeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceDeleteResponse | PlainMessage<ClusterServiceDeleteResponse> | undefined, b: ClusterServiceDeleteResponse | PlainMessage<ClusterServiceDeleteResponse> | undefined): boolean {
    return proto3.util.equals(ClusterServiceDeleteResponse, a, b);
  }
}

/**
 * @generated from message api.v1.ClusterServiceUpdateResponse
 */
export class ClusterServiceUpdateResponse extends Message<ClusterServiceUpdateResponse> {
  /**
   * @generated from field: api.v1.Cluster cluster = 1;
   */
  cluster?: Cluster;

  constructor(data?: PartialMessage<ClusterServiceUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "message", T: Cluster },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceUpdateResponse {
    return new ClusterServiceUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceUpdateResponse {
    return new ClusterServiceUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceUpdateResponse {
    return new ClusterServiceUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceUpdateResponse | PlainMessage<ClusterServiceUpdateResponse> | undefined, b: ClusterServiceUpdateResponse | PlainMessage<ClusterServiceUpdateResponse> | undefined): boolean {
    return proto3.util.equals(ClusterServiceUpdateResponse, a, b);
  }
}

/**
 * @generated from message api.v1.ClusterServiceListResponse
 */
export class ClusterServiceListResponse extends Message<ClusterServiceListResponse> {
  /**
   * @generated from field: repeated api.v1.Cluster clusters = 1;
   */
  clusters: Cluster[] = [];

  constructor(data?: PartialMessage<ClusterServiceListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusters", kind: "message", T: Cluster, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceListResponse {
    return new ClusterServiceListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceListResponse {
    return new ClusterServiceListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceListResponse {
    return new ClusterServiceListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceListResponse | PlainMessage<ClusterServiceListResponse> | undefined, b: ClusterServiceListResponse | PlainMessage<ClusterServiceListResponse> | undefined): boolean {
    return proto3.util.equals(ClusterServiceListResponse, a, b);
  }
}

/**
 * @generated from message api.v1.ClusterServiceWatchStatusResponse
 */
export class ClusterServiceWatchStatusResponse extends Message<ClusterServiceWatchStatusResponse> {
  /**
   * @generated from field: api.v1.ClusterStatus status = 1;
   */
  status?: ClusterStatus;

  constructor(data?: PartialMessage<ClusterServiceWatchStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClusterServiceWatchStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: ClusterStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceWatchStatusResponse {
    return new ClusterServiceWatchStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceWatchStatusResponse {
    return new ClusterServiceWatchStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceWatchStatusResponse {
    return new ClusterServiceWatchStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceWatchStatusResponse | PlainMessage<ClusterServiceWatchStatusResponse> | undefined, b: ClusterServiceWatchStatusResponse | PlainMessage<ClusterServiceWatchStatusResponse> | undefined): boolean {
    return proto3.util.equals(ClusterServiceWatchStatusResponse, a, b);
  }
}

