// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file api/v1/cluster.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";
/**
 * Operate defines the types of reconcilation to be triggered
 *
 * @generated from enum api.v1.Operate
 */
export var Operate;
(function (Operate) {
    /**
     * OPERATE_UNSPECIFIED is not specified
     *
     * @generated from enum value: OPERATE_UNSPECIFIED = 0;
     */
    Operate[Operate["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * OPERATE_RECONCILE reconcile the cluster
     *
     * @generated from enum value: OPERATE_RECONCILE = 1;
     */
    Operate[Operate["RECONCILE"] = 1] = "RECONCILE";
    /**
     * OPERATE_MAINTAIN maintain the cluster
     *
     * @generated from enum value: OPERATE_MAINTAIN = 2;
     */
    Operate[Operate["MAINTAIN"] = 2] = "MAINTAIN";
    /**
     * OPERATE_RETRY retry the reconcilation of the cluster
     *
     * @generated from enum value: OPERATE_RETRY = 3;
     */
    Operate[Operate["RETRY"] = 3] = "RETRY";
})(Operate || (Operate = {}));
// Retrieve enum metadata with: proto3.getEnumType(Operate)
proto3.util.setEnumType(Operate, "api.v1.Operate", [
    { no: 0, name: "OPERATE_UNSPECIFIED" },
    { no: 1, name: "OPERATE_RECONCILE" },
    { no: 2, name: "OPERATE_MAINTAIN" },
    { no: 3, name: "OPERATE_RETRY" },
]);
/**
 * Cluster describes a kubernetes cluster
 *
 * @generated from message api.v1.Cluster
 */
export class Cluster extends Message {
    constructor(data) {
        super();
        /**
         * Uuid of the cluster
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        /**
         * Name of the cluster
         *
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * Project where this cluster belongs to
         *
         * @generated from field: string project = 3;
         */
        this.project = "";
        /**
         * Partition where this cluster was created
         *
         * @generated from field: string partition = 4;
         */
        this.partition = "";
        /**
         * Workers defines the list of worker groups with their specification
         *
         * @generated from field: repeated api.v1.Worker workers = 6;
         */
        this.workers = [];
        /**
         * Tenant where this cluster belongs to
         *
         * @generated from field: string tenant = 8;
         */
        this.tenant = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Cluster().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Cluster().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Cluster().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Cluster, a, b);
    }
}
Cluster.runtime = proto3;
Cluster.typeName = "api.v1.Cluster";
Cluster.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "partition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "kubernetes", kind: "message", T: KubernetesSpec },
    { no: 6, name: "workers", kind: "message", T: Worker, repeated: true },
    { no: 7, name: "maintenance", kind: "message", T: Maintenance },
    { no: 8, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "created_at", kind: "message", T: Timestamp },
    { no: 11, name: "updated_at", kind: "message", T: Timestamp },
    { no: 12, name: "deleted_at", kind: "message", T: Timestamp },
    { no: 20, name: "status", kind: "message", T: ClusterStatus },
    { no: 21, name: "purpose", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 22, name: "monitoring", kind: "message", T: ClusterMonitoring },
]);
/**
 * KubernetesSpec details of kubernetes this cluster
 *
 * @generated from message api.v1.KubernetesSpec
 */
export class KubernetesSpec extends Message {
    constructor(data) {
        super();
        /**
         * Version of kubernetes
         *
         * @generated from field: string version = 1;
         */
        this.version = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new KubernetesSpec().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new KubernetesSpec().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new KubernetesSpec().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(KubernetesSpec, a, b);
    }
}
KubernetesSpec.runtime = proto3;
KubernetesSpec.typeName = "api.v1.KubernetesSpec";
KubernetesSpec.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Maintenance defines when automatic actions should be scheduled on this cluster
 *
 * @generated from message api.v1.Maintenance
 */
export class Maintenance extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Maintenance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Maintenance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Maintenance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Maintenance, a, b);
    }
}
Maintenance.runtime = proto3;
Maintenance.typeName = "api.v1.Maintenance";
Maintenance.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "kubernetes_autoupdate", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "machineimage_autoupdate", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "time_window", kind: "message", T: MaintenanceTimeWindow },
]);
/**
 * MaintenanceTimeWindow defines the start time and duration during which automatic actions will be performed
 *
 * @generated from message api.v1.MaintenanceTimeWindow
 */
export class MaintenanceTimeWindow extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MaintenanceTimeWindow().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MaintenanceTimeWindow().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MaintenanceTimeWindow().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MaintenanceTimeWindow, a, b);
    }
}
MaintenanceTimeWindow.runtime = proto3;
MaintenanceTimeWindow.typeName = "api.v1.MaintenanceTimeWindow";
MaintenanceTimeWindow.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "begin", kind: "message", T: Time },
    { no: 2, name: "duration", kind: "message", T: Duration },
]);
/**
 * Time of day
 *
 * @generated from message api.v1.Time
 */
export class Time extends Message {
    constructor(data) {
        super();
        /**
         * hour begin of the maintenance window, specified in 24 hour format.
         *
         * @generated from field: uint32 hour = 1;
         */
        this.hour = 0;
        /**
         * hour:minute begin of the maintenance window.
         *
         * @generated from field: uint32 minute = 2;
         */
        this.minute = 0;
        /**
         * timezone specifies for which region in the world the given hour:minute should apply.
         *
         * @generated from field: string timezone = 3;
         */
        this.timezone = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Time().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Time().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Time().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Time, a, b);
    }
}
Time.runtime = proto3;
Time.typeName = "api.v1.Time";
Time.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "hour", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "minute", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "timezone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Worker defines a set of worker nodes with identical properties
 *
 * @generated from message api.v1.Worker
 */
export class Worker extends Message {
    constructor(data) {
        super();
        /**
         * Name of this worker group
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * MachineType of machines which should be used for the worker nodes in this group
         *
         * @generated from field: string machine_type = 2;
         */
        this.machineType = "";
        /**
         * Minsize defines the minimum amount of machines present in this worker group
         *
         * @generated from field: uint32 minsize = 3;
         */
        this.minsize = 0;
        /**
         * Maxsize defines the maximum amount of machines present in this worker group
         *
         * @generated from field: uint32 maxsize = 4;
         */
        this.maxsize = 0;
        /**
         * Maxsurge defines the maximum amount of machines which are spun up in this worker group during a rolling upgrade
         *
         * @generated from field: uint32 maxsurge = 5;
         */
        this.maxsurge = 0;
        /**
         * Maxunavailable defines the maximum amount of not available machines in this worker group during a rolling upgrade
         *
         * @generated from field: uint32 maxunavailable = 6;
         */
        this.maxunavailable = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Worker().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Worker().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Worker().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Worker, a, b);
    }
}
Worker.runtime = proto3;
Worker.typeName = "api.v1.Worker";
Worker.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "machine_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "minsize", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "maxsize", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "maxsurge", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "maxunavailable", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
/**
 * WorkerUpdate is used to update a Worker group
 *
 * @generated from message api.v1.WorkerUpdate
 */
export class WorkerUpdate extends Message {
    constructor(data) {
        super();
        /**
         * Name of the worker group to update
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new WorkerUpdate().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new WorkerUpdate().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new WorkerUpdate().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(WorkerUpdate, a, b);
    }
}
WorkerUpdate.runtime = proto3;
WorkerUpdate.typeName = "api.v1.WorkerUpdate";
WorkerUpdate.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "machine_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "minsize", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 4, name: "maxsize", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 5, name: "maxsurge", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 6, name: "maxunavailable", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
]);
/**
 * ClusterServiceGetRequest is the request payload for a cluster get request
 *
 * @generated from message api.v1.ClusterServiceGetRequest
 */
export class ClusterServiceGetRequest extends Message {
    constructor(data) {
        super();
        /**
         * Uuid of the cluster
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        /**
         * Project of the cluster
         *
         * @generated from field: string project = 2;
         */
        this.project = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceGetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceGetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceGetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceGetRequest, a, b);
    }
}
ClusterServiceGetRequest.runtime = proto3;
ClusterServiceGetRequest.typeName = "api.v1.ClusterServiceGetRequest";
ClusterServiceGetRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ClusterServiceOperateRequest is the request payload for the cluster operate request
 *
 * @generated from message api.v1.ClusterServiceOperateRequest
 */
export class ClusterServiceOperateRequest extends Message {
    constructor(data) {
        super();
        /**
         * Uuid of the cluster
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        /**
         * Project of the cluster
         *
         * @generated from field: string project = 2;
         */
        this.project = "";
        /**
         * Operate is the operation which should be performed
         *
         * @generated from field: api.v1.Operate operate = 3;
         */
        this.operate = Operate.UNSPECIFIED;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceOperateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceOperateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceOperateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceOperateRequest, a, b);
    }
}
ClusterServiceOperateRequest.runtime = proto3;
ClusterServiceOperateRequest.typeName = "api.v1.ClusterServiceOperateRequest";
ClusterServiceOperateRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operate", kind: "enum", T: proto3.getEnumType(Operate) },
]);
/**
 * ClusterServiceGetRequest is the request payload for a cluster get request
 *
 * @generated from message api.v1.ClusterServiceGetCredentialsRequest
 */
export class ClusterServiceGetCredentialsRequest extends Message {
    constructor(data) {
        super();
        /**
         * Uuid of the cluster
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        /**
         * Project of the cluster
         *
         * @generated from field: string project = 2;
         */
        this.project = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceGetCredentialsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceGetCredentialsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceGetCredentialsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceGetCredentialsRequest, a, b);
    }
}
ClusterServiceGetCredentialsRequest.runtime = proto3;
ClusterServiceGetCredentialsRequest.typeName = "api.v1.ClusterServiceGetCredentialsRequest";
ClusterServiceGetCredentialsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "expiration", kind: "message", T: Duration, opt: true },
]);
/**
 * ClusterServiceListRequest is the request payload for a cluster list request
 *
 * @generated from message api.v1.ClusterServiceListRequest
 */
export class ClusterServiceListRequest extends Message {
    constructor(data) {
        super();
        /**
         * Project of the cluster
         *
         * @generated from field: string project = 2;
         */
        this.project = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceListRequest, a, b);
    }
}
ClusterServiceListRequest.runtime = proto3;
ClusterServiceListRequest.typeName = "api.v1.ClusterServiceListRequest";
ClusterServiceListRequest.fields = proto3.util.newFieldList(() => [
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ClusterServiceCreateRequest is the request payload for a cluster create request
 *
 * @generated from message api.v1.ClusterServiceCreateRequest
 */
export class ClusterServiceCreateRequest extends Message {
    constructor(data) {
        super();
        /**
         * Name of the cluster to create
         *
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * Project of the cluster
         *
         * @generated from field: string project = 3;
         */
        this.project = "";
        /**
         * Partition of the cluster
         *
         * @generated from field: string partition = 4;
         */
        this.partition = "";
        /**
         * Worker specification of the cluster
         *
         * @generated from field: repeated api.v1.Worker workers = 7;
         */
        this.workers = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceCreateRequest, a, b);
    }
}
ClusterServiceCreateRequest.runtime = proto3;
ClusterServiceCreateRequest.typeName = "api.v1.ClusterServiceCreateRequest";
ClusterServiceCreateRequest.fields = proto3.util.newFieldList(() => [
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "partition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "kubernetes", kind: "message", T: KubernetesSpec },
    { no: 7, name: "workers", kind: "message", T: Worker, repeated: true },
    { no: 8, name: "maintenance", kind: "message", T: Maintenance },
]);
/**
 * ClusterServiceUpdateRequest is the request payload for a cluster update request
 *
 * @generated from message api.v1.ClusterServiceUpdateRequest
 */
export class ClusterServiceUpdateRequest extends Message {
    constructor(data) {
        super();
        /**
         * Uuid of the cluster
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        /**
         * Project of the cluster
         *
         * @generated from field: string project = 2;
         */
        this.project = "";
        /**
         * Worker specification of the cluster
         *
         * @generated from field: repeated api.v1.WorkerUpdate workers = 4;
         */
        this.workers = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceUpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceUpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceUpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceUpdateRequest, a, b);
    }
}
ClusterServiceUpdateRequest.runtime = proto3;
ClusterServiceUpdateRequest.typeName = "api.v1.ClusterServiceUpdateRequest";
ClusterServiceUpdateRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "kubernetes", kind: "message", T: KubernetesSpec, opt: true },
    { no: 4, name: "workers", kind: "message", T: WorkerUpdate, repeated: true },
    { no: 5, name: "maintenance", kind: "message", T: Maintenance, opt: true },
]);
/**
 * ClusterServiceDeleteRequest is the request payload for a cluster delete request
 *
 * @generated from message api.v1.ClusterServiceDeleteRequest
 */
export class ClusterServiceDeleteRequest extends Message {
    constructor(data) {
        super();
        /**
         * Uuid of the cluster
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        /**
         * Project of the cluster
         *
         * @generated from field: string project = 2;
         */
        this.project = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceDeleteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceDeleteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceDeleteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceDeleteRequest, a, b);
    }
}
ClusterServiceDeleteRequest.runtime = proto3;
ClusterServiceDeleteRequest.typeName = "api.v1.ClusterServiceDeleteRequest";
ClusterServiceDeleteRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ClusterServiceWatchStatusRequest is the request payload for a cluster watch status request
 *
 * @generated from message api.v1.ClusterServiceWatchStatusRequest
 */
export class ClusterServiceWatchStatusRequest extends Message {
    constructor(data) {
        super();
        /**
         * Project of the cluster
         *
         * @generated from field: string project = 2;
         */
        this.project = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceWatchStatusRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceWatchStatusRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceWatchStatusRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceWatchStatusRequest, a, b);
    }
}
ClusterServiceWatchStatusRequest.runtime = proto3;
ClusterServiceWatchStatusRequest.typeName = "api.v1.ClusterServiceWatchStatusRequest";
ClusterServiceWatchStatusRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ClusterStatus
 *
 * @generated from message api.v1.ClusterStatus
 */
export class ClusterStatus extends Message {
    constructor(data) {
        super();
        /**
         * Uuid of the cluster
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        /**
         * Progress of the cluster reconcilation
         *
         * @generated from field: uint32 progress = 2;
         */
        this.progress = 0;
        /**
         * State of the cluster
         *
         * @generated from field: string state = 3;
         */
        this.state = "";
        /**
         * Type of the cluster status
         *
         * @generated from field: string type = 4;
         */
        this.type = "";
        /**
         * ApiServerReady represents the ready state of the kubernetes api server
         *
         * @generated from field: string api_server_ready = 10;
         */
        this.apiServerReady = "";
        /**
         * ControlPlaneReady represents the ready state of the control plane components
         *
         * @generated from field: string control_plane_ready = 11;
         */
        this.controlPlaneReady = "";
        /**
         * NodesReady represents the ready state of the worker nodes
         *
         * @generated from field: string nodes_ready = 12;
         */
        this.nodesReady = "";
        /**
         * SystemComponentsReady represents the ready state of the system components
         *
         * @generated from field: string system_components_ready = 13;
         */
        this.systemComponentsReady = "";
        /**
         * LastErrors is a list of the last known errors occured during the cluster reconcilation
         *
         * @generated from field: repeated api.v1.ClusterStatusLastError last_errors = 14;
         */
        this.lastErrors = [];
        /**
         * ClusterStatusConditions is a list of status conditions of the cluster
         *
         * @generated from field: repeated api.v1.ClusterStatusCondition conditions = 15;
         */
        this.conditions = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterStatus().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterStatus().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterStatus().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterStatus, a, b);
    }
}
ClusterStatus.runtime = proto3;
ClusterStatus.typeName = "api.v1.ClusterStatus";
ClusterStatus.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "progress", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "api_server_ready", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "control_plane_ready", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "nodes_ready", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "system_components_ready", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "last_errors", kind: "message", T: ClusterStatusLastError, repeated: true },
    { no: 15, name: "conditions", kind: "message", T: ClusterStatusCondition, repeated: true },
]);
/**
 * ClusterStatusLastError is the last known cluster status error
 *
 * @generated from message api.v1.ClusterStatusLastError
 */
export class ClusterStatusLastError extends Message {
    constructor(data) {
        super();
        /**
         * Description a human readable message indicating details about the last error
         *
         * @generated from field: string description = 1;
         */
        this.description = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterStatusLastError().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterStatusLastError().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterStatusLastError().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterStatusLastError, a, b);
    }
}
ClusterStatusLastError.runtime = proto3;
ClusterStatusLastError.typeName = "api.v1.ClusterStatusLastError";
ClusterStatusLastError.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "last_update_time", kind: "message", T: Timestamp },
]);
/**
 * ClusterStatusCondition contains status conditions of a cluster
 *
 * @generated from message api.v1.ClusterStatusCondition
 */
export class ClusterStatusCondition extends Message {
    constructor(data) {
        super();
        /**
         * Type is the type of the condition
         *
         * @generated from field: string type = 1;
         */
        this.type = "";
        /**
         * Status is the status of the condition
         *
         * @generated from field: string status = 2;
         */
        this.status = "";
        /**
         * Reason describes the reason for the condition's last transition
         *
         * @generated from field: string reason = 3;
         */
        this.reason = "";
        /**
         * StatusMessage is a human readable message indicating details about the transition
         *
         * @generated from field: string status_message = 4;
         */
        this.statusMessage = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterStatusCondition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterStatusCondition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterStatusCondition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterStatusCondition, a, b);
    }
}
ClusterStatusCondition.runtime = proto3;
ClusterStatusCondition.typeName = "api.v1.ClusterStatusCondition";
ClusterStatusCondition.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "status_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "last_transition_time", kind: "message", T: Timestamp },
    { no: 6, name: "last_update_time", kind: "message", T: Timestamp },
]);
/**
 * ClusterMonitoring contains details howto access the cluster monitoring
 *
 * @generated from message api.v1.ClusterMonitoring
 */
export class ClusterMonitoring extends Message {
    constructor(data) {
        super();
        /**
         * Username to access the monitoring
         *
         * @generated from field: string username = 1;
         */
        this.username = "";
        /**
         * Password to access the monitoring
         *
         * @generated from field: string password = 2;
         */
        this.password = "";
        /**
         * Endpoint is the url to access the monitoring
         *
         * @generated from field: string endpoint = 3;
         */
        this.endpoint = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterMonitoring().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterMonitoring().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterMonitoring().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterMonitoring, a, b);
    }
}
ClusterMonitoring.runtime = proto3;
ClusterMonitoring.typeName = "api.v1.ClusterMonitoring";
ClusterMonitoring.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ClusterServiceCreateResponse is the response payload of a cluster create request
 *
 * @generated from message api.v1.ClusterServiceCreateResponse
 */
export class ClusterServiceCreateResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceCreateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceCreateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceCreateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceCreateResponse, a, b);
    }
}
ClusterServiceCreateResponse.runtime = proto3;
ClusterServiceCreateResponse.typeName = "api.v1.ClusterServiceCreateResponse";
ClusterServiceCreateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "message", T: Cluster },
]);
/**
 * ClusterServiceGetResponse is the response payload of a cluster get request
 *
 * @generated from message api.v1.ClusterServiceGetResponse
 */
export class ClusterServiceGetResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceGetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceGetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceGetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceGetResponse, a, b);
    }
}
ClusterServiceGetResponse.runtime = proto3;
ClusterServiceGetResponse.typeName = "api.v1.ClusterServiceGetResponse";
ClusterServiceGetResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "message", T: Cluster },
]);
/**
 * ClusterServiceGetCredentialsResponse is the response payload of a cluster get credentials request
 *
 * @generated from message api.v1.ClusterServiceGetCredentialsResponse
 */
export class ClusterServiceGetCredentialsResponse extends Message {
    constructor(data) {
        super();
        /**
         * Cluster is the cluster
         *
         * @generated from field: string kubeconfig = 1;
         */
        this.kubeconfig = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceGetCredentialsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceGetCredentialsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceGetCredentialsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceGetCredentialsResponse, a, b);
    }
}
ClusterServiceGetCredentialsResponse.runtime = proto3;
ClusterServiceGetCredentialsResponse.typeName = "api.v1.ClusterServiceGetCredentialsResponse";
ClusterServiceGetCredentialsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "kubeconfig", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ClusterServiceDeleteResponse is the response payload of a cluster delete request
 *
 * @generated from message api.v1.ClusterServiceDeleteResponse
 */
export class ClusterServiceDeleteResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceDeleteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceDeleteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceDeleteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceDeleteResponse, a, b);
    }
}
ClusterServiceDeleteResponse.runtime = proto3;
ClusterServiceDeleteResponse.typeName = "api.v1.ClusterServiceDeleteResponse";
ClusterServiceDeleteResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "message", T: Cluster },
]);
/**
 * ClusterServiceUpdateResponse is the response payload of a cluster update request
 *
 * @generated from message api.v1.ClusterServiceUpdateResponse
 */
export class ClusterServiceUpdateResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceUpdateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceUpdateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceUpdateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceUpdateResponse, a, b);
    }
}
ClusterServiceUpdateResponse.runtime = proto3;
ClusterServiceUpdateResponse.typeName = "api.v1.ClusterServiceUpdateResponse";
ClusterServiceUpdateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "message", T: Cluster },
]);
/**
 * ClusterServiceListResponse is the response payload of a cluster list request
 *
 * @generated from message api.v1.ClusterServiceListResponse
 */
export class ClusterServiceListResponse extends Message {
    constructor(data) {
        super();
        /**
         * Clusters a list of clusters
         *
         * @generated from field: repeated api.v1.Cluster clusters = 1;
         */
        this.clusters = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceListResponse, a, b);
    }
}
ClusterServiceListResponse.runtime = proto3;
ClusterServiceListResponse.typeName = "api.v1.ClusterServiceListResponse";
ClusterServiceListResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "clusters", kind: "message", T: Cluster, repeated: true },
]);
/**
 * ClusterServiceWatchStatusResponse is the response payload of a cluster watch status request
 *
 * @generated from message api.v1.ClusterServiceWatchStatusResponse
 */
export class ClusterServiceWatchStatusResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceWatchStatusResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceWatchStatusResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceWatchStatusResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceWatchStatusResponse, a, b);
    }
}
ClusterServiceWatchStatusResponse.runtime = proto3;
ClusterServiceWatchStatusResponse.typeName = "api.v1.ClusterServiceWatchStatusResponse";
ClusterServiceWatchStatusResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: ClusterStatus },
]);
/**
 * ClusterServiceOperateResponse is the response payload for the cluster operate request
 *
 * @generated from message api.v1.ClusterServiceOperateResponse
 */
export class ClusterServiceOperateResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceOperateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceOperateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceOperateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceOperateResponse, a, b);
    }
}
ClusterServiceOperateResponse.runtime = proto3;
ClusterServiceOperateResponse.typeName = "api.v1.ClusterServiceOperateResponse";
ClusterServiceOperateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "message", T: Cluster },
]);
