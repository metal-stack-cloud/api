// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/assets.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Types
 *
 * @generated from message api.v1.Asset
 */
export class Asset extends Message<Asset> {
  /**
   * @generated from field: api.v1.Region region = 1;
   */
  region?: Region;

  /**
   * @generated from field: map<string, api.v1.MachineType> machine_types = 2;
   */
  machineTypes: { [key: string]: MachineType } = {};

  /**
   * @generated from field: repeated api.v1.Kubernetes kubernetes = 3;
   */
  kubernetes: Kubernetes[] = [];

  constructor(data?: PartialMessage<Asset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Asset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "region", kind: "message", T: Region },
    { no: 2, name: "machine_types", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: MachineType} },
    { no: 3, name: "kubernetes", kind: "message", T: Kubernetes, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Asset {
    return new Asset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Asset {
    return new Asset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Asset {
    return new Asset().fromJsonString(jsonString, options);
  }

  static equals(a: Asset | PlainMessage<Asset> | undefined, b: Asset | PlainMessage<Asset> | undefined): boolean {
    return proto3.util.equals(Asset, a, b);
  }
}

/**
 * @generated from message api.v1.Region
 */
export class Region extends Message<Region> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string address = 3;
   */
  address = "";

  /**
   * @generated from field: bool active = 4;
   */
  active = false;

  /**
   * @generated from field: map<string, api.v1.Partition> partitions = 5;
   */
  partitions: { [key: string]: Partition } = {};

  /**
   * @generated from field: api.v1.AssetDefaults defaults = 6;
   */
  defaults?: AssetDefaults;

  constructor(data?: PartialMessage<Region>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Region";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "partitions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Partition} },
    { no: 6, name: "defaults", kind: "message", T: AssetDefaults },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Region {
    return new Region().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Region {
    return new Region().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Region {
    return new Region().fromJsonString(jsonString, options);
  }

  static equals(a: Region | PlainMessage<Region> | undefined, b: Region | PlainMessage<Region> | undefined): boolean {
    return proto3.util.equals(Region, a, b);
  }
}

/**
 * @generated from message api.v1.Partition
 */
export class Partition extends Message<Partition> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string address = 3;
   */
  address = "";

  /**
   * @generated from field: bool active = 4;
   */
  active = false;

  constructor(data?: PartialMessage<Partition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Partition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Partition {
    return new Partition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Partition {
    return new Partition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Partition {
    return new Partition().fromJsonString(jsonString, options);
  }

  static equals(a: Partition | PlainMessage<Partition> | undefined, b: Partition | PlainMessage<Partition> | undefined): boolean {
    return proto3.util.equals(Partition, a, b);
  }
}

/**
 * @generated from message api.v1.MachineType
 */
export class MachineType extends Message<MachineType> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: uint32 cpus = 3;
   */
  cpus = 0;

  /**
   * @generated from field: uint64 memory = 4;
   */
  memory = protoInt64.zero;

  /**
   * @generated from field: uint64 storage = 5;
   */
  storage = protoInt64.zero;

  constructor(data?: PartialMessage<MachineType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MachineType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cpus", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "memory", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "storage", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MachineType {
    return new MachineType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MachineType {
    return new MachineType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MachineType {
    return new MachineType().fromJsonString(jsonString, options);
  }

  static equals(a: MachineType | PlainMessage<MachineType> | undefined, b: MachineType | PlainMessage<MachineType> | undefined): boolean {
    return proto3.util.equals(MachineType, a, b);
  }
}

/**
 * @generated from message api.v1.Kubernetes
 */
export class Kubernetes extends Message<Kubernetes> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  constructor(data?: PartialMessage<Kubernetes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Kubernetes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Kubernetes {
    return new Kubernetes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Kubernetes {
    return new Kubernetes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Kubernetes {
    return new Kubernetes().fromJsonString(jsonString, options);
  }

  static equals(a: Kubernetes | PlainMessage<Kubernetes> | undefined, b: Kubernetes | PlainMessage<Kubernetes> | undefined): boolean {
    return proto3.util.equals(Kubernetes, a, b);
  }
}

/**
 * @generated from message api.v1.AssetDefaults
 */
export class AssetDefaults extends Message<AssetDefaults> {
  /**
   * @generated from field: string machine_type = 1;
   */
  machineType = "";

  /**
   * @generated from field: string kubernetes_version = 2;
   */
  kubernetesVersion = "";

  /**
   * @generated from field: uint32 worker_min = 3;
   */
  workerMin = 0;

  /**
   * @generated from field: uint32 worker_max = 4;
   */
  workerMax = 0;

  /**
   * @generated from field: string partition = 7;
   */
  partition = "";

  constructor(data?: PartialMessage<AssetDefaults>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.AssetDefaults";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "machine_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kubernetes_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "worker_min", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "worker_max", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "partition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssetDefaults {
    return new AssetDefaults().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssetDefaults {
    return new AssetDefaults().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssetDefaults {
    return new AssetDefaults().fromJsonString(jsonString, options);
  }

  static equals(a: AssetDefaults | PlainMessage<AssetDefaults> | undefined, b: AssetDefaults | PlainMessage<AssetDefaults> | undefined): boolean {
    return proto3.util.equals(AssetDefaults, a, b);
  }
}

/**
 * Requests
 *
 * @generated from message api.v1.AssetServiceListRequest
 */
export class AssetServiceListRequest extends Message<AssetServiceListRequest> {
  constructor(data?: PartialMessage<AssetServiceListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.AssetServiceListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssetServiceListRequest {
    return new AssetServiceListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssetServiceListRequest {
    return new AssetServiceListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssetServiceListRequest {
    return new AssetServiceListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AssetServiceListRequest | PlainMessage<AssetServiceListRequest> | undefined, b: AssetServiceListRequest | PlainMessage<AssetServiceListRequest> | undefined): boolean {
    return proto3.util.equals(AssetServiceListRequest, a, b);
  }
}

/**
 * Responses
 *
 * @generated from message api.v1.AssetServiceListResponse
 */
export class AssetServiceListResponse extends Message<AssetServiceListResponse> {
  /**
   * assets maps region ids to assets
   *
   * @generated from field: map<string, api.v1.Asset> assets = 1;
   */
  assets: { [key: string]: Asset } = {};

  constructor(data?: PartialMessage<AssetServiceListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.AssetServiceListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "assets", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Asset} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssetServiceListResponse {
    return new AssetServiceListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssetServiceListResponse {
    return new AssetServiceListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssetServiceListResponse {
    return new AssetServiceListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AssetServiceListResponse | PlainMessage<AssetServiceListResponse> | undefined, b: AssetServiceListResponse | PlainMessage<AssetServiceListResponse> | undefined): boolean {
    return proto3.util.equals(AssetServiceListResponse, a, b);
  }
}

