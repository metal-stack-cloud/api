// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file api/v1/methods.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
import { MethodPermission } from "./token_pb.js";
import { AdminRole, ProjectRole, TenantRole } from "./common_pb.js";
/**
 * MethodServiceListRequest is the request payload to list all public methods
 *
 * @generated from message api.v1.MethodServiceListRequest
 */
export class MethodServiceListRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MethodServiceListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MethodServiceListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MethodServiceListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MethodServiceListRequest, a, b);
    }
}
MethodServiceListRequest.runtime = proto3;
MethodServiceListRequest.typeName = "api.v1.MethodServiceListRequest";
MethodServiceListRequest.fields = proto3.util.newFieldList(() => []);
/**
 * MethodServiceListResponse is the response payload with all public visible methods
 *
 * @generated from message api.v1.MethodServiceListResponse
 */
export class MethodServiceListResponse extends Message {
    constructor(data) {
        super();
        /**
         * Methods is a list of methods public callable
         *
         * @generated from field: repeated string methods = 1;
         */
        this.methods = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MethodServiceListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MethodServiceListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MethodServiceListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MethodServiceListResponse, a, b);
    }
}
MethodServiceListResponse.runtime = proto3;
MethodServiceListResponse.typeName = "api.v1.MethodServiceListResponse";
MethodServiceListResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "methods", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * MethodServiceTokenScopedListRequest is the request payload to list all methods callable with the token present in the request
 *
 * @generated from message api.v1.MethodServiceTokenScopedListRequest
 */
export class MethodServiceTokenScopedListRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MethodServiceTokenScopedListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MethodServiceTokenScopedListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MethodServiceTokenScopedListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MethodServiceTokenScopedListRequest, a, b);
    }
}
MethodServiceTokenScopedListRequest.runtime = proto3;
MethodServiceTokenScopedListRequest.typeName = "api.v1.MethodServiceTokenScopedListRequest";
MethodServiceTokenScopedListRequest.fields = proto3.util.newFieldList(() => []);
/**
 * MethodServiceTokenScopedListResponse is the response payload which contains all methods which are callable with the given token
 *
 * @generated from message api.v1.MethodServiceTokenScopedListResponse
 */
export class MethodServiceTokenScopedListResponse extends Message {
    constructor(data) {
        super();
        /**
         * Permissions a list of methods which can be called
         *
         * @generated from field: repeated api.v1.MethodPermission permissions = 1;
         */
        this.permissions = [];
        /**
         * ProjectRoles associates a project id with the corresponding role of the token owner
         *
         * @generated from field: map<string, api.v1.ProjectRole> project_roles = 3;
         */
        this.projectRoles = {};
        /**
         * TenantRoles associates a tenant id with the corresponding role of the token owner
         *
         * @generated from field: map<string, api.v1.TenantRole> tenant_roles = 4;
         */
        this.tenantRoles = {};
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MethodServiceTokenScopedListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MethodServiceTokenScopedListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MethodServiceTokenScopedListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MethodServiceTokenScopedListResponse, a, b);
    }
}
MethodServiceTokenScopedListResponse.runtime = proto3;
MethodServiceTokenScopedListResponse.typeName = "api.v1.MethodServiceTokenScopedListResponse";
MethodServiceTokenScopedListResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "permissions", kind: "message", T: MethodPermission, repeated: true },
    { no: 3, name: "project_roles", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "enum", T: proto3.getEnumType(ProjectRole) } },
    { no: 4, name: "tenant_roles", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "enum", T: proto3.getEnumType(TenantRole) } },
    { no: 5, name: "admin_role", kind: "enum", T: proto3.getEnumType(AdminRole), opt: true },
]);
