// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file api/v1/token.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";
/**
 * TokenType specifies different use cases of tokens
 *
 * @generated from enum api.v1.TokenType
 */
export var TokenType;
(function (TokenType) {
    /**
     * TOKEN_TYPE_UNSPECIFIED is not specified
     *
     * @generated from enum value: TOKEN_TYPE_UNSPECIFIED = 0;
     */
    TokenType[TokenType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * TOKEN_TYPE_API is a token for api usage
     *
     * @generated from enum value: TOKEN_TYPE_API = 1;
     */
    TokenType[TokenType["API"] = 1] = "API";
    /**
     * TOKEN_TYPE_CONSOLE is a token for console or web ui usage
     *
     * @generated from enum value: TOKEN_TYPE_CONSOLE = 2;
     */
    TokenType[TokenType["CONSOLE"] = 2] = "CONSOLE";
})(TokenType || (TokenType = {}));
// Retrieve enum metadata with: proto3.getEnumType(TokenType)
proto3.util.setEnumType(TokenType, "api.v1.TokenType", [
    { no: 0, name: "TOKEN_TYPE_UNSPECIFIED" },
    { no: 1, name: "TOKEN_TYPE_API" },
    { no: 2, name: "TOKEN_TYPE_CONSOLE" },
]);
/**
 * Token is a jwt authentication token to access the api
 *
 * @generated from message api.v1.Token
 */
export class Token extends Message {
    constructor(data) {
        super();
        /**
         * Uuid of the jwt token, used to reference it by revoke
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        /**
         * UserId who created this token
         *
         * @generated from field: string user_id = 2;
         */
        this.userId = "";
        /**
         * Description is a user given description of this token.
         *
         * @generated from field: string description = 3;
         */
        this.description = "";
        /**
         * Permissions is a list of service methods this token can be used for
         *
         * @generated from field: repeated api.v1.MethodPermission permissions = 4;
         */
        this.permissions = [];
        /**
         * Roles is a list of roles this token can be used for
         *
         * @generated from field: repeated api.v1.TokenRole roles = 5;
         */
        this.roles = [];
        /**
         * TokenType describes the type of this token
         *
         * @generated from field: api.v1.TokenType token_type = 8;
         */
        this.tokenType = TokenType.UNSPECIFIED;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Token().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Token().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Token().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Token, a, b);
    }
}
Token.runtime = proto3;
Token.typeName = "api.v1.Token";
Token.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "permissions", kind: "message", T: MethodPermission, repeated: true },
    { no: 5, name: "roles", kind: "message", T: TokenRole, repeated: true },
    { no: 6, name: "expires", kind: "message", T: Timestamp },
    { no: 7, name: "issued_at", kind: "message", T: Timestamp },
    { no: 8, name: "token_type", kind: "enum", T: proto3.getEnumType(TokenType) },
]);
/**
 * TokenServiceCreateRequest is the request payload to create a token
 *
 * @generated from message api.v1.TokenServiceCreateRequest
 */
export class TokenServiceCreateRequest extends Message {
    constructor(data) {
        super();
        /**
         * Description of the token
         *
         * @generated from field: string description = 1;
         */
        this.description = "";
        /**
         * Permissions is a list of service methods this token can be used for
         *
         * @generated from field: repeated api.v1.MethodPermission permissions = 2;
         */
        this.permissions = [];
        /**
         * Roles is a list of roles this token can be used for
         *
         * @generated from field: repeated api.v1.TokenRole roles = 3;
         */
        this.roles = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TokenServiceCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TokenServiceCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TokenServiceCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TokenServiceCreateRequest, a, b);
    }
}
TokenServiceCreateRequest.runtime = proto3;
TokenServiceCreateRequest.typeName = "api.v1.TokenServiceCreateRequest";
TokenServiceCreateRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "permissions", kind: "message", T: MethodPermission, repeated: true },
    { no: 3, name: "roles", kind: "message", T: TokenRole, repeated: true },
    { no: 4, name: "expires", kind: "message", T: Duration },
]);
/**
 * MethodPermission is a mapping from a subject/project to a service method
 *
 * @generated from message api.v1.MethodPermission
 */
export class MethodPermission extends Message {
    constructor(data) {
        super();
        /**
         * Subject maybe either the project or the tenant
         * for which the methods should be allowed
         *
         * @generated from field: string subject = 1;
         */
        this.subject = "";
        /**
         * Methods which should be accessible
         *
         * @generated from field: repeated string methods = 2;
         */
        this.methods = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MethodPermission().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MethodPermission().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MethodPermission().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MethodPermission, a, b);
    }
}
MethodPermission.runtime = proto3;
MethodPermission.typeName = "api.v1.MethodPermission";
MethodPermission.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "methods", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * TokenRole is a mapping from subject to role there
 *
 * @generated from message api.v1.TokenRole
 */
export class TokenRole extends Message {
    constructor(data) {
        super();
        /**
         * Subject specifies the subject (project or tenant) this role applies to
         *
         * @generated from field: string subject = 1;
         */
        this.subject = "";
        /**
         * Role defines the string representation of a tenantrole, projectrole or a global adminrole
         *
         * @generated from field: string role = 2;
         */
        this.role = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TokenRole().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TokenRole().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TokenRole().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TokenRole, a, b);
    }
}
TokenRole.runtime = proto3;
TokenRole.typeName = "api.v1.TokenRole";
TokenRole.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * TokenServiceCreateResponse is the response payload of a token create request
 *
 * @generated from message api.v1.TokenServiceCreateResponse
 */
export class TokenServiceCreateResponse extends Message {
    constructor(data) {
        super();
        /**
         * Secret is the body if the jwt token, should be used in api requests as bearer token
         *
         * @generated from field: string secret = 2;
         */
        this.secret = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TokenServiceCreateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TokenServiceCreateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TokenServiceCreateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TokenServiceCreateResponse, a, b);
    }
}
TokenServiceCreateResponse.runtime = proto3;
TokenServiceCreateResponse.typeName = "api.v1.TokenServiceCreateResponse";
TokenServiceCreateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "message", T: Token },
    { no: 2, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * TokenServiceListRequest is the request payload to list tokens
 *
 * @generated from message api.v1.TokenServiceListRequest
 */
export class TokenServiceListRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TokenServiceListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TokenServiceListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TokenServiceListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TokenServiceListRequest, a, b);
    }
}
TokenServiceListRequest.runtime = proto3;
TokenServiceListRequest.typeName = "api.v1.TokenServiceListRequest";
TokenServiceListRequest.fields = proto3.util.newFieldList(() => []);
/**
 * TokenServiceListResponse is the response payload of a token list request
 *
 * @generated from message api.v1.TokenServiceListResponse
 */
export class TokenServiceListResponse extends Message {
    constructor(data) {
        super();
        /**
         * Tokens is a list of tokens without the secrets
         *
         * @generated from field: repeated api.v1.Token tokens = 1;
         */
        this.tokens = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TokenServiceListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TokenServiceListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TokenServiceListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TokenServiceListResponse, a, b);
    }
}
TokenServiceListResponse.runtime = proto3;
TokenServiceListResponse.typeName = "api.v1.TokenServiceListResponse";
TokenServiceListResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "tokens", kind: "message", T: Token, repeated: true },
]);
/**
 * TokenServiceRevokeRequest is the request payload of a token revoke request
 *
 * @generated from message api.v1.TokenServiceRevokeRequest
 */
export class TokenServiceRevokeRequest extends Message {
    constructor(data) {
        super();
        /**
         * Uuid of the token to revoke
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TokenServiceRevokeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TokenServiceRevokeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TokenServiceRevokeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TokenServiceRevokeRequest, a, b);
    }
}
TokenServiceRevokeRequest.runtime = proto3;
TokenServiceRevokeRequest.typeName = "api.v1.TokenServiceRevokeRequest";
TokenServiceRevokeRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * TokenServiceRevokeResponse is the response payload of a token revoke request
 *
 * @generated from message api.v1.TokenServiceRevokeResponse
 */
export class TokenServiceRevokeResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TokenServiceRevokeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TokenServiceRevokeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TokenServiceRevokeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TokenServiceRevokeResponse, a, b);
    }
}
TokenServiceRevokeResponse.runtime = proto3;
TokenServiceRevokeResponse.typeName = "api.v1.TokenServiceRevokeResponse";
TokenServiceRevokeResponse.fields = proto3.util.newFieldList(() => []);
