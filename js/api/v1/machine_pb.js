// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file api/v1/machine.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
/**
 * MachineRole defines the machine roles.
 *
 * @generated from enum api.v1.MachineRole
 */
export var MachineRole;
(function (MachineRole) {
    /**
     * MACHINE_ROLE_UNSPECIFIED is not specified
     *
     * @generated from enum value: MACHINE_ROLE_UNSPECIFIED = 0;
     */
    MachineRole[MachineRole["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * MACHINE_ROLE_MACHINE is a machine that serves as a normal machine
     *
     * @generated from enum value: MACHINE_ROLE_MACHINE = 1;
     */
    MachineRole[MachineRole["MACHINE"] = 1] = "MACHINE";
    /**
     * MACHINE_ROLE_FIREWALL is a machine that serves as a firewall
     *
     * @generated from enum value: MACHINE_ROLE_FIREWALL = 2;
     */
    MachineRole[MachineRole["FIREWALL"] = 2] = "FIREWALL";
})(MachineRole || (MachineRole = {}));
// Retrieve enum metadata with: proto3.getEnumType(MachineRole)
proto3.util.setEnumType(MachineRole, "api.v1.MachineRole", [
    { no: 0, name: "MACHINE_ROLE_UNSPECIFIED" },
    { no: 1, name: "MACHINE_ROLE_MACHINE" },
    { no: 2, name: "MACHINE_ROLE_FIREWALL" },
]);
/**
 * MachineState defines the machine states.
 *
 * @generated from enum api.v1.MachineState
 */
export var MachineState;
(function (MachineState) {
    /**
     * MACHINE_ROLE_UNSPECIFIED is not specified
     *
     * @generated from enum value: MACHINE_STATE_UNSPECIFIED = 0;
     */
    MachineState[MachineState["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * MACHINE_STATE_HEALTHY describes an healthy machine state.
     *
     * @generated from enum value: MACHINE_STATE_HEALTHY = 1;
     */
    MachineState[MachineState["HEALTHY"] = 1] = "HEALTHY";
    /**
     * MACHINE_STATE_UNHEALTHY describes an unhealthy machine state.
     *
     * @generated from enum value: MACHINE_STATE_UNHEALTHY = 2;
     */
    MachineState[MachineState["UNHEALTHY"] = 2] = "UNHEALTHY";
    /**
     * MACHINE_STATE_PROVISIONING describes a machine that is currently being provisioned.
     *
     * @generated from enum value: MACHINE_STATE_PROVISIONING = 3;
     */
    MachineState[MachineState["PROVISIONING"] = 3] = "PROVISIONING";
})(MachineState || (MachineState = {}));
// Retrieve enum metadata with: proto3.getEnumType(MachineState)
proto3.util.setEnumType(MachineState, "api.v1.MachineState", [
    { no: 0, name: "MACHINE_STATE_UNSPECIFIED" },
    { no: 1, name: "MACHINE_STATE_HEALTHY" },
    { no: 2, name: "MACHINE_STATE_UNHEALTHY" },
    { no: 3, name: "MACHINE_STATE_PROVISIONING" },
]);
/**
 * Machine describes a kubernetes machine
 *
 * @generated from message api.v1.Machine
 */
export class Machine extends Message {
    constructor(data) {
        super();
        /**
         * Uuid of the machine
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        /**
         * Name of the machine
         *
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * Project where this machine belongs to
         *
         * @generated from field: string project = 3;
         */
        this.project = "";
        /**
         * AllocationUUID is a unique identifier for this machine allocation, can be used to distinguish between machine allocations over time
         *
         * @generated from field: string allocation_uuid = 4;
         */
        this.allocationUuid = "";
        /**
         * Hostname is the hostname of this machine
         *
         * @generated from field: string hostname = 5;
         */
        this.hostname = "";
        /**
         * Role defines the role of this machine
         *
         * @generated from field: api.v1.MachineRole role = 6;
         */
        this.role = MachineRole.UNSPECIFIED;
        /**
         * Partition where this machine was created
         *
         * @generated from field: string partition = 7;
         */
        this.partition = "";
        /**
         * Image is the OS image provisioned on this machine
         *
         * @generated from field: string image = 8;
         */
        this.image = "";
        /**
         * Size is the size of this machine.
         *
         * @generated from field: string size = 9;
         */
        this.size = "";
        /**
         * Tags are the tags associated with this machine
         *
         * @generated from field: map<string, string> tags = 10;
         */
        this.tags = {};
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Machine().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Machine().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Machine().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Machine, a, b);
    }
}
Machine.runtime = proto3;
Machine.typeName = "api.v1.Machine";
Machine.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "allocation_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "role", kind: "enum", T: proto3.getEnumType(MachineRole) },
    { no: 7, name: "partition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "tags", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
    { no: 15, name: "created_at", kind: "message", T: Timestamp },
    { no: 16, name: "updated_at", kind: "message", T: Timestamp },
    { no: 17, name: "deleted_at", kind: "message", T: Timestamp },
    { no: 20, name: "status", kind: "message", T: MachineStatus },
]);
/**
 * MachineServiceGetRequest is the request payload for a machine get request
 *
 * @generated from message api.v1.MachineServiceGetRequest
 */
export class MachineServiceGetRequest extends Message {
    constructor(data) {
        super();
        /**
         * Uuid of the machine
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        /**
         * Project of the machine
         *
         * @generated from field: string project = 2;
         */
        this.project = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MachineServiceGetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MachineServiceGetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MachineServiceGetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MachineServiceGetRequest, a, b);
    }
}
MachineServiceGetRequest.runtime = proto3;
MachineServiceGetRequest.typeName = "api.v1.MachineServiceGetRequest";
MachineServiceGetRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MachineServiceListRequest is the request payload for a machine list request
 *
 * @generated from message api.v1.MachineServiceListRequest
 */
export class MachineServiceListRequest extends Message {
    constructor(data) {
        super();
        /**
         * Project of the machine
         *
         * @generated from field: string project = 2;
         */
        this.project = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MachineServiceListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MachineServiceListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MachineServiceListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MachineServiceListRequest, a, b);
    }
}
MachineServiceListRequest.runtime = proto3;
MachineServiceListRequest.typeName = "api.v1.MachineServiceListRequest";
MachineServiceListRequest.fields = proto3.util.newFieldList(() => [
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MachineServiceCreateRequest is the request payload for a machine create request
 *
 * @generated from message api.v1.MachineServiceCreateRequest
 */
export class MachineServiceCreateRequest extends Message {
    constructor(data) {
        super();
        /**
         * Name of the machine to create
         *
         * @generated from field: string name = 2;
         */
        this.name = "";
        /**
         * Project of the machine
         *
         * @generated from field: string project = 3;
         */
        this.project = "";
        /**
         * Partition of the machine
         *
         * @generated from field: string partition = 4;
         */
        this.partition = "";
        /**
         * Size is the size of the machine
         *
         * @generated from field: string size = 5;
         */
        this.size = "";
        /**
         * Image is the OS image provisioned on this machine
         *
         * @generated from field: string image = 6;
         */
        this.image = "";
        /**
         * UserData is the ignition or cloudinit configuration to bootstrap this machine with
         *
         * @generated from field: string user_data = 7;
         */
        this.userData = "";
        /**
         * Tags are additional tags to attach to this machine
         *
         * @generated from field: map<string, string> tags = 8;
         */
        this.tags = {};
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MachineServiceCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MachineServiceCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MachineServiceCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MachineServiceCreateRequest, a, b);
    }
}
MachineServiceCreateRequest.runtime = proto3;
MachineServiceCreateRequest.typeName = "api.v1.MachineServiceCreateRequest";
MachineServiceCreateRequest.fields = proto3.util.newFieldList(() => [
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "partition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "user_data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "tags", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
]);
/**
 * MachineServiceDeleteRequest is the request payload for a machine delete request
 *
 * @generated from message api.v1.MachineServiceDeleteRequest
 */
export class MachineServiceDeleteRequest extends Message {
    constructor(data) {
        super();
        /**
         * Uuid of the machine
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        /**
         * Project of the machine
         *
         * @generated from field: string project = 2;
         */
        this.project = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MachineServiceDeleteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MachineServiceDeleteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MachineServiceDeleteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MachineServiceDeleteRequest, a, b);
    }
}
MachineServiceDeleteRequest.runtime = proto3;
MachineServiceDeleteRequest.typeName = "api.v1.MachineServiceDeleteRequest";
MachineServiceDeleteRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MachineStatus
 *
 * @generated from message api.v1.MachineStatus
 */
export class MachineStatus extends Message {
    constructor(data) {
        super();
        /**
         * State describes the current state of the machine
         *
         * @generated from field: api.v1.MachineState state = 1;
         */
        this.state = MachineState.UNSPECIFIED;
        /**
         * StateMessage describes the current state.
         *
         * @generated from field: string state_message = 2;
         */
        this.stateMessage = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MachineStatus().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MachineStatus().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MachineStatus().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MachineStatus, a, b);
    }
}
MachineStatus.runtime = proto3;
MachineStatus.typeName = "api.v1.MachineStatus";
MachineStatus.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(MachineState) },
    { no: 2, name: "state_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "message", T: Timestamp },
]);
/**
 * MachineServiceCreateResponse is the response payload of a machine create request
 *
 * @generated from message api.v1.MachineServiceCreateResponse
 */
export class MachineServiceCreateResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MachineServiceCreateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MachineServiceCreateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MachineServiceCreateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MachineServiceCreateResponse, a, b);
    }
}
MachineServiceCreateResponse.runtime = proto3;
MachineServiceCreateResponse.typeName = "api.v1.MachineServiceCreateResponse";
MachineServiceCreateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "machine", kind: "message", T: Machine },
]);
/**
 * MachineServiceGetResponse is the response payload of a machine get request
 *
 * @generated from message api.v1.MachineServiceGetResponse
 */
export class MachineServiceGetResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MachineServiceGetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MachineServiceGetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MachineServiceGetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MachineServiceGetResponse, a, b);
    }
}
MachineServiceGetResponse.runtime = proto3;
MachineServiceGetResponse.typeName = "api.v1.MachineServiceGetResponse";
MachineServiceGetResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "machine", kind: "message", T: Machine },
]);
/**
 * MachineServiceDeleteResponse is the response payload of a machine delete request
 *
 * @generated from message api.v1.MachineServiceDeleteResponse
 */
export class MachineServiceDeleteResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MachineServiceDeleteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MachineServiceDeleteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MachineServiceDeleteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MachineServiceDeleteResponse, a, b);
    }
}
MachineServiceDeleteResponse.runtime = proto3;
MachineServiceDeleteResponse.typeName = "api.v1.MachineServiceDeleteResponse";
MachineServiceDeleteResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "machine", kind: "message", T: Machine },
]);
/**
 * MachineServiceListResponse is the response payload of a machine list request
 *
 * @generated from message api.v1.MachineServiceListResponse
 */
export class MachineServiceListResponse extends Message {
    constructor(data) {
        super();
        /**
         * Machines a list of machines
         *
         * @generated from field: repeated api.v1.Machine machines = 1;
         */
        this.machines = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MachineServiceListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MachineServiceListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MachineServiceListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MachineServiceListResponse, a, b);
    }
}
MachineServiceListResponse.runtime = proto3;
MachineServiceListResponse.typeName = "api.v1.MachineServiceListResponse";
MachineServiceListResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "machines", kind: "message", T: Machine, repeated: true },
]);
