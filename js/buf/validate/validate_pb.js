// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { enumDesc, extDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_protobuf_descriptor, file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
/**
 * Describes the file buf/validate/validate.proto.
 */
export const file_buf_validate_validate = /*@__PURE__*/ fileDesc("", [file_google_protobuf_descriptor, file_google_protobuf_duration, file_google_protobuf_timestamp]);
/**
 * Describes the message buf.validate.Constraint.
 * Use `create(ConstraintSchema)` to create a new message.
 */
export const ConstraintSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 0);
/**
 * Describes the message buf.validate.MessageConstraints.
 * Use `create(MessageConstraintsSchema)` to create a new message.
 */
export const MessageConstraintsSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 1);
/**
 * Describes the message buf.validate.OneofConstraints.
 * Use `create(OneofConstraintsSchema)` to create a new message.
 */
export const OneofConstraintsSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 2);
/**
 * Describes the message buf.validate.FieldConstraints.
 * Use `create(FieldConstraintsSchema)` to create a new message.
 */
export const FieldConstraintsSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 3);
/**
 * Describes the message buf.validate.PredefinedConstraints.
 * Use `create(PredefinedConstraintsSchema)` to create a new message.
 */
export const PredefinedConstraintsSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 4);
/**
 * Describes the message buf.validate.FloatRules.
 * Use `create(FloatRulesSchema)` to create a new message.
 */
export const FloatRulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 5);
/**
 * Describes the message buf.validate.DoubleRules.
 * Use `create(DoubleRulesSchema)` to create a new message.
 */
export const DoubleRulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 6);
/**
 * Describes the message buf.validate.Int32Rules.
 * Use `create(Int32RulesSchema)` to create a new message.
 */
export const Int32RulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 7);
/**
 * Describes the message buf.validate.Int64Rules.
 * Use `create(Int64RulesSchema)` to create a new message.
 */
export const Int64RulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 8);
/**
 * Describes the message buf.validate.UInt32Rules.
 * Use `create(UInt32RulesSchema)` to create a new message.
 */
export const UInt32RulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 9);
/**
 * Describes the message buf.validate.UInt64Rules.
 * Use `create(UInt64RulesSchema)` to create a new message.
 */
export const UInt64RulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 10);
/**
 * Describes the message buf.validate.SInt32Rules.
 * Use `create(SInt32RulesSchema)` to create a new message.
 */
export const SInt32RulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 11);
/**
 * Describes the message buf.validate.SInt64Rules.
 * Use `create(SInt64RulesSchema)` to create a new message.
 */
export const SInt64RulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 12);
/**
 * Describes the message buf.validate.Fixed32Rules.
 * Use `create(Fixed32RulesSchema)` to create a new message.
 */
export const Fixed32RulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 13);
/**
 * Describes the message buf.validate.Fixed64Rules.
 * Use `create(Fixed64RulesSchema)` to create a new message.
 */
export const Fixed64RulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 14);
/**
 * Describes the message buf.validate.SFixed32Rules.
 * Use `create(SFixed32RulesSchema)` to create a new message.
 */
export const SFixed32RulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 15);
/**
 * Describes the message buf.validate.SFixed64Rules.
 * Use `create(SFixed64RulesSchema)` to create a new message.
 */
export const SFixed64RulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 16);
/**
 * Describes the message buf.validate.BoolRules.
 * Use `create(BoolRulesSchema)` to create a new message.
 */
export const BoolRulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 17);
/**
 * Describes the message buf.validate.StringRules.
 * Use `create(StringRulesSchema)` to create a new message.
 */
export const StringRulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 18);
/**
 * Describes the message buf.validate.BytesRules.
 * Use `create(BytesRulesSchema)` to create a new message.
 */
export const BytesRulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 19);
/**
 * Describes the message buf.validate.EnumRules.
 * Use `create(EnumRulesSchema)` to create a new message.
 */
export const EnumRulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 20);
/**
 * Describes the message buf.validate.RepeatedRules.
 * Use `create(RepeatedRulesSchema)` to create a new message.
 */
export const RepeatedRulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 21);
/**
 * Describes the message buf.validate.MapRules.
 * Use `create(MapRulesSchema)` to create a new message.
 */
export const MapRulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 22);
/**
 * Describes the message buf.validate.AnyRules.
 * Use `create(AnyRulesSchema)` to create a new message.
 */
export const AnyRulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 23);
/**
 * Describes the message buf.validate.DurationRules.
 * Use `create(DurationRulesSchema)` to create a new message.
 */
export const DurationRulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 24);
/**
 * Describes the message buf.validate.TimestampRules.
 * Use `create(TimestampRulesSchema)` to create a new message.
 */
export const TimestampRulesSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 25);
/**
 * Describes the message buf.validate.Violations.
 * Use `create(ViolationsSchema)` to create a new message.
 */
export const ViolationsSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 26);
/**
 * Describes the message buf.validate.Violation.
 * Use `create(ViolationSchema)` to create a new message.
 */
export const ViolationSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 27);
/**
 * Describes the message buf.validate.FieldPath.
 * Use `create(FieldPathSchema)` to create a new message.
 */
export const FieldPathSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 28);
/**
 * Describes the message buf.validate.FieldPathElement.
 * Use `create(FieldPathElementSchema)` to create a new message.
 */
export const FieldPathElementSchema = /*@__PURE__*/ messageDesc(file_buf_validate_validate, 29);
/**
 * Specifies how FieldConstraints.ignore behaves. See the documentation for
 * FieldConstraints.required for definitions of "populated" and "nullable".
 *
 * @generated from enum buf.validate.Ignore
 */
export var Ignore;
(function (Ignore) {
    /**
     * Validation is only skipped if it's an unpopulated nullable fields.
     *
     * ```proto
     * syntax="proto3";
     *
     * message Request {
     *   // The uri rule applies to any value, including the empty string.
     *   string foo = 1 [
     *     (buf.validate.field).string.uri = true
     *   ];
     *
     *   // The uri rule only applies if the field is set, including if it's
     *   // set to the empty string.
     *   optional string bar = 2 [
     *     (buf.validate.field).string.uri = true
     *   ];
     *
     *   // The min_items rule always applies, even if the list is empty.
     *   repeated string baz = 3 [
     *     (buf.validate.field).repeated.min_items = 3
     *   ];
     *
     *   // The custom CEL rule applies only if the field is set, including if
     *   // it's the "zero" value of that message.
     *   SomeMessage quux = 4 [
     *     (buf.validate.field).cel = {/* ... *\/}
     *   ];
     * }
     * ```
     *
     * @generated from enum value: IGNORE_UNSPECIFIED = 0;
     */
    Ignore[Ignore["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * Validation is skipped if the field is unpopulated. This rule is redundant
     * if the field is already nullable.
     *
     * ```proto
     * syntax="proto3
     *
     * message Request {
     *   // The uri rule applies only if the value is not the empty string.
     *   string foo = 1 [
     *     (buf.validate.field).string.uri = true,
     *     (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
     *   ];
     *
     *   // IGNORE_IF_UNPOPULATED is equivalent to IGNORE_UNSPECIFIED in this
     *   // case: the uri rule only applies if the field is set, including if
     *   // it's set to the empty string.
     *   optional string bar = 2 [
     *     (buf.validate.field).string.uri = true,
     *     (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
     *   ];
     *
     *   // The min_items rule only applies if the list has at least one item.
     *   repeated string baz = 3 [
     *     (buf.validate.field).repeated.min_items = 3,
     *     (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
     *   ];
     *
     *   // IGNORE_IF_UNPOPULATED is equivalent to IGNORE_UNSPECIFIED in this
     *   // case: the custom CEL rule applies only if the field is set, including
     *   // if it's the "zero" value of that message.
     *   SomeMessage quux = 4 [
     *     (buf.validate.field).cel = {/* ... *\/},
     *     (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
     *   ];
     * }
     * ```
     *
     * @generated from enum value: IGNORE_IF_UNPOPULATED = 1;
     */
    Ignore[Ignore["IF_UNPOPULATED"] = 1] = "IF_UNPOPULATED";
    /**
     * Validation is skipped if the field is unpopulated or if it is a nullable
     * field populated with its default value. This is typically the zero or
     * empty value, but proto2 scalars support custom defaults. For messages, the
     * default is a non-null message with all its fields unpopulated.
     *
     * ```proto
     * syntax="proto3
     *
     * message Request {
     *   // IGNORE_IF_DEFAULT_VALUE is equivalent to IGNORE_IF_UNPOPULATED in
     *   // this case; the uri rule applies only if the value is not the empty
     *   // string.
     *   string foo = 1 [
     *     (buf.validate.field).string.uri = true,
     *     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
     *   ];
     *
     *   // The uri rule only applies if the field is set to a value other than
     *   // the empty string.
     *   optional string bar = 2 [
     *     (buf.validate.field).string.uri = true,
     *     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
     *   ];
     *
     *   // IGNORE_IF_DEFAULT_VALUE is equivalent to IGNORE_IF_UNPOPULATED in
     *   // this case; the min_items rule only applies if the list has at least
     *   // one item.
     *   repeated string baz = 3 [
     *     (buf.validate.field).repeated.min_items = 3,
     *     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
     *   ];
     *
     *   // The custom CEL rule only applies if the field is set to a value other
     *   // than an empty message (i.e., fields are unpopulated).
     *   SomeMessage quux = 4 [
     *     (buf.validate.field).cel = {/* ... *\/},
     *     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
     *   ];
     * }
     * ```
     *
     * This rule is affected by proto2 custom default values:
     *
     * ```proto
     * syntax="proto2";
     *
     * message Request {
     *   // The gt rule only applies if the field is set and it's value is not
     *   the default (i.e., not -42). The rule even applies if the field is set
     *   to zero since the default value differs.
     *   optional int32 value = 1 [
     *     default = -42,
     *     (buf.validate.field).int32.gt = 0,
     *     (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
     *   ];
     * }
     *
     * @generated from enum value: IGNORE_IF_DEFAULT_VALUE = 2;
     */
    Ignore[Ignore["IF_DEFAULT_VALUE"] = 2] = "IF_DEFAULT_VALUE";
    /**
     * The validation rules of this field will be skipped and not evaluated. This
     * is useful for situations that necessitate turning off the rules of a field
     * containing a message that may not make sense in the current context, or to
     * temporarily disable constraints during development.
     *
     * ```proto
     * message MyMessage {
     *   // The field's rules will always be ignored, including any validation's
     *   // on value's fields.
     *   MyOtherMessage value = 1 [
     *     (buf.validate.field).ignore = IGNORE_ALWAYS];
     * }
     * ```
     *
     * @generated from enum value: IGNORE_ALWAYS = 3;
     */
    Ignore[Ignore["ALWAYS"] = 3] = "ALWAYS";
})(Ignore || (Ignore = {}));
/**
 * Describes the enum buf.validate.Ignore.
 */
export const IgnoreSchema = /*@__PURE__*/ enumDesc(file_buf_validate_validate, 0);
/**
 * WellKnownRegex contain some well-known patterns.
 *
 * @generated from enum buf.validate.KnownRegex
 */
export var KnownRegex;
(function (KnownRegex) {
    /**
     * @generated from enum value: KNOWN_REGEX_UNSPECIFIED = 0;
     */
    KnownRegex[KnownRegex["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * HTTP header name as defined by [RFC 7230](https://datatracker.ietf.org/doc/html/rfc7230#section-3.2).
     *
     * @generated from enum value: KNOWN_REGEX_HTTP_HEADER_NAME = 1;
     */
    KnownRegex[KnownRegex["HTTP_HEADER_NAME"] = 1] = "HTTP_HEADER_NAME";
    /**
     * HTTP header value as defined by [RFC 7230](https://datatracker.ietf.org/doc/html/rfc7230#section-3.2.4).
     *
     * @generated from enum value: KNOWN_REGEX_HTTP_HEADER_VALUE = 2;
     */
    KnownRegex[KnownRegex["HTTP_HEADER_VALUE"] = 2] = "HTTP_HEADER_VALUE";
})(KnownRegex || (KnownRegex = {}));
/**
 * Describes the enum buf.validate.KnownRegex.
 */
export const KnownRegexSchema = /*@__PURE__*/ enumDesc(file_buf_validate_validate, 1);
/**
 * Rules specify the validations to be performed on this message. By default,
 * no validation is performed against a message.
 *
 * @generated from extension: optional buf.validate.MessageConstraints message = 1159;
 */
export const message = /*@__PURE__*/ extDesc(file_buf_validate_validate, 0);
/**
 * Rules specify the validations to be performed on this oneof. By default,
 * no validation is performed against a oneof.
 *
 * @generated from extension: optional buf.validate.OneofConstraints oneof = 1159;
 */
export const oneof = /*@__PURE__*/ extDesc(file_buf_validate_validate, 1);
/**
 * Rules specify the validations to be performed on this field. By default,
 * no validation is performed against a field.
 *
 * @generated from extension: optional buf.validate.FieldConstraints field = 1159;
 */
export const field = /*@__PURE__*/ extDesc(file_buf_validate_validate, 2);
/**
 * Specifies predefined rules. When extending a standard constraint message,
 * this adds additional CEL expressions that apply when the extension is used.
 *
 * ```proto
 * extend buf.validate.Int32Rules {
 *   bool is_zero [(buf.validate.predefined).cel = {
 *     id: "int32.is_zero",
 *     message: "value must be zero",
 *     expression: "!rule || this == 0",
 *   }];
 * }
 *
 * message Foo {
 *   int32 reserved = 1 [(buf.validate.field).int32.(is_zero) = true];
 * }
 * ```
 *
 * @generated from extension: optional buf.validate.PredefinedConstraints predefined = 1160;
 */
export const predefined = /*@__PURE__*/ extDesc(file_buf_validate_validate, 3);
