// @generated by protoc-gen-es v1.1.1 with parameter "target=ts"
// @generated from file admin/v1/cluster.proto (package admin.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Cluster } from "../../api/v1/cluster_pb.js";

/**
 * @generated from enum admin.v1.Operate
 */
export enum Operate {
  /**
   * @generated from enum value: OPERATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: OPERATE_RECONCILE = 1;
   */
  RECONCILE = 1,

  /**
   * @generated from enum value: OPERATE_MAINTAIN = 2;
   */
  MAINTAIN = 2,

  /**
   * @generated from enum value: OPERATE_RETRY = 3;
   */
  RETRY = 3,

  /**
   * @generated from enum value: OPERATE_RESTART_KUBELET = 4;
   */
  RESTART_KUBELET = 4,

  /**
   * @generated from enum value: OPERATE_RESTART_CONTAINERD = 5;
   */
  RESTART_CONTAINERD = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(Operate)
proto3.util.setEnumType(Operate, "admin.v1.Operate", [
  { no: 0, name: "OPERATE_UNSPECIFIED" },
  { no: 1, name: "OPERATE_RECONCILE" },
  { no: 2, name: "OPERATE_MAINTAIN" },
  { no: 3, name: "OPERATE_RETRY" },
  { no: 4, name: "OPERATE_RESTART_KUBELET" },
  { no: 5, name: "OPERATE_RESTART_CONTAINERD" },
]);

/**
 * @generated from message admin.v1.ClusterServiceGetRequest
 */
export class ClusterServiceGetRequest extends Message<ClusterServiceGetRequest> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  constructor(data?: PartialMessage<ClusterServiceGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.ClusterServiceGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceGetRequest {
    return new ClusterServiceGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceGetRequest {
    return new ClusterServiceGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceGetRequest {
    return new ClusterServiceGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceGetRequest | PlainMessage<ClusterServiceGetRequest> | undefined, b: ClusterServiceGetRequest | PlainMessage<ClusterServiceGetRequest> | undefined): boolean {
    return proto3.util.equals(ClusterServiceGetRequest, a, b);
  }
}

/**
 * @generated from message admin.v1.ClusterServiceLogsRequest
 */
export class ClusterServiceLogsRequest extends Message<ClusterServiceLogsRequest> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  constructor(data?: PartialMessage<ClusterServiceLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.ClusterServiceLogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceLogsRequest {
    return new ClusterServiceLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceLogsRequest {
    return new ClusterServiceLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceLogsRequest {
    return new ClusterServiceLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceLogsRequest | PlainMessage<ClusterServiceLogsRequest> | undefined, b: ClusterServiceLogsRequest | PlainMessage<ClusterServiceLogsRequest> | undefined): boolean {
    return proto3.util.equals(ClusterServiceLogsRequest, a, b);
  }
}

/**
 * @generated from message admin.v1.ClusterServiceListRequest
 */
export class ClusterServiceListRequest extends Message<ClusterServiceListRequest> {
  /**
   * @generated from field: optional string project = 1;
   */
  project?: string;

  constructor(data?: PartialMessage<ClusterServiceListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.ClusterServiceListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceListRequest {
    return new ClusterServiceListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceListRequest {
    return new ClusterServiceListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceListRequest {
    return new ClusterServiceListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceListRequest | PlainMessage<ClusterServiceListRequest> | undefined, b: ClusterServiceListRequest | PlainMessage<ClusterServiceListRequest> | undefined): boolean {
    return proto3.util.equals(ClusterServiceListRequest, a, b);
  }
}

/**
 * @generated from message admin.v1.ClusterServiceGetCredentialsRequest
 */
export class ClusterServiceGetCredentialsRequest extends Message<ClusterServiceGetCredentialsRequest> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  constructor(data?: PartialMessage<ClusterServiceGetCredentialsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.ClusterServiceGetCredentialsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceGetCredentialsRequest {
    return new ClusterServiceGetCredentialsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceGetCredentialsRequest {
    return new ClusterServiceGetCredentialsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceGetCredentialsRequest {
    return new ClusterServiceGetCredentialsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceGetCredentialsRequest | PlainMessage<ClusterServiceGetCredentialsRequest> | undefined, b: ClusterServiceGetCredentialsRequest | PlainMessage<ClusterServiceGetCredentialsRequest> | undefined): boolean {
    return proto3.util.equals(ClusterServiceGetCredentialsRequest, a, b);
  }
}

/**
 * @generated from message admin.v1.ClusterServiceOperateRequest
 */
export class ClusterServiceOperateRequest extends Message<ClusterServiceOperateRequest> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * @generated from field: admin.v1.Operate operate = 2;
   */
  operate = Operate.UNSPECIFIED;

  constructor(data?: PartialMessage<ClusterServiceOperateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.ClusterServiceOperateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operate", kind: "enum", T: proto3.getEnumType(Operate) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceOperateRequest {
    return new ClusterServiceOperateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceOperateRequest {
    return new ClusterServiceOperateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceOperateRequest {
    return new ClusterServiceOperateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceOperateRequest | PlainMessage<ClusterServiceOperateRequest> | undefined, b: ClusterServiceOperateRequest | PlainMessage<ClusterServiceOperateRequest> | undefined): boolean {
    return proto3.util.equals(ClusterServiceOperateRequest, a, b);
  }
}

/**
 * @generated from message admin.v1.ClusterServiceGetResponse
 */
export class ClusterServiceGetResponse extends Message<ClusterServiceGetResponse> {
  /**
   * @generated from field: api.v1.Cluster cluster = 1;
   */
  cluster?: Cluster;

  constructor(data?: PartialMessage<ClusterServiceGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.ClusterServiceGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "message", T: Cluster },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceGetResponse {
    return new ClusterServiceGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceGetResponse {
    return new ClusterServiceGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceGetResponse {
    return new ClusterServiceGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceGetResponse | PlainMessage<ClusterServiceGetResponse> | undefined, b: ClusterServiceGetResponse | PlainMessage<ClusterServiceGetResponse> | undefined): boolean {
    return proto3.util.equals(ClusterServiceGetResponse, a, b);
  }
}

/**
 * @generated from message admin.v1.ClusterServiceLogsResponse
 */
export class ClusterServiceLogsResponse extends Message<ClusterServiceLogsResponse> {
  /**
   * @generated from field: repeated string log = 1;
   */
  log: string[] = [];

  constructor(data?: PartialMessage<ClusterServiceLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.ClusterServiceLogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "log", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceLogsResponse {
    return new ClusterServiceLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceLogsResponse {
    return new ClusterServiceLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceLogsResponse {
    return new ClusterServiceLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceLogsResponse | PlainMessage<ClusterServiceLogsResponse> | undefined, b: ClusterServiceLogsResponse | PlainMessage<ClusterServiceLogsResponse> | undefined): boolean {
    return proto3.util.equals(ClusterServiceLogsResponse, a, b);
  }
}

/**
 * @generated from message admin.v1.ClusterServiceListResponse
 */
export class ClusterServiceListResponse extends Message<ClusterServiceListResponse> {
  /**
   * @generated from field: repeated api.v1.Cluster clusters = 1;
   */
  clusters: Cluster[] = [];

  constructor(data?: PartialMessage<ClusterServiceListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.ClusterServiceListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusters", kind: "message", T: Cluster, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceListResponse {
    return new ClusterServiceListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceListResponse {
    return new ClusterServiceListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceListResponse {
    return new ClusterServiceListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceListResponse | PlainMessage<ClusterServiceListResponse> | undefined, b: ClusterServiceListResponse | PlainMessage<ClusterServiceListResponse> | undefined): boolean {
    return proto3.util.equals(ClusterServiceListResponse, a, b);
  }
}

/**
 * @generated from message admin.v1.ClusterServiceGetCredentialsResponse
 */
export class ClusterServiceGetCredentialsResponse extends Message<ClusterServiceGetCredentialsResponse> {
  /**
   * @generated from field: string kubeconfig = 1;
   */
  kubeconfig = "";

  constructor(data?: PartialMessage<ClusterServiceGetCredentialsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.ClusterServiceGetCredentialsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kubeconfig", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceGetCredentialsResponse {
    return new ClusterServiceGetCredentialsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceGetCredentialsResponse {
    return new ClusterServiceGetCredentialsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceGetCredentialsResponse {
    return new ClusterServiceGetCredentialsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceGetCredentialsResponse | PlainMessage<ClusterServiceGetCredentialsResponse> | undefined, b: ClusterServiceGetCredentialsResponse | PlainMessage<ClusterServiceGetCredentialsResponse> | undefined): boolean {
    return proto3.util.equals(ClusterServiceGetCredentialsResponse, a, b);
  }
}

/**
 * @generated from message admin.v1.ClusterServiceOperateResponse
 */
export class ClusterServiceOperateResponse extends Message<ClusterServiceOperateResponse> {
  /**
   * @generated from field: api.v1.Cluster cluster = 1;
   */
  cluster?: Cluster;

  constructor(data?: PartialMessage<ClusterServiceOperateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.ClusterServiceOperateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "message", T: Cluster },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterServiceOperateResponse {
    return new ClusterServiceOperateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterServiceOperateResponse {
    return new ClusterServiceOperateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterServiceOperateResponse {
    return new ClusterServiceOperateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterServiceOperateResponse | PlainMessage<ClusterServiceOperateResponse> | undefined, b: ClusterServiceOperateResponse | PlainMessage<ClusterServiceOperateResponse> | undefined): boolean {
    return proto3.util.equals(ClusterServiceOperateResponse, a, b);
  }
}

