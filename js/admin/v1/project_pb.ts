// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file admin/v1/project.proto (package admin.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Paging } from "../../api/v1/common_pb.js";
import { Project } from "../../api/v1/project_pb.js";

/**
 * ProjectServiceListRequest is the request payload for the project list request
 *
 * @generated from message admin.v1.ProjectServiceListRequest
 */
export class ProjectServiceListRequest extends Message<ProjectServiceListRequest> {
  /**
   * Paging details for the list request
   *
   * @generated from field: api.v1.Paging paging = 1;
   */
  paging?: Paging;

  constructor(data?: PartialMessage<ProjectServiceListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.ProjectServiceListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "paging", kind: "message", T: Paging },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceListRequest {
    return new ProjectServiceListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceListRequest {
    return new ProjectServiceListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceListRequest {
    return new ProjectServiceListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceListRequest | PlainMessage<ProjectServiceListRequest> | undefined, b: ProjectServiceListRequest | PlainMessage<ProjectServiceListRequest> | undefined): boolean {
    return proto3.util.equals(ProjectServiceListRequest, a, b);
  }
}

/**
 * ProjectServiceListResponse is the response payload for the project list request
 *
 * @generated from message admin.v1.ProjectServiceListResponse
 */
export class ProjectServiceListResponse extends Message<ProjectServiceListResponse> {
  /**
   * Projects is the list of projects that match the filters
   *
   * @generated from field: repeated api.v1.Project projects = 1;
   */
  projects: Project[] = [];

  /**
   * NextPage is used for pagination, returns the next page to be fetched and must then be provided in the list request.
   *
   * @generated from field: optional uint64 next_page = 2;
   */
  nextPage?: bigint;

  constructor(data?: PartialMessage<ProjectServiceListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.ProjectServiceListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "projects", kind: "message", T: Project, repeated: true },
    { no: 2, name: "next_page", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceListResponse {
    return new ProjectServiceListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceListResponse {
    return new ProjectServiceListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceListResponse {
    return new ProjectServiceListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceListResponse | PlainMessage<ProjectServiceListResponse> | undefined, b: ProjectServiceListResponse | PlainMessage<ProjectServiceListResponse> | undefined): boolean {
    return proto3.util.equals(ProjectServiceListResponse, a, b);
  }
}

/**
 * ProjectServiceRemoveProjectRequest is the request payload for the project remove member request
 *
 * @generated from message admin.v1.ProjectServiceRemoveProjectRequest
 */
export class ProjectServiceRemoveProjectRequest extends Message<ProjectServiceRemoveProjectRequest> {
  /**
   * ProjectId is the id of the project from which the member is to be removed
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * MemberId is the id of the member to be removed
   *
   * @generated from field: string member_id = 2;
   */
  memberId = "";

  constructor(data?: PartialMessage<ProjectServiceRemoveProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.ProjectServiceRemoveProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "member_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceRemoveProjectRequest {
    return new ProjectServiceRemoveProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceRemoveProjectRequest {
    return new ProjectServiceRemoveProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceRemoveProjectRequest {
    return new ProjectServiceRemoveProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceRemoveProjectRequest | PlainMessage<ProjectServiceRemoveProjectRequest> | undefined, b: ProjectServiceRemoveProjectRequest | PlainMessage<ProjectServiceRemoveProjectRequest> | undefined): boolean {
    return proto3.util.equals(ProjectServiceRemoveProjectRequest, a, b);
  }
}

/**
 * ProjectServiceRemoveProjectResponse is the response payload for the project remove member request
 *
 * @generated from message admin.v1.ProjectServiceRemoveProjectResponse
 */
export class ProjectServiceRemoveProjectResponse extends Message<ProjectServiceRemoveProjectResponse> {
  /**
   * Success is a flag indicating if the member was removed successfully
   *
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * Optional message to provide additional details
   *
   * @generated from field: optional string message = 2;
   */
  message?: string;

  constructor(data?: PartialMessage<ProjectServiceRemoveProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.ProjectServiceRemoveProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectServiceRemoveProjectResponse {
    return new ProjectServiceRemoveProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectServiceRemoveProjectResponse {
    return new ProjectServiceRemoveProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectServiceRemoveProjectResponse {
    return new ProjectServiceRemoveProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectServiceRemoveProjectResponse | PlainMessage<ProjectServiceRemoveProjectResponse> | undefined, b: ProjectServiceRemoveProjectResponse | PlainMessage<ProjectServiceRemoveProjectResponse> | undefined): boolean {
    return proto3.util.equals(ProjectServiceRemoveProjectResponse, a, b);
  }
}

