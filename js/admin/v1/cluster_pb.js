// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file admin/v1/cluster.proto (package admin.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Duration, Message, proto3 } from "@bufbuild/protobuf";
import { Cluster } from "../../api/v1/cluster_pb.js";
import { Machine, VPN } from "./machine_pb.js";
/**
 * Operate defines the types of reconcilation to be triggered
 *
 * @generated from enum admin.v1.Operate
 */
export var Operate;
(function (Operate) {
    /**
     * OPERATE_UNSPECIFIED is not specified
     *
     * @generated from enum value: OPERATE_UNSPECIFIED = 0;
     */
    Operate[Operate["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * OPERATE_RECONCILE reconcile the cluster
     *
     * @generated from enum value: OPERATE_RECONCILE = 1;
     */
    Operate[Operate["RECONCILE"] = 1] = "RECONCILE";
    /**
     * OPERATE_MAINTAIN maintain the cluster
     *
     * @generated from enum value: OPERATE_MAINTAIN = 2;
     */
    Operate[Operate["MAINTAIN"] = 2] = "MAINTAIN";
    /**
     * OPERATE_RETRY retry the reconcilation of the cluster
     *
     * @generated from enum value: OPERATE_RETRY = 3;
     */
    Operate[Operate["RETRY"] = 3] = "RETRY";
})(Operate || (Operate = {}));
// Retrieve enum metadata with: proto3.getEnumType(Operate)
proto3.util.setEnumType(Operate, "admin.v1.Operate", [
    { no: 0, name: "OPERATE_UNSPECIFIED" },
    { no: 1, name: "OPERATE_RECONCILE" },
    { no: 2, name: "OPERATE_MAINTAIN" },
    { no: 3, name: "OPERATE_RETRY" },
]);
/**
 * ClusterServiceGetRequest is the request payload for the cluster get request
 *
 * @generated from message admin.v1.ClusterServiceGetRequest
 */
export class ClusterServiceGetRequest extends Message {
    constructor(data) {
        super();
        /**
         * Uuid of the cluster to get
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        /**
         * WithMachines if set to true machines of all worker groups are also returned
         *
         * @generated from field: bool with_machines = 2;
         */
        this.withMachines = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceGetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceGetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceGetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceGetRequest, a, b);
    }
}
ClusterServiceGetRequest.runtime = proto3;
ClusterServiceGetRequest.typeName = "admin.v1.ClusterServiceGetRequest";
ClusterServiceGetRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "with_machines", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * ClusterServiceListRequest is the request payload for the cluster list request
 *
 * @generated from message admin.v1.ClusterServiceListRequest
 */
export class ClusterServiceListRequest extends Message {
    constructor(data) {
        super();
        /**
         * Labels of the cluster
         *
         * @generated from field: map<string, string> labels = 8;
         */
        this.labels = {};
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceListRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceListRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceListRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceListRequest, a, b);
    }
}
ClusterServiceListRequest.runtime = proto3;
ClusterServiceListRequest.typeName = "admin.v1.ClusterServiceListRequest";
ClusterServiceListRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "partition", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "seed", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "purpose", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
]);
/**
 * ClusterServiceCredentialsRequest is the request payload for the cluster credentials request
 *
 * @generated from message admin.v1.ClusterServiceCredentialsRequest
 */
export class ClusterServiceCredentialsRequest extends Message {
    constructor(data) {
        super();
        /**
         * Uuid of the cluster
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        /**
         * WithVpn if set VPN details are returned
         *
         * @generated from field: bool with_vpn = 2;
         */
        this.withVpn = false;
        /**
         * WithSsh if set ssh access credentials are returned
         *
         * @generated from field: bool with_ssh = 3;
         */
        this.withSsh = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceCredentialsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceCredentialsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceCredentialsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceCredentialsRequest, a, b);
    }
}
ClusterServiceCredentialsRequest.runtime = proto3;
ClusterServiceCredentialsRequest.typeName = "admin.v1.ClusterServiceCredentialsRequest";
ClusterServiceCredentialsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "with_vpn", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "with_ssh", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "expiration", kind: "message", T: Duration, opt: true },
]);
/**
 * ClusterServiceOperateRequest is the request payload for the cluster operate request
 *
 * @generated from message admin.v1.ClusterServiceOperateRequest
 */
export class ClusterServiceOperateRequest extends Message {
    constructor(data) {
        super();
        /**
         * Uuid of the cluster
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        /**
         * Operate is the reconcilation operation which should be performed
         *
         * @generated from field: admin.v1.Operate operate = 2;
         */
        this.operate = Operate.UNSPECIFIED;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceOperateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceOperateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceOperateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceOperateRequest, a, b);
    }
}
ClusterServiceOperateRequest.runtime = proto3;
ClusterServiceOperateRequest.typeName = "admin.v1.ClusterServiceOperateRequest";
ClusterServiceOperateRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operate", kind: "enum", T: proto3.getEnumType(Operate) },
]);
/**
 * ClusterServiceGetResponse is the response payload for the cluster get request
 *
 * @generated from message admin.v1.ClusterServiceGetResponse
 */
export class ClusterServiceGetResponse extends Message {
    constructor(data) {
        super();
        /**
         * Machines is a list of all machines in all worker groups
         *
         * @generated from field: repeated admin.v1.Machine machines = 2;
         */
        this.machines = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceGetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceGetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceGetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceGetResponse, a, b);
    }
}
ClusterServiceGetResponse.runtime = proto3;
ClusterServiceGetResponse.typeName = "admin.v1.ClusterServiceGetResponse";
ClusterServiceGetResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "message", T: Cluster },
    { no: 2, name: "machines", kind: "message", T: Machine, repeated: true },
]);
/**
 * ClusterServiceListResponse is the response payload for the cluster list request
 *
 * @generated from message admin.v1.ClusterServiceListResponse
 */
export class ClusterServiceListResponse extends Message {
    constructor(data) {
        super();
        /**
         * Clusters is the list of clusters
         *
         * @generated from field: repeated api.v1.Cluster clusters = 1;
         */
        this.clusters = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceListResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceListResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceListResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceListResponse, a, b);
    }
}
ClusterServiceListResponse.runtime = proto3;
ClusterServiceListResponse.typeName = "admin.v1.ClusterServiceListResponse";
ClusterServiceListResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "clusters", kind: "message", T: Cluster, repeated: true },
]);
/**
 * ClusterServiceCredentialsResponse is the response payload for the cluster credentials request
 *
 * @generated from message admin.v1.ClusterServiceCredentialsResponse
 */
export class ClusterServiceCredentialsResponse extends Message {
    constructor(data) {
        super();
        /**
         * Kubeconfig is the access token for the kubernetes api of this cluster
         *
         * @generated from field: string kubeconfig = 1;
         */
        this.kubeconfig = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceCredentialsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceCredentialsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceCredentialsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceCredentialsResponse, a, b);
    }
}
ClusterServiceCredentialsResponse.runtime = proto3;
ClusterServiceCredentialsResponse.typeName = "admin.v1.ClusterServiceCredentialsResponse";
ClusterServiceCredentialsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "kubeconfig", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ssh_keypair", kind: "message", T: SSHKeyPair },
    { no: 3, name: "vpn", kind: "message", T: VPN },
]);
/**
 * ClusterServiceOperateResponse is the response payload for the cluster operate request
 *
 * @generated from message admin.v1.ClusterServiceOperateResponse
 */
export class ClusterServiceOperateResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClusterServiceOperateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClusterServiceOperateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClusterServiceOperateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClusterServiceOperateResponse, a, b);
    }
}
ClusterServiceOperateResponse.runtime = proto3;
ClusterServiceOperateResponse.typeName = "admin.v1.ClusterServiceOperateResponse";
ClusterServiceOperateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "message", T: Cluster },
]);
/**
 * SSHKeyPair details to access a firewall via ssh
 *
 * @generated from message admin.v1.SSHKeyPair
 */
export class SSHKeyPair extends Message {
    constructor(data) {
        super();
        /**
         * Publickey is the public key
         *
         * @generated from field: bytes publickey = 1;
         */
        this.publickey = new Uint8Array(0);
        /**
         * Privatekey is the private key
         *
         * @generated from field: bytes privatekey = 2;
         */
        this.privatekey = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SSHKeyPair().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SSHKeyPair().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SSHKeyPair().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SSHKeyPair, a, b);
    }
}
SSHKeyPair.runtime = proto3;
SSHKeyPair.typeName = "admin.v1.SSHKeyPair";
SSHKeyPair.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "publickey", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "privatekey", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
