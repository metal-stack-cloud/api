// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file admin/v1/token.proto (package admin.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Token } from "../../api/v1/token_pb.js";

/**
 * TokenServiceListRequest is the request payload for the token list request
 *
 * @generated from message admin.v1.TokenServiceListRequest
 */
export class TokenServiceListRequest extends Message<TokenServiceListRequest> {
  /**
   * UserId is the id of the user for which the tokens should be listed
   *
   * @generated from field: optional string user_id = 1;
   */
  userId?: string;

  constructor(data?: PartialMessage<TokenServiceListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.TokenServiceListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenServiceListRequest {
    return new TokenServiceListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenServiceListRequest {
    return new TokenServiceListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenServiceListRequest {
    return new TokenServiceListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TokenServiceListRequest | PlainMessage<TokenServiceListRequest> | undefined, b: TokenServiceListRequest | PlainMessage<TokenServiceListRequest> | undefined): boolean {
    return proto3.util.equals(TokenServiceListRequest, a, b);
  }
}

/**
 * TokenServiceListResponse is the response payload for the token list request
 *
 * @generated from message admin.v1.TokenServiceListResponse
 */
export class TokenServiceListResponse extends Message<TokenServiceListResponse> {
  /**
   * Tokens is the list of tokens
   *
   * @generated from field: repeated api.v1.Token tokens = 1;
   */
  tokens: Token[] = [];

  constructor(data?: PartialMessage<TokenServiceListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.TokenServiceListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tokens", kind: "message", T: Token, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenServiceListResponse {
    return new TokenServiceListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenServiceListResponse {
    return new TokenServiceListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenServiceListResponse {
    return new TokenServiceListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TokenServiceListResponse | PlainMessage<TokenServiceListResponse> | undefined, b: TokenServiceListResponse | PlainMessage<TokenServiceListResponse> | undefined): boolean {
    return proto3.util.equals(TokenServiceListResponse, a, b);
  }
}

/**
 * TokenServiceRevokeRequest is the request payload for the token revoke request
 *
 * @generated from message admin.v1.TokenServiceRevokeRequest
 */
export class TokenServiceRevokeRequest extends Message<TokenServiceRevokeRequest> {
  /**
   * Uuid is the uuid of the token which should be revoked
   *
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * UserId is the id of the user for which the token should be revoked
   *
   * @generated from field: string user_id = 2;
   */
  userId = "";

  constructor(data?: PartialMessage<TokenServiceRevokeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.TokenServiceRevokeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenServiceRevokeRequest {
    return new TokenServiceRevokeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenServiceRevokeRequest {
    return new TokenServiceRevokeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenServiceRevokeRequest {
    return new TokenServiceRevokeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TokenServiceRevokeRequest | PlainMessage<TokenServiceRevokeRequest> | undefined, b: TokenServiceRevokeRequest | PlainMessage<TokenServiceRevokeRequest> | undefined): boolean {
    return proto3.util.equals(TokenServiceRevokeRequest, a, b);
  }
}

/**
 * TokenServiceRevokeResponse is the response payload for the token revoke request
 *
 * @generated from message admin.v1.TokenServiceRevokeResponse
 */
export class TokenServiceRevokeResponse extends Message<TokenServiceRevokeResponse> {
  constructor(data?: PartialMessage<TokenServiceRevokeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.TokenServiceRevokeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenServiceRevokeResponse {
    return new TokenServiceRevokeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenServiceRevokeResponse {
    return new TokenServiceRevokeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenServiceRevokeResponse {
    return new TokenServiceRevokeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TokenServiceRevokeResponse | PlainMessage<TokenServiceRevokeResponse> | undefined, b: TokenServiceRevokeResponse | PlainMessage<TokenServiceRevokeResponse> | undefined): boolean {
    return proto3.util.equals(TokenServiceRevokeResponse, a, b);
  }
}

